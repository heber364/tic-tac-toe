     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                  mov 		ax,data
     8 00000003 8ED8                      mov 		ds,ax
     9 00000005 B8[0000]                  mov 		ax,stack
    10 00000008 8ED0                      mov 		ss,ax
    11 0000000A BC[0002]                  mov 		sp,stacktop
    12                                  
    13                                  ;Salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                      mov  		ah,0Fh
    15 0000000F CD10                      int  		10h
    16 00000011 A2[0100]                  mov  		[modo_anterior],al   
    17                                  
    18                                  ;Alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                      mov     	al,12h
    20 00000016 B400                      mov     	ah,0
    21 00000018 CD10                      int     	10h
    22                                  		
    23                                  
    24                                  ;Desenhar jogo da velha
    25                                  	print_terminal_text:
    26 0000001A BB0000                  		mov     	bx,0
    27 0000001D B90800                  		mov     	cx,8			;n�mero de caracteres
    28 00000020 B607                    		mov     	dh,7			;linha 0-29
    29 00000022 B201                    		mov     	dl,1			;coluna 0-79
    30 00000024 C606[0000]0F            		mov		byte[cor], branco_intenso
    31                                  
    32                                  		LTT:
    33 00000029 E8940D                  			call		cursor
    34 0000002C 8A87[0D00]              			mov     al,[bx+string_terminal]
    35 00000030 E8A40D                  			call		caracter
    36 00000033 43                      			inc     bx			;proximo caracter
    37 00000034 FEC2                    			inc			dl			;avanca a coluna
    38                                  			
    39 00000036 E2F1                    			loop    LTT
    40                                  	print_tic_tac_toe:
    41 00000038 C606[0000]0F            		mov		byte[cor],branco_intenso	;1 Reta vertical
    42 0000003D B8F500                  		mov		ax,245
    43 00000040 50                      		push		ax
    44 00000041 B85B00                  		mov		ax,91
    45 00000044 50                      		push		ax
    46 00000045 B8F500                  		mov		ax,245
    47 00000048 50                      		push		ax
    48 00000049 B8D501                  		mov		ax,469
    49 0000004C 50                      		push		ax
    50 0000004D E8670F                  		call		line
    51                                  
    52 00000050 C606[0000]0F            		mov		byte[cor],branco_intenso	;2 Reta vertical
    53 00000055 B87301                  		mov		ax,371
    54 00000058 50                      		push		ax
    55 00000059 B85B00                  		mov		ax,91
    56 0000005C 50                      		push		ax
    57 0000005D B87301                  		mov		ax,371
    58 00000060 50                      		push		ax
    59 00000061 B8D501                  		mov		ax,469
    60 00000064 50                      		push		ax
    61 00000065 E84F0F                  		call		line
    62                                  
    63 00000068 C606[0000]0F            		mov		byte[cor],branco_intenso	;1 Reta horizontal
    64 0000006D B87700                  		mov		ax,119
    65 00000070 50                      		push		ax
    66 00000071 B85701                  		mov		ax,343
    67 00000074 50                      		push		ax
    68 00000075 B8F101                  		mov		ax,497
    69 00000078 50                      		push		ax
    70 00000079 B85701                  		mov		ax,343
    71 0000007C 50                      		push		ax
    72 0000007D E8370F                  		call		line
    73                                  
    74 00000080 C606[0000]0F            		mov		byte[cor],branco_intenso	;2 Reta horizontal
    75 00000085 B87700                  		mov		ax,119
    76 00000088 50                      		push		ax
    77 00000089 B8D900                  		mov		ax,217
    78 0000008C 50                      		push		ax
    79 0000008D B8F101                  		mov		ax,497
    80 00000090 50                      		push		ax
    81 00000091 B8D900                  		mov		ax,217
    82 00000094 50                      		push		ax
    83 00000095 E81F0F                  		call		line
    84                                  
    85                                  	print_command_field:
    86 00000098 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal superior
    87 0000009D B80500                  		mov		ax,5
    88 000000A0 50                      		push		ax
    89 000000A1 B84600                  		mov		ax,70
    90 000000A4 50                      		push		ax
    91 000000A5 B87B02                  		mov		ax,635
    92 000000A8 50                      		push		ax
    93 000000A9 B84600                  		mov		ax,70
    94 000000AC 50                      		push		ax
    95 000000AD E8070F                  		call		line
    96                                  
    97 000000B0 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal inferior
    98 000000B5 B80500                  		mov		ax,5
    99 000000B8 50                      		push		ax
   100 000000B9 B82800                  		mov		ax,40
   101 000000BC 50                      		push		ax
   102 000000BD B87B02                  		mov		ax,635
   103 000000C0 50                      		push		ax
   104 000000C1 B82800                  		mov		ax,40
   105 000000C4 50                      		push		ax
   106 000000C5 E8EF0E                  		call		line
   107                                  
   108 000000C8 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da esquerda
   109 000000CD B80500                  		mov		ax,5
   110 000000D0 50                      		push		ax
   111 000000D1 B84600                  		mov		ax,70
   112 000000D4 50                      		push		ax
   113 000000D5 B80500                  		mov		ax,5
   114 000000D8 50                      		push		ax
   115 000000D9 B82800                  		mov		ax,40
   116 000000DC 50                      		push		ax
   117 000000DD E8D70E                  		call		line
   118                                  
   119 000000E0 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da direita
   120 000000E5 B87B02                  		mov		ax,635
   121 000000E8 50                      		push		ax
   122 000000E9 B84600                  		mov		ax,70
   123 000000EC 50                      		push		ax
   124 000000ED B87B02                  		mov		ax,635
   125 000000F0 50                      		push		ax
   126 000000F1 B82800                  		mov		ax,40
   127 000000F4 50                      		push		ax
   128 000000F5 E8BF0E                  		call		line
   129                                  
   130                                  	print_message_field:
   131 000000F8 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal superior
   132 000000FD B80500                  		mov		ax,5
   133 00000100 50                      		push		ax
   134 00000101 B82300                  		mov		ax,35
   135 00000104 50                      		push		ax
   136 00000105 B87B02                  		mov		ax,635
   137 00000108 50                      		push		ax
   138 00000109 B82300                  		mov		ax,35
   139 0000010C 50                      		push		ax
   140 0000010D E8A70E                  		call		line
   141                                  
   142 00000110 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal inferior
   143 00000115 B80500                  		mov		ax,5
   144 00000118 50                      		push		ax
   145 00000119 B80500                  		mov		ax,5
   146 0000011C 50                      		push		ax
   147 0000011D B87B02                  		mov		ax,635
   148 00000120 50                      		push		ax
   149 00000121 B80500                  		mov		ax,5
   150 00000124 50                      		push		ax
   151 00000125 E88F0E                  		call		line
   152                                  
   153 00000128 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da esquerda
   154 0000012D B80500                  		mov		ax,5
   155 00000130 50                      		push		ax
   156 00000131 B82300                  		mov		ax,35
   157 00000134 50                      		push		ax
   158 00000135 B80500                  		mov		ax,5
   159 00000138 50                      		push		ax
   160 00000139 B80500                  		mov		ax,5
   161 0000013C 50                      		push		ax
   162 0000013D E8770E                  		call		line
   163                                  
   164 00000140 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da direita
   165 00000145 B87B02                  		mov		ax,635
   166 00000148 50                      		push		ax
   167 00000149 B82300                  		mov		ax,35
   168 0000014C 50                      		push		ax
   169 0000014D B87B02                  		mov		ax,635
   170 00000150 50                      		push		ax
   171 00000151 B80500                  		mov		ax,5
   172 00000154 50                      		push		ax
   173 00000155 E85F0E                  		call		line	
   174                                  	
   175                                  	print_command_title:
   176 00000158 B91000                  		mov     	cx,16			;n�mero de caracteres
   177 0000015B BB0000                  		mov     	bx,0
   178 0000015E B61A                    		mov     	dh,26			;linha 0-29
   179 00000160 B202                    		mov     	dl,2			;coluna 0-79
   180 00000162 C606[0000]0F            		mov		byte[cor],branco_intenso
   181                                  	
   182                                  		LCC:
   183 00000167 E8560C                  		call	cursor
   184 0000016A 8A87[2200]              		mov     al,[bx+string_last_move]
   185 0000016E E8660C                  		call	caracter
   186 00000171 43                      		inc     bx			;proximo caracter
   187 00000172 FEC2                    		inc		dl			;avanca a coluna
   188                                  
   189 00000174 E2F1                    		loop    LCC
   190                                  	
   191                                  	
   192                                  	print_message_title:
   193 00000176 B91200                  		mov     	cx,18			;n�mero de caracteres
   194 00000179 BB0000                  		mov     	bx,0
   195 0000017C B61C                    		mov     	dh,28			;linha 0-29
   196 0000017E B202                    		mov     	dl,2			;coluna 0-79
   197 00000180 C606[0000]0F            		mov		byte[cor],branco_intenso
   198                                  
   199                                  		LCM:
   200 00000185 E8380C                  			call	cursor
   201 00000188 8A87[3200]              			mov     al,[bx+string_message]
   202 0000018C E8480C                  			call	caracter
   203 0000018F 43                      			inc     bx			;proximo caracter
   204 00000190 FEC2                    			inc		dl			;avanca a coluna
   205 00000192 E2F1                    			loop    LCM
   206                                  	print_game_title:
   207 00000194 B90D00                  		mov     	cx,13			;n�mero de caracteres
   208 00000197 BB0000                  		mov     	bx,0
   209 0000019A B600                    		mov     	dh,0			;linha 0-29
   210 0000019C B220                    		mov     	dl,32			;coluna 0-79
   211 0000019E C606[0000]0F            		mov		byte[cor],branco_intenso
   212                                  
   213                                  		L1GT:
   214 000001A3 E81A0C                  			call	cursor
   215 000001A6 8A87[1500]              			mov     al,[bx+string_game]
   216 000001AA E82A0C                  			call	caracter
   217 000001AD 43                      			inc     bx			;proximo caracter
   218 000001AE FEC2                    			inc		dl			;avanca a coluna
   219 000001B0 E2F1                    			loop    L1GT
   220                                  
   221                                  		;mov    	ah,08h
   222                                  
   223                                  
   224                                  ;Escrever numerações de ajuda 
   225                                  	;N11
   226 000001B2 B90200                  		mov     	cx,2			;n�mero de caracteres
   227 000001B5 BB0000                  		mov     	bx,0
   228 000001B8 B601                    		mov     	dh,1			;linha 0-29
   229 000001BA B20F                    		mov     	dl,15			;coluna 0-79
   230 000001BC C606[0000]0F            		mov		byte[cor],branco_intenso
   231                                  
   232                                  
   233                                  		LN11:
   234 000001C1 E8FC0B                  			call	cursor
   235 000001C4 8A87[2301]              				mov     al,[bx+n11]
   236 000001C8 E80C0C                  			call	caracter
   237 000001CB 43                      				inc     bx			;proximo caracter
   238 000001CC FEC2                    			inc		dl			;avanca a coluna
   239                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   240 000001CE E2F1                    				loop    LN11
   241                                  	;N12
   242 000001D0 B90200                  		mov     	cx,2			;n�mero de caracteres
   243 000001D3 BB0000                  		mov     	bx,0
   244 000001D6 B601                    		mov     	dh,1			;linha 0-29
   245 000001D8 B21F                    		mov     	dl,31			;coluna 0-79
   246 000001DA C606[0000]0F            		mov		byte[cor],branco_intenso
   247                                  
   248                                  
   249                                  		LN12:
   250 000001DF E8DE0B                  			call	cursor
   251 000001E2 8A87[2501]              				mov     al,[bx+n12]
   252 000001E6 E8EE0B                  			call	caracter
   253 000001E9 43                      				inc     bx			;proximo caracter
   254 000001EA FEC2                    			inc		dl			;avanca a coluna
   255                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   256 000001EC E2F1                    				loop    LN12
   257                                  	;N13
   258 000001EE B90200                  		mov     	cx,2			;n�mero de caracteres
   259 000001F1 BB0000                  		mov     	bx,0
   260 000001F4 B601                    		mov     	dh,1			;linha 0-29
   261 000001F6 B22F                    		mov     	dl,47			;coluna 0-79
   262 000001F8 C606[0000]0F            		mov		byte[cor],branco_intenso
   263                                  
   264                                  
   265                                  		LN13:
   266 000001FD E8C00B                  			call	cursor
   267 00000200 8A87[2701]              				mov     al,[bx+n13]
   268 00000204 E8D00B                  			call	caracter
   269 00000207 43                      				inc     bx			;proximo caracter
   270 00000208 FEC2                    			inc		dl			;avanca a coluna
   271                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   272 0000020A E2F1                    				loop    LN13
   273                                  	;N21
   274 0000020C B90200                  		mov     	cx,2			;n�mero de caracteres
   275 0000020F BB0000                  		mov     	bx,0
   276 00000212 B609                    		mov     	dh,9			;linha 0-29
   277 00000214 B20F                    		mov     	dl,15			;coluna 0-79
   278 00000216 C606[0000]0F            		mov		byte[cor],branco_intenso
   279                                  
   280                                  
   281                                  		LN21:
   282 0000021B E8A20B                  			call	cursor
   283 0000021E 8A87[2901]              				mov     al,[bx+n21]
   284 00000222 E8B20B                  			call	caracter
   285 00000225 43                      				inc     bx			;proximo caracter
   286 00000226 FEC2                    			inc		dl			;avanca a coluna
   287                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   288 00000228 E2F1                    				loop    LN21
   289                                  	;N22
   290 0000022A B90200                  		mov     	cx,2			;n�mero de caracteres
   291 0000022D BB0000                  		mov     	bx,0
   292 00000230 B609                    		mov     	dh,9			;linha 0-29
   293 00000232 B21F                    		mov     	dl,31			;coluna 0-79
   294 00000234 C606[0000]0F            		mov		byte[cor],branco_intenso
   295                                  
   296                                  
   297                                  		LN22:
   298 00000239 E8840B                  			call	cursor
   299 0000023C 8A87[2B01]              				mov     al,[bx+n22]
   300 00000240 E8940B                  			call	caracter
   301 00000243 43                      				inc     bx			;proximo caracter
   302 00000244 FEC2                    			inc		dl			;avanca a coluna
   303                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   304 00000246 E2F1                    				loop    LN22
   305                                  	;N23
   306 00000248 B90200                  		mov     	cx,2			;n�mero de caracteres
   307 0000024B BB0000                  		mov     	bx,0
   308 0000024E B609                    		mov     	dh,9			;linha 0-29
   309 00000250 B22F                    		mov     	dl,47			;coluna 0-79
   310 00000252 C606[0000]0F            		mov		byte[cor],branco_intenso
   311                                  
   312                                  
   313                                  		LN23:
   314 00000257 E8660B                  			call	cursor
   315 0000025A 8A87[2D01]              				mov     al,[bx+n23]
   316 0000025E E8760B                  			call	caracter
   317 00000261 43                      				inc     bx			;proximo caracter
   318 00000262 FEC2                    			inc		dl			;avanca a coluna
   319                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   320 00000264 E2F1                    				loop    LN23
   321                                  	;N31
   322 00000266 B90200                  		mov     	cx,2			;n�mero de caracteres
   323 00000269 BB0000                  		mov     	bx,0
   324 0000026C B611                    		mov     	dh,17			;linha 0-29
   325 0000026E B20F                    		mov     	dl,15			;coluna 0-79
   326 00000270 C606[0000]0F            		mov		byte[cor],branco_intenso
   327                                  
   328                                  
   329                                  		LN31:
   330 00000275 E8480B                  			call	cursor
   331 00000278 8A87[2F01]              				mov     al,[bx+n31]
   332 0000027C E8580B                  			call	caracter
   333 0000027F 43                      				inc     bx			;proximo caracter
   334 00000280 FEC2                    			inc		dl			;avanca a coluna
   335                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   336 00000282 E2F1                    				loop    LN31
   337                                  	;N32
   338 00000284 B90200                  		mov     	cx,2			;n�mero de caracteres
   339 00000287 BB0000                  		mov     	bx,0
   340 0000028A B611                    		mov     	dh,17			;linha 0-29
   341 0000028C B21F                    		mov     	dl,31			;coluna 0-79
   342 0000028E C606[0000]0F            		mov		byte[cor],branco_intenso
   343                                  
   344                                  
   345                                  		LN32:
   346 00000293 E82A0B                  			call	cursor
   347 00000296 8A87[3101]              				mov     al,[bx+n32]
   348 0000029A E83A0B                  			call	caracter
   349 0000029D 43                      				inc     bx			;proximo caracter
   350 0000029E FEC2                    			inc		dl			;avanca a coluna
   351                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   352 000002A0 E2F1                    				loop    LN32
   353                                  	;N33
   354 000002A2 B90200                  		mov     	cx,2			;n�mero de caracteres
   355 000002A5 BB0000                  		mov     	bx,0
   356 000002A8 B611                    		mov     	dh,17			;linha 0-29
   357 000002AA B22F                    		mov     	dl,47			;coluna 0-79
   358 000002AC C606[0000]0F            		mov		byte[cor],branco_intenso
   359                                  
   360                                  
   361                                  		LN33:
   362 000002B1 E80C0B                  			call	cursor
   363 000002B4 8A87[3301]              				mov     al,[bx+n33]
   364 000002B8 E81C0B                  			call	caracter
   365 000002BB 43                      				inc     bx			;proximo caracter
   366 000002BC FEC2                    			inc		dl			;avanca a coluna
   367                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   368 000002BE E2F1                    				loop    LN33
   369                                  ;Código principal
   370                                  main_loop:
   371 000002C0 E8CA00                  	call check_is_tied
   372                                  	return_check_is_tied:
   373                                  
   374 000002C3 B608                    	mov dh, 8 ;linha 0-29
   375 000002C5 B201                    	mov dl, 1 ;coluna 0-79
   376 000002C7 E8F60A                  	call cursor
   377                                  
   378                                  	; Interrupção para capturar jogada
   379 000002CA B40A                    	mov ah, 0Ah
   380 000002CC BA[0B00]                	mov dx, key_jogada
   381 000002CF CD21                    	int 21h
   382                                  
   383                                  	;Limpa campo de mensagem
   384 000002D1 E8A201                  	call clear_message_field
   385                                  	;Limpa terminal onde foi digitado o comando
   386 000002D4 E80107                  	call clear_terminal
   387                                  
   388                                  	; cmp byte[victorious_player], 0
   389                                  	; jne jmp_bridge_novo_jogo
   390                                  
   391                                  
   392                                  
   393                                  
   394 000002D7 E85E00                  	call print_last_command
   395 000002DA BB0200                  	mov bx, 2
   396 000002DD B063                    	mov al, 'c'
   397 000002DF 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 'c'
   398 000002E3 7450                    	je	jmp_bridge_novo_jogo ; caso seja igual a 'c' começa um novo jogo
   399                                  		
   400 000002E5 B073                    	mov al, 's'
   401 000002E7 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 's'
   402 000002EB 746A                    	je	exit_game ; caso seja igual a 's', saia do programa
   403                                  
   404 000002ED 803E[3F01]00            	cmp byte[victorious_player], 0
   405 000002F2 751D                    	jne jogo_encerrado
   406                                  	
   407 000002F4 803E[4001]01            	cmp byte[is_tied], 1
   408 000002F9 7416                    	je jogo_encerrado
   409                                  
   410 000002FB B043                    	mov al, 'C'
   411 000002FD 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 'C'
   412 00000301 740B                    	je jmp_bridge_jogada_circulo ; caso seja igual a 'C' pule para a jogada_circulo
   413                                  	
   414 00000303 B058                    	mov al, 'X'
   415 00000305 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com X
   416 00000309 747F                    	je jmp_bridge_jogada_x	 ; caso seja igual a 'X' pule para a jogada_circulo
   417                                  
   418                                  
   419                                  
   420                                  
   421 0000030B E95800                  	jmp command_invalid
   422                                  jmp_bridge_jogada_circulo:
   423 0000030E E8A301                  	call jogada_circulo
   424                                  jogo_encerrado:
   425 00000311 E88101                  	call clear_command_field ; Apaga comando
   426                                  
   427 00000314 BB0000                  	mov 			bx, 0
   428 00000317 B93300                  	mov			  cx, 51 								;Carrega o tamanho da string em CX
   429 0000031A B61C                    	mov     	dh, 28								;linha 0-29
   430 0000031C B215                    	mov     	dl, 21								;coluna 0-79
   431 0000031E C606[0000]0E            	mov		byte[cor],amarelo
   432                                  		
   433                                  	loop_jogo_encerrado:
   434 00000323 E89A0A                  		call		cursor
   435 00000326 8A87[F000]              		mov     al,	[bx+string_final_message]
   436 0000032A E8AA0A                  		call		caracter
   437 0000032D 43                      		inc     bx			;proximo caracter
   438 0000032E FEC2                    		inc			dl			;avanca a coluna
   439                                  			
   440 00000330 E2F1                    	loop    loop_jogo_encerrado
   441 00000332 E98BFF                  	jmp main_loop
   442                                  
   443                                  jmp_bridge_novo_jogo:
   444 00000335 E8A900                  	call novo_jogo
   445                                  print_last_command:
   446 00000338 BB0200                  	mov 			bx, 2
   447 0000033B B90300                  	mov			  cx, 3 ; Carrega o tamanho da string em CX
   448 0000033E B61A                    	mov     	dh,26								;linha 0-29
   449 00000340 B213                    	mov     	dl,19								;coluna 0-79
   450 00000342 C606[0000]0F            	mov		byte[cor],branco_intenso
   451                                  	
   452                                  	loop_print_last_command:
   453 00000347 E8760A                  		call		cursor
   454 0000034A 8A87[0B00]              		mov     al,	[bx+key_jogada]
   455 0000034E E8860A                  		call		caracter
   456 00000351 43                      		inc     bx			;proximo caracter
   457 00000352 FEC2                    		inc			dl			;avanca a coluna
   458                                  		
   459 00000354 E2F1                    	loop    loop_print_last_command
   460 00000356 C3                      	ret
   461                                  
   462                                  exit_game:
   463 00000357 E83B01                  	call clear_command_field  ;Limpa campo de comando
   464                                  	;int     21h
   465 0000035A B400                      mov  	ah,0   			; set video mode
   466 0000035C A0[0100]                  mov  	al,[modo_anterior]   	; modo anterior
   467 0000035F CD10                      int  	10h
   468 00000361 B8004C                  	mov     ax,4c00h
   469 00000364 CD21                    	int     21h
   470                                  command_invalid:
   471                                  	
   472 00000366 E82C01                  	call clear_command_field ; Apaga comando
   473                                  
   474 00000369 BB0000                  	mov 			bx, 0
   475 0000036C B91000                  	mov			  cx, 16 								;Carrega o tamanho da string em CX
   476 0000036F B61C                    	mov     	dh, 28								;linha 0-29
   477 00000371 B215                    	mov     	dl, 21								;coluna 0-79
   478 00000373 C606[0000]04            	mov		byte[cor],vermelho
   479                                  		
   480                                  	loop_command_invalid:
   481 00000378 E8450A                  		call		cursor
   482 0000037B 8A87[4400]              		mov     al,	[bx+string_invalid_command]
   483 0000037F E8550A                  		call		caracter
   484 00000382 43                      		inc     bx			;proximo caracter
   485 00000383 FEC2                    		inc			dl			;avanca a coluna
   486                                  			
   487 00000385 E2F1                    	loop    loop_command_invalid
   488 00000387 E936FF                  	jmp main_loop
   489                                  
   490                                  jmp_bridge_jogada_x:
   491 0000038A E85101                  	call jogada_x
   492                                  
   493                                  
   494                                  check_is_tied:
   495 0000038D 803E[3501]00            		cmp byte[cell11], 0
   496 00000392 744A                    		je jmp_bridge_return_check_is_tied
   497                                  
   498 00000394 803E[3601]00            		cmp byte[cell12], 0
   499 00000399 7443                    		je jmp_bridge_return_check_is_tied
   500                                  
   501 0000039B 803E[3701]00            		cmp byte[cell13], 0
   502 000003A0 743C                    		je jmp_bridge_return_check_is_tied
   503                                  
   504 000003A2 803E[3801]00            		cmp byte[cell21], 0
   505 000003A7 7435                    		je jmp_bridge_return_check_is_tied
   506                                  
   507 000003A9 803E[3901]00            		cmp byte[cell22], 0
   508 000003AE 742E                    		je jmp_bridge_return_check_is_tied
   509                                  
   510 000003B0 803E[3A01]00            		cmp byte[cell23], 0
   511 000003B5 7427                    		je jmp_bridge_return_check_is_tied
   512                                  
   513 000003B7 803E[3B01]00            		cmp byte[cell31], 0
   514 000003BC 7420                    		je jmp_bridge_return_check_is_tied
   515                                  
   516 000003BE 803E[3C01]00            		cmp byte[cell32], 0
   517 000003C3 7419                    		je jmp_bridge_return_check_is_tied
   518                                  
   519 000003C5 803E[3D01]00            		cmp byte[cell33], 0
   520 000003CA 7412                    		je jmp_bridge_return_check_is_tied
   521                                  
   522 000003CC 803E[3F01]00            		cmp byte[victorious_player], 0
   523 000003D1 750B                    		jne jmp_bridge_return_check_is_tied
   524                                  
   525 000003D3 C606[4001]01            		mov byte[is_tied], 1
   526 000003D8 E8C609                  		call print_tied
   527                                  
   528 000003DB E9E5FE                  		jmp return_check_is_tied
   529                                  jmp_bridge_return_check_is_tied:
   530 000003DE E9E2FE                  	jmp return_check_is_tied
   531                                  novo_jogo:
   532 000003E1 E8B100                  		call clear_command_field ;Limpa o campo de comando
   533                                  
   534 000003E4 C606[0000]00            		mov		byte[cor],preto
   535                                  		;LIMPA CIRCULOS
   536 000003E9 E8D903                  		call circle11
   537 000003EC E8EA03                  		call circle12
   538 000003EF E8FB03                  		call circle13
   539 000003F2 E80C04                  		call circle21
   540 000003F5 E81D04                  		call circle22
   541 000003F8 E82E04                  		call circle23
   542 000003FB E83F04                  		call circle31
   543 000003FE E85004                  		call circle32
   544 00000401 E86104                  		call circle33
   545                                  
   546                                  		;LIMPA X'S
   547 00000404 E87204                  		call x11
   548 00000407 E89604                  		call x12
   549 0000040A E8BA04                  		call x13
   550 0000040D E8DE04                  		call x21
   551 00000410 E80205                  		call x22
   552 00000413 E82605                  		call x23
   553 00000416 E84A05                  		call x31
   554 00000419 E86E05                  		call x32
   555 0000041C E89205                  		call x33
   556                                  
   557                                  		;LIMPA LINHAS DE VITÓRIA
   558 0000041F E8A108                  		call SVL1
   559 00000422 E8B208                  		call SVL2
   560 00000425 E8C308                  		call SVL3
   561 00000428 E8D408                  		call SVC1
   562 0000042B E8E508                  		call SVC2
   563 0000042E E8F608                  		call SVC3
   564 00000431 E80709                  		call SVD1
   565 00000434 E81809                  		call SVD2
   566                                  		
   567                                  		;LIMPA CELULAS 
   568 00000437 C606[3501]00            		mov byte[cell11], 0
   569 0000043C C606[3601]00            		mov byte[cell12], 0
   570 00000441 C606[3701]00            		mov byte[cell13], 0
   571 00000446 C606[3801]00            		mov byte[cell21], 0
   572 0000044B C606[3901]00            		mov byte[cell22], 0
   573 00000450 C606[3A01]00            		mov byte[cell23], 0
   574 00000455 C606[3B01]00            		mov byte[cell31], 0
   575 0000045A C606[3C01]00            		mov byte[cell32], 0
   576 0000045F C606[3D01]00            		mov byte[cell33], 0
   577                                  
   578                                  		;LIMPA REGISTROS DE ÚLTIMA JOGADA 
   579 00000464 C606[3E01]00            		mov byte[last_player], 0
   580 00000469 C606[3F01]00            		mov byte[victorious_player], 0	
   581 0000046E C606[4001]00            		mov byte[is_tied], 0
   582                                  		
   583 00000473 E9C2FB                  		jmp print_tic_tac_toe;
   584                                  		;;limpa jogas na tela
   585                                  
   586                                  clear_message_field:
   587                                  	;Limpa campo de mensagem
   588 00000476 BB0000                  		mov 			bx, 0
   589 00000479 B93300                  		mov			  cx, 51 								;Carrega o tamanho da string em CX
   590 0000047C B61C                    		mov     	dh, 28								;linha 0-29
   591 0000047E B215                    		mov     	dl, 21								;coluna 0-79
   592 00000480 C606[0000]00            		mov		byte[cor],preto
   593                                  		
   594                                  		loop_print_clear_message_field:
   595 00000485 E83809                  			call		cursor
   596 00000488 8A87[8700]              			mov     al,	[bx+string_empty_message]
   597 0000048C E84809                  			call		caracter
   598 0000048F 43                      			inc     bx			;proximo caracter
   599 00000490 FEC2                    			inc			dl			;avanca a coluna
   600                                  			
   601 00000492 E2F1                    		loop    loop_print_clear_message_field
   602 00000494 C3                      	ret
   603                                  clear_command_field:
   604 00000495 BB0000                  	mov 			bx, 0
   605 00000498 B90300                  	mov			  cx, 3 							;carrega o tamanho da string em CX
   606 0000049B B61A                    	mov     	dh,26								;linha 0-29
   607 0000049D B213                    	mov     	dl,19								;coluna 0-79
   608 0000049F C606[0000]00            	mov		byte[cor],preto
   609                                  	
   610                                  	loop_clear_command_field:
   611 000004A4 E81909                  		call		cursor
   612 000004A7 8A87[BA00]              		mov     al,	[bx+string_empty_command]
   613 000004AB E82909                  		call		caracter
   614 000004AE 43                      		inc     bx			;proximo caracter
   615 000004AF FEC2                    		inc			dl			;avanca a coluna
   616                                  		
   617 000004B1 E2F1                    	loop    loop_clear_command_field
   618 000004B3 C3                      	ret
   619                                  jogada_circulo:
   620 000004B4 A0[3E01]                		mov al, [last_player]
   621 000004B7 3C43                    		cmp al, 'C'
   622 000004B9 7450                    		je jogada_repetida
   623                                  
   624 000004BB C606[0000]0A            		mov		byte[cor],verde_claro	 ; seleciona a cord verde claro para círculo
   625                                  		
   626 000004C0 BB0300                  		mov bx, 3
   627 000004C3 8A87[0B00]              		mov al,[bx+key_jogada]
   628 000004C7 2C30                    		sub al, '0'
   629                                  
   630                                  		;compara linha da jogada com 1 
   631 000004C9 3C01                    		cmp al, 1
   632 000004CB 745F                    		je jmp_intermediary_C1
   633                                  		
   634                                  		;compara linha da jogada com 2 
   635 000004CD 3C02                    		cmp al, 2
   636 000004CF 7407                    		je jmp_bridge_c2
   637                                  
   638                                  		; compara linha da jogada com 3 
   639 000004D1 3C03                    		cmp al, 3
   640 000004D3 7406                    		je jmp_bridge_c3
   641                                  
   642 000004D5 E98EFE                  		jmp command_invalid	
   643                                  		jmp_bridge_c2:
   644 000004D8 E8BA00                  			call jmp_intermediary_C2
   645                                  		jmp_bridge_c3:
   646 000004DB E82001                  			call jmp_intermediary_C3
   647                                  
   648                                  jogada_x:	
   649 000004DE A0[3E01]                		mov al, [last_player]
   650 000004E1 3C58                    		cmp al, 'X'
   651 000004E3 7426                    		je jogada_repetida
   652                                  		
   653 000004E5 C606[0000]0C            		mov	byte[cor],rosa
   654                                  
   655 000004EA BB0300                  		mov bx, 3
   656 000004ED 8A87[0B00]              		mov al,[bx+key_jogada]
   657 000004F1 2C30                    		sub al, '0'
   658                                  		;compara linha da jogada com 1 
   659 000004F3 3C01                    		cmp al, 1
   660 000004F5 740B                    		je jmp_bridge_x1
   661                                  		
   662                                  		;compara linha da jogada com 2 
   663 000004F7 3C02                    		cmp al, 2
   664 000004F9 740A                    		je jmp_bridge_x2
   665                                  
   666                                  		; compara linha da jogada com 3 
   667 000004FB 3C03                    		cmp al, 3
   668 000004FD 7409                    		je jmp_bridge_x3
   669                                  
   670 000004FF E964FE                  		jmp command_invalid	
   671                                  
   672                                  		jmp_bridge_x1:
   673 00000502 E88801                  			call jmp_intermediary_X1
   674                                  		jmp_bridge_x2:
   675 00000505 E8EB01                  			call jmp_intermediary_X2
   676                                  		jmp_bridge_x3:
   677 00000508 E85102                  			call jmp_intermediary_X3
   678                                  jogada_repetida:
   679                                  	;Imprime mensagem de jogada repetida na barra de mensagem
   680 0000050B BB0000                  	mov 			bx, 0
   681 0000050E B90F00                  	mov			  cx, 15 								;Carrega o tamanho da string em CX
   682 00000511 B61C                    	mov     	dh, 28								;linha 0-29
   683 00000513 B215                    	mov     	dl, 21								;coluna 0-79
   684 00000515 C606[0000]04            	mov		byte[cor],vermelho
   685                                  		
   686                                  	loop_print_jogada_repetida:
   687 0000051A E8A308                  		call		cursor
   688 0000051D 8A87[7800]              		mov     al,	[bx+string_invalid_player]
   689 00000521 E8B308                  		call		caracter
   690 00000524 43                      		inc     bx			;proximo caracter
   691 00000525 FEC2                    		inc			dl			;avanca a coluna
   692                                  			
   693 00000527 E2F1                    	loop    loop_print_jogada_repetida
   694 00000529 E994FD                  	jmp main_loop
   695                                  jmp_intermediary_C1:
   696 0000052C BB0400                  		mov bx, 4
   697 0000052F 8A87[0B00]              		mov al,[bx+key_jogada]
   698 00000533 2C30                    		sub al, '0'
   699                                  
   700                                  		;compara coluna da jogada com 1 
   701 00000535 3C01                    		cmp al, 1
   702 00000537 740B                    		je jmp_intermediary_C11
   703                                  
   704                                  		;compara coluna da jogada com 2
   705 00000539 3C02                    		cmp al, 2
   706 0000053B 7424                    		je jmp_intermediary_C12
   707                                  
   708                                  		;compara coluna da jogada com 3
   709 0000053D 3C03                    		cmp al, 3
   710 0000053F 743A                    		je jmp_intermediary_C13
   711                                  		
   712 00000541 E922FE                  		jmp command_invalid
   713                                  	jmp_intermediary_C11:
   714 00000544 803E[3501]00            			cmp byte[cell11], 0	
   715 00000549 7513                    			jne jmp_bridge_print_occupied_cell
   716                                  
   717 0000054B C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   718 00000550 C606[3501]43            		  mov byte[cell11], 'C' 					;Seta na celula 11 a jogada C
   719                                  
   720 00000555 E86D02                  			call circle11
   721 00000558 E8A004                  			call check_if_C_won 				;Checa se alguém ganhou
   722 0000055B E962FD                  			jmp main_loop
   723                                  		jmp_bridge_print_occupied_cell: ;ponte para a função principal
   724 0000055E E80301                  			call print_occupied_cell
   725                                  	jmp_intermediary_C12:	
   726 00000561 803E[3601]00            			cmp byte[cell12], 0	
   727 00000566 75F6                    			jne jmp_bridge_print_occupied_cell
   728                                  
   729 00000568 C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   730 0000056D C606[3601]43            			mov byte[cell12], 'C' 					;Seta na celula 12 a jogada C
   731                                  
   732 00000572 E86402                  			call circle12
   733 00000575 E88304                  			call check_if_C_won 				;Checa se alguém ganhou
   734                                  
   735 00000578 E945FD                  			jmp main_loop
   736                                  	jmp_intermediary_C13:
   737 0000057B 803E[3701]00            			cmp byte[cell13], 0
   738 00000580 75DC                    			jne jmp_bridge_print_occupied_cell
   739                                  
   740 00000582 C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   741 00000587 C606[3701]43            			mov byte[cell13], 'C' 					;Seta na celula 13 a jogada C
   742                                  
   743 0000058C E85E02                  			call circle13
   744 0000058F E86904                  			call check_if_C_won 				;Checa se alguém ganhou
   745 00000592 E92BFD                  			jmp main_loop
   746                                  jmp_intermediary_C2:
   747 00000595 BB0400                  		mov bx, 4
   748 00000598 8A87[0B00]              		mov al,[bx+key_jogada]
   749 0000059C 2C30                    		sub al, '0'
   750                                  
   751                                  		;compara coluna da jogada com 1 
   752 0000059E 3C01                    		cmp al, 1
   753 000005A0 740B                    		je jmp_intermediary_C21
   754                                  
   755                                  		;compara coluna da jogada com 2
   756 000005A2 3C02                    		cmp al, 2
   757 000005A4 7421                    		je jmp_intermediary_C22
   758                                  
   759                                  		;compara coluna da jogada com 3
   760 000005A6 3C03                    		cmp al, 3
   761 000005A8 7437                    		je jmp_intermediary_C23
   762                                  
   763 000005AA E9B9FD                  	  jmp command_invalid
   764                                  	jmp_intermediary_C21:
   765 000005AD 803E[3801]00            			cmp byte[cell21], 0	
   766 000005B2 75AA                    			jne jmp_bridge_print_occupied_cell
   767                                  
   768 000005B4 C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   769 000005B9 C606[3801]43            			mov byte[cell21], 'C' 					;Seta na celula 21 a jogada C
   770                                  
   771 000005BE E84002                  			call circle21
   772 000005C1 E83704                  			call check_if_C_won 				;Checa se alguém ganhou
   773 000005C4 E9F9FC                  			jmp main_loop
   774                                  	jmp_intermediary_C22:
   775 000005C7 803E[3901]00            			cmp byte[cell22], 0	
   776 000005CC 7590                    			jne jmp_bridge_print_occupied_cell
   777                                  
   778 000005CE C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   779 000005D3 C606[3901]43            			mov byte[cell22], 'C' 					;Seta na celula 22 a jogada C
   780                                  
   781 000005D8 E83A02                  			call circle22
   782 000005DB E81D04                  			call check_if_C_won 				;Checa se alguém ganhou
   783 000005DE E9DFFC                  			jmp main_loop
   784                                  	jmp_intermediary_C23:
   785 000005E1 803E[3A01]00            			cmp byte[cell23], 0	
   786 000005E6 7513                    			jne jmp_bridge_3_print_occupied_cell
   787                                  
   788 000005E8 C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   789 000005ED C606[3A01]43            			mov byte[cell23], 'C' 					;Seta na celula 23 a jogada C
   790                                  
   791 000005F2 E83402                  			call circle23
   792                                  	  ganhou								
   793 000005F5 E80304                  			call check_if_C_won 				;Checa se alguém ganhou
   794 000005F8 E9C5FC                  			jmp main_loop
   795                                  
   796                                  			jmp_bridge_3_print_occupied_cell:
   797 000005FB E86600                  				call print_occupied_cell
   798                                  jmp_intermediary_C3:
   799 000005FE BB0400                  		mov bx, 4
   800 00000601 8A87[0B00]              		mov al,[bx+key_jogada]
   801 00000605 2C30                    		sub al, '0'
   802                                  
   803                                  		;compara coluna da jogada com 1 
   804 00000607 3C01                    		cmp al, 1
   805 00000609 740B                    		je jmp_intermediary_C31
   806                                  
   807                                  		;compara coluna da jogada com 2
   808 0000060B 3C02                    		cmp al, 2
   809 0000060D 7421                    		je jmp_intermediary_C32
   810                                  
   811                                  		;compara coluna da jogada com 3
   812 0000060F 3C03                    		cmp al, 3
   813 00000611 7437                    		je jmp_intermediary_C33
   814                                  
   815 00000613 E950FD                  	 jmp command_invalid
   816                                  
   817                                  	jmp_intermediary_C31:
   818 00000616 803E[3B01]00            			cmp byte[cell31], 0	
   819 0000061B 7547                    			jne print_occupied_cell
   820                                  
   821 0000061D C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   822 00000622 C606[3B01]43            			mov byte[cell31], 'C' 					;Seta na celula 31 a jogada C
   823                                  
   824 00000627 E81302                  			call circle31
   825 0000062A E8CE03                  			call check_if_C_won 				;Checa se alguém ganhou
   826 0000062D E990FC                  			jmp main_loop
   827                                  	jmp_intermediary_C32:
   828 00000630 803E[3C01]00            			cmp byte[cell32], 0	
   829 00000635 752D                    			jne print_occupied_cell
   830                                  
   831 00000637 C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   832 0000063C C606[3C01]43            			mov byte[cell32], 'C' 					;Seta na celula 32 a jogada C
   833                                  
   834 00000641 E80D02                  			call circle32
   835 00000644 E8B403                  			call check_if_C_won 				;Checa se alguém ganhou
   836 00000647 E976FC                  			jmp main_loop
   837                                  	jmp_intermediary_C33:
   838 0000064A 803E[3D01]00            			cmp byte[cell33], 0	
   839 0000064F 7513                    			jne print_occupied_cell
   840                                  
   841 00000651 C606[3E01]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   842 00000656 C606[3D01]43            			mov byte[cell33], 'C' 					;Seta na celula 33 a jogada C
   843                                  
   844 0000065B E80702                  			call circle33
   845 0000065E E89A03                  			call check_if_C_won 				;Checa se alguém ganhou
   846 00000661 E95CFC                  			jmp main_loop
   847                                  print_occupied_cell:
   848 00000664 50                      	push ax
   849 00000665 53                      	push bx
   850 00000666 51                      	push cx
   851 00000667 52                      	push dx
   852                                  
   853 00000668 BB0000                  		mov				bx, 0
   854 0000066B B90F00                  		mov			  cx, 15 								;Carrega o tamanho da string em CX
   855 0000066E B61C                    		mov     	dh, 28								;linha 0-29
   856 00000670 B215                    		mov     	dl, 21								;coluna 0-79
   857 00000672 C606[0000]04            		mov		byte[cor],vermelho
   858                                  		
   859                                  		loop_print_occupied_cell:
   860 00000677 E84607                  			call		cursor
   861 0000067A 8A87[6400]              			mov     al,	[bx+string_occupied_cell]
   862 0000067E E85607                  			call		caracter
   863 00000681 43                      			inc     bx			;proximo caracter
   864 00000682 FEC2                    			inc			dl			;avanca a colunaS
   865                                  			
   866 00000684 E2F1                    		loop    loop_print_occupied_cell
   867                                  	
   868 00000686 5A                      	pop dx
   869 00000687 59                      	pop cx
   870 00000688 5B                      	pop bx
   871 00000689 58                      	pop ax
   872                                  
   873 0000068A E933FC                  	jmp main_loop
   874                                  jmp_intermediary_X1:
   875 0000068D BB0400                  		mov bx, 4
   876 00000690 8A87[0B00]              		mov al,[bx+key_jogada]
   877 00000694 2C30                    		sub al, '0'
   878                                  
   879                                  		;compara coluna da jogada com 1 
   880 00000696 3C01                    		cmp al, 1
   881 00000698 740B                    		je jmp_intermediary_X11
   882                                  
   883                                  		;compara coluna da jogada com 2
   884 0000069A 3C02                    		cmp al, 2
   885 0000069C 7421                    		je jmp_intermediary_X12
   886                                  
   887                                  		;compara coluna da jogada com 3
   888 0000069E 3C03                    		cmp al, 3
   889 000006A0 7437                    		je jmp_intermediary_X13
   890                                  
   891 000006A2 E9C1FC                  		jmp command_invalid
   892                                  	jmp_intermediary_X11:
   893 000006A5 803E[3501]00            			cmp byte[cell11], 0	
   894 000006AA 75B8                    			jne print_occupied_cell
   895                                  
   896 000006AC C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   897 000006B1 C606[3501]58            			mov byte[cell11], 'X' ; Seta na celula 11 a jogada 'X'
   898                                  
   899 000006B6 E8C001                  			call x11
   900 000006B9 E8A304                  			call check_if_X_won
   901 000006BC E901FC                  			jmp main_loop
   902                                  	jmp_intermediary_X12:
   903 000006BF 803E[3601]00            			cmp byte[cell12], 0	
   904 000006C4 759E                    			jne print_occupied_cell
   905                                  
   906 000006C6 C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   907 000006CB C606[3601]58            			mov byte[cell12], 'X' ; Seta na celula 12 a jogada 'X'
   908                                  
   909 000006D0 E8CD01                  			call x12
   910 000006D3 E88904                  			call check_if_X_won
   911 000006D6 E9E7FB                  			jmp main_loop
   912                                  	jmp_intermediary_X13:
   913 000006D9 803E[3701]00            			cmp byte[cell13], 0	
   914 000006DE 7584                    			jne print_occupied_cell
   915                                  
   916 000006E0 C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   917 000006E5 C606[3701]58            			mov byte[cell13], 'X' ; Seta na celula 13 a jogada 'X'
   918                                  
   919 000006EA E8DA01                  			call x13
   920 000006ED E86F04                  			call check_if_X_won
   921 000006F0 E9CDFB                  			jmp main_loop
   922                                  jmp_intermediary_X2:
   923 000006F3 BB0400                  		mov bx, 4
   924 000006F6 8A87[0B00]              		mov al,[bx+key_jogada]
   925 000006FA 2C30                    		sub al, '0'
   926                                  
   927                                  		;compara coluna da jogada com 1 
   928 000006FC 3C01                    		cmp al, 1
   929 000006FE 740B                    		je jmp_intermediary_X21
   930                                  
   931                                  		;compara coluna da jogada com 2
   932 00000700 3C02                    		cmp al, 2
   933 00000702 7424                    		je jmp_intermediary_X22
   934                                  
   935                                  		;compara coluna da jogada com 3
   936 00000704 3C03                    		cmp al, 3
   937 00000706 743A                    		je jmp_intermediary_X23
   938                                  
   939 00000708 E95BFC                  		jmp command_invalid
   940                                  	jmp_intermediary_X21:
   941 0000070B 803E[3801]00            			cmp byte[cell21], 0	
   942 00000710 7513                    			jne jmp_bridge_2_print_occupied_cell
   943                                  
   944 00000712 C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   945 00000717 C606[3801]58            			mov byte[cell21], 'X' ; Seta na celula 21 a jogada 'X'
   946                                  			
   947 0000071C E8CF01                  			call x21
   948 0000071F E83D04                  			call check_if_X_won
   949 00000722 E99BFB                  			jmp main_loop
   950                                  	jmp_bridge_2_print_occupied_cell:
   951 00000725 E83CFF                  		call print_occupied_cell
   952                                  	jmp_intermediary_X22:
   953 00000728 803E[3901]00            			cmp byte[cell22], 0	
   954 0000072D 75F6                    			jne jmp_bridge_2_print_occupied_cell
   955                                  
   956 0000072F C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   957 00000734 C606[3901]58            			mov byte[cell22], 'X' ; Seta na celula 22 a jogada 'X'
   958                                  
   959 00000739 E8D901                  			call x22
   960 0000073C E82004                  			call check_if_X_won
   961 0000073F E97EFB                  			jmp main_loop
   962                                  	jmp_intermediary_X23:
   963 00000742 803E[3A01]00            			cmp byte[cell23], 0	
   964 00000747 75DC                    			jne jmp_bridge_2_print_occupied_cell
   965                                  
   966 00000749 C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   967 0000074E C606[3A01]58            			mov byte[cell23], 'X' ; Seta na celula 23 a jogada 'X'
   968                                  
   969 00000753 E8E601                  			call x23
   970 00000756 E80604                  			call check_if_X_won
   971 00000759 E964FB                  			jmp main_loop
   972                                  
   973                                  jmp_intermediary_X3:
   974 0000075C BB0400                  		mov bx, 4
   975 0000075F 8A87[0B00]              		mov al,[bx+key_jogada]
   976 00000763 2C30                    		sub al, '0'
   977                                  
   978                                  		;compara coluna da jogada com 1 
   979 00000765 3C01                    		cmp al, 1
   980 00000767 740B                    		je jmp_intermediary_X31
   981                                  
   982                                  		;compara coluna da jogada com 2
   983 00000769 3C02                    		cmp al, 2
   984 0000076B 7421                    		je jmp_intermediary_X32
   985                                  
   986                                  		;compara coluna da jogada com 3
   987 0000076D 3C03                    		cmp al, 3
   988 0000076F 7437                    		je jmp_intermediary_X33
   989                                  
   990 00000771 E9F2FB                  		jmp command_invalid
   991                                  	jmp_intermediary_X31:
   992 00000774 803E[3B01]00            			cmp byte[cell31], 0	
   993 00000779 75AA                    			jne jmp_bridge_2_print_occupied_cell
   994                                  
   995 0000077B C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   996 00000780 C606[3B01]58            			mov byte[cell31], 'X' ; Seta na celula 31 a jogada 'X'
   997                                  
   998 00000785 E8DB01                  			call x31
   999 00000788 E8D403                  			call check_if_X_won
  1000 0000078B E932FB                  			jmp main_loop
  1001                                  	jmp_intermediary_X32:
  1002 0000078E 803E[3C01]00            			cmp byte[cell32], 0	
  1003 00000793 7590                    			jne jmp_bridge_2_print_occupied_cell
  1004                                  
  1005 00000795 C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
  1006 0000079A C606[3C01]58            			mov byte[cell32], 'X' ; Seta na celula 32 a jogada 'X'
  1007                                  			
  1008 0000079F E8E801                  			call x32
  1009 000007A2 E8BA03                  			call check_if_X_won
  1010 000007A5 E918FB                  			jmp main_loop
  1011                                  	jmp_intermediary_X33:
  1012 000007A8 803E[3D01]00            			cmp byte[cell33], 0	
  1013 000007AD 7513                    			jne jmp_bridge_4_print_occupied_cell
  1014                                  
  1015 000007AF C606[3E01]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
  1016 000007B4 C606[3D01]58            			mov byte[cell33], 'X' ; Seta na celula 33 a jogada 'X'
  1017                                  
  1018 000007B9 E8F501                  			call x33
  1019 000007BC E8A003                  			call check_if_X_won
  1020 000007BF E9FEFA                  			jmp main_loop
  1021                                  			jmp_bridge_4_print_occupied_cell:
  1022 000007C2 E89FFE                  				call print_occupied_cell
  1023                                  ;Desenhar circulos 
  1024                                    circle11:
  1025 000007C5 9C                      		pushf
  1026 000007C6 50                      		push 		ax
  1027                                  
  1028 000007C7 B8B600                  		mov		ax,182
  1029 000007CA 50                      		push		ax
  1030 000007CB B89601                  		mov		ax,406
  1031 000007CE 50                      		push		ax
  1032 000007CF B82300                  		mov		ax,35
  1033 000007D2 50                      		push		ax		
  1034 000007D3 E84606                  		call	circle
  1035                                  		
  1036 000007D6 58                      		pop		ax
  1037 000007D7 9D                      		popf
  1038 000007D8 C3                      		ret
  1039                                  
  1040                                    circle12:
  1041 000007D9 9C                      		pushf
  1042 000007DA 50                      		push ax
  1043                                  
  1044 000007DB B83401                  		mov		ax,308
  1045 000007DE 50                      		push		ax
  1046 000007DF B89601                  		mov		ax,406
  1047 000007E2 50                      		push		ax
  1048 000007E3 B82300                  		mov		ax,35
  1049 000007E6 50                      		push		ax
  1050 000007E7 E83206                  		call	circle
  1051                                  
  1052 000007EA 58                      		pop ax
  1053 000007EB 9D                      		popf
  1054 000007EC C3                      		ret 	
  1055                                  
  1056                                    circle13:
  1057 000007ED 9C                      		pushf
  1058 000007EE 50                      		push ax
  1059                                  
  1060 000007EF B8B201                  		mov		ax,434
  1061 000007F2 50                      		push		ax
  1062 000007F3 B89601                  		mov		ax,406
  1063 000007F6 50                      		push		ax
  1064 000007F7 B82300                  		mov		ax,35
  1065 000007FA 50                      		push		ax
  1066 000007FB E81E06                  		call	circle
  1067                                  
  1068 000007FE 58                      		pop ax
  1069 000007FF 9D                      		popf
  1070 00000800 C3                      		ret 
  1071                                  	circle21:
  1072 00000801 9C                      		pushf
  1073 00000802 50                      		push ax
  1074                                  
  1075 00000803 B8B600                  		mov		ax,182
  1076 00000806 50                      		push		ax
  1077 00000807 B81801                  		mov		ax,280
  1078 0000080A 50                      		push		ax
  1079 0000080B B82300                  		mov		ax,35
  1080 0000080E 50                      		push		ax
  1081 0000080F E80A06                  		call	circle
  1082                                  
  1083 00000812 58                      		pop ax
  1084 00000813 9D                      		popf
  1085 00000814 C3                      		ret
  1086                                  
  1087                                    circle22:
  1088 00000815 9C                      		pushf
  1089 00000816 50                      		push ax
  1090                                  
  1091 00000817 B83401                  		mov		ax,308
  1092 0000081A 50                      		push		ax
  1093 0000081B B81801                  		mov		ax,280
  1094 0000081E 50                      		push		ax
  1095 0000081F B82300                  		mov		ax,35
  1096 00000822 50                      		push		ax
  1097 00000823 E8F605                  		call	circle
  1098                                  
  1099 00000826 58                      		pop ax
  1100 00000827 9D                      		popf
  1101 00000828 C3                      		ret
  1102                                  
  1103                                    circle23:
  1104 00000829 9C                      		pushf
  1105 0000082A 50                      		push ax
  1106                                  
  1107 0000082B B8B201                  		mov		ax,434
  1108 0000082E 50                      		push		ax
  1109 0000082F B81801                  		mov		ax,280
  1110 00000832 50                      		push		ax
  1111 00000833 B82300                  		mov		ax,35
  1112 00000836 50                      		push		ax
  1113 00000837 E8E205                  		call	circle
  1114                                  		
  1115 0000083A 58                      		pop ax
  1116 0000083B 9D                      		popf
  1117 0000083C C3                      		ret
  1118                                  	circle31:
  1119 0000083D 9C                      		pushf
  1120 0000083E 50                      		push ax
  1121                                  
  1122 0000083F B8B600                  		mov		ax,182
  1123 00000842 50                      		push		ax
  1124 00000843 B89900                  		mov		ax,153
  1125 00000846 50                      		push		ax
  1126 00000847 B82300                  		mov		ax,35
  1127 0000084A 50                      		push		ax
  1128 0000084B E8CE05                  		call	circle
  1129                                  		
  1130 0000084E 58                      		pop ax
  1131 0000084F 9D                      		popf
  1132 00000850 C3                      		ret 
  1133                                  
  1134                                    circle32:
  1135 00000851 9C                      		pushf
  1136 00000852 50                      		push ax
  1137                                  
  1138 00000853 B83401                  		mov		ax,308
  1139 00000856 50                      		push		ax
  1140 00000857 B89900                  		mov		ax,153
  1141 0000085A 50                      		push		ax
  1142 0000085B B82300                  		mov		ax,35
  1143 0000085E 50                      		push		ax
  1144 0000085F E8BA05                  		call	circle
  1145                                  
  1146 00000862 58                      		pop ax
  1147 00000863 9D                      		popf
  1148 00000864 C3                      		ret
  1149                                  
  1150                                    circle33:
  1151 00000865 9C                      		pushf
  1152 00000866 50                      		push ax
  1153                                  
  1154 00000867 B8B201                  		mov		ax,434
  1155 0000086A 50                      		push		ax
  1156 0000086B B89900                  		mov		ax,153
  1157 0000086E 50                      		push		ax
  1158 0000086F B82300                  		mov		ax,35
  1159 00000872 50                      		push		ax
  1160 00000873 E8A605                  		call	circle
  1161                                  		
  1162 00000876 58                      		pop ax
  1163 00000877 9D                      		popf
  1164 00000878 C3                      		ret		
  1165                                  
  1166                                  ;Desenhar x's
  1167                                    x11:
  1168 00000879 B89F00                  		mov		ax,159
  1169 0000087C 50                      		push		ax
  1170 0000087D B8AF01                  		mov		ax,431
  1171 00000880 50                      		push		ax
  1172 00000881 B8CE00                  		mov		ax,206
  1173 00000884 50                      		push		ax
  1174 00000885 B87E01                  		mov		ax,382
  1175 00000888 50                      		push		ax
  1176 00000889 E82B07                  		call		line
  1177                                  		
  1178 0000088C B8CE00                  		mov		ax,206
  1179 0000088F 50                      		push		ax
  1180 00000890 B8AF01                  		mov		ax,431
  1181 00000893 50                      		push		ax
  1182 00000894 B89F00                  		mov		ax,159
  1183 00000897 50                      		push		ax
  1184 00000898 B87E01                  		mov		ax,382
  1185 0000089B 50                      		push		ax
  1186 0000089C E81807                  		call		line
  1187 0000089F C3                      		ret
  1188                                  
  1189                                    x12:
  1190 000008A0 B81D01                  		mov		ax,285
  1191 000008A3 50                      		push		ax
  1192 000008A4 B8AF01                  		mov		ax,431
  1193 000008A7 50                      		push		ax
  1194 000008A8 B84C01                  		mov		ax,332
  1195 000008AB 50                      		push		ax
  1196 000008AC B87E01                  		mov		ax,382
  1197 000008AF 50                      		push		ax
  1198 000008B0 E80407                  		call		line
  1199                                  			
  1200 000008B3 B84C01                  		mov		ax,332
  1201 000008B6 50                      		push		ax
  1202 000008B7 B8AF01                  		mov		ax,431
  1203 000008BA 50                      		push		ax
  1204 000008BB B81D01                  		mov		ax,285
  1205 000008BE 50                      		push		ax
  1206 000008BF B87E01                  		mov		ax,382
  1207 000008C2 50                      		push		ax
  1208 000008C3 E8F106                  		call		line
  1209 000008C6 C3                      		ret
  1210                                  
  1211                                    x13:
  1212 000008C7 B89B01                  		mov		ax,411
  1213 000008CA 50                      		push		ax
  1214 000008CB B8AF01                  		mov		ax,431
  1215 000008CE 50                      		push		ax
  1216 000008CF B8CA01                  		mov		ax,458
  1217 000008D2 50                      		push		ax
  1218 000008D3 B87E01                  		mov		ax,382
  1219 000008D6 50                      		push		ax
  1220 000008D7 E8DD06                  		call		line
  1221                                  	
  1222 000008DA B8CA01                  		mov		ax,458
  1223 000008DD 50                      		push		ax
  1224 000008DE B8AF01                  		mov		ax,431
  1225 000008E1 50                      		push		ax
  1226 000008E2 B89B01                  		mov		ax,411
  1227 000008E5 50                      		push		ax
  1228 000008E6 B87E01                  		mov		ax,382
  1229 000008E9 50                      		push		ax
  1230 000008EA E8CA06                  		call		line
  1231 000008ED C3                      		ret
  1232                                    
  1233                                  	x21:
  1234 000008EE B89F00                  		mov		ax,159
  1235 000008F1 50                      		push		ax
  1236 000008F2 B83001                  		mov		ax,304
  1237 000008F5 50                      		push		ax
  1238 000008F6 B8CE00                  		mov		ax,206
  1239 000008F9 50                      		push		ax
  1240 000008FA B8FF00                  		mov		ax,255
  1241 000008FD 50                      		push		ax
  1242 000008FE E8B606                  		call		line
  1243                                  
  1244 00000901 B8CE00                  		mov		ax,206
  1245 00000904 50                      		push		ax
  1246 00000905 B83001                  		mov		ax,304
  1247 00000908 50                      		push		ax
  1248 00000909 B89F00                  		mov		ax,159
  1249 0000090C 50                      		push		ax
  1250 0000090D B8FF00                  		mov		ax,255
  1251 00000910 50                      		push		ax
  1252 00000911 E8A306                  		call		line
  1253 00000914 C3                      		ret
  1254                                    
  1255                                  	x22:
  1256 00000915 B81D01                  		mov		ax,285
  1257 00000918 50                      		push		ax
  1258 00000919 B83001                  		mov		ax,304
  1259 0000091C 50                      		push		ax
  1260 0000091D B84C01                  		mov		ax,332
  1261 00000920 50                      		push		ax
  1262 00000921 B8FF00                  		mov		ax,255
  1263 00000924 50                      		push		ax
  1264 00000925 E88F06                  		call		line
  1265                                  
  1266 00000928 B84C01                  		mov		ax,332
  1267 0000092B 50                      		push		ax
  1268 0000092C B83001                  		mov		ax,304
  1269 0000092F 50                      		push		ax
  1270 00000930 B81D01                  		mov		ax,285
  1271 00000933 50                      		push		ax
  1272 00000934 B8FF00                  		mov		ax,255
  1273 00000937 50                      		push		ax
  1274 00000938 E87C06                  		call		line
  1275 0000093B C3                      		ret
  1276                                    
  1277                                  	x23:
  1278 0000093C B89B01                  		mov		ax,411
  1279 0000093F 50                      		push		ax
  1280 00000940 B83001                  		mov		ax,304
  1281 00000943 50                      		push		ax
  1282 00000944 B8CA01                  		mov		ax,458
  1283 00000947 50                      		push		ax
  1284 00000948 B8FF00                  		mov		ax,255
  1285 0000094B 50                      		push		ax
  1286 0000094C E86806                  		call		line
  1287                                  	
  1288 0000094F B8CA01                  		mov		ax,458
  1289 00000952 50                      		push		ax
  1290 00000953 B83001                  		mov		ax,304
  1291 00000956 50                      		push		ax
  1292 00000957 B89B01                  		mov		ax,411
  1293 0000095A 50                      		push		ax
  1294 0000095B B8FF00                  		mov		ax,255
  1295 0000095E 50                      		push		ax
  1296 0000095F E85506                  		call		line
  1297 00000962 C3                      		ret
  1298                                    
  1299                                  	x31:	
  1300 00000963 B89F00                  		mov		ax,159
  1301 00000966 50                      		push		ax
  1302 00000967 B88100                  		mov		ax,129
  1303 0000096A 50                      		push		ax
  1304 0000096B B8CE00                  		mov		ax,206
  1305 0000096E 50                      		push		ax
  1306 0000096F B8B200                  		mov		ax,178
  1307 00000972 50                      		push		ax
  1308 00000973 E84106                  		call		line
  1309                                  		
  1310 00000976 B8CE00                  		mov		ax,206
  1311 00000979 50                      		push		ax
  1312 0000097A B88100                  		mov		ax,129
  1313 0000097D 50                      		push		ax
  1314 0000097E B89F00                  		mov		ax,159
  1315 00000981 50                      		push		ax
  1316 00000982 B8B200                  		mov		ax,178
  1317 00000985 50                      		push		ax
  1318 00000986 E82E06                  		call		line
  1319 00000989 C3                      		ret
  1320                                    
  1321                                  	x32:
  1322 0000098A B81D01                  		mov		ax,285
  1323 0000098D 50                      		push		ax
  1324 0000098E B88100                  		mov		ax,129
  1325 00000991 50                      		push		ax
  1326 00000992 B84C01                  		mov		ax,332
  1327 00000995 50                      		push		ax
  1328 00000996 B8B200                  		mov		ax,178
  1329 00000999 50                      		push		ax
  1330 0000099A E81A06                  		call		line
  1331                                  	
  1332 0000099D B84C01                  		mov		ax,332
  1333 000009A0 50                      		push		ax
  1334 000009A1 B88100                  		mov		ax,129
  1335 000009A4 50                      		push		ax
  1336 000009A5 B81D01                  		mov		ax,285
  1337 000009A8 50                      		push		ax
  1338 000009A9 B8B200                  		mov		ax,178
  1339 000009AC 50                      		push		ax
  1340 000009AD E80706                  		call		line
  1341 000009B0 C3                      		ret
  1342                                    
  1343                                  	x33:	
  1344 000009B1 B89B01                  		mov		ax,411
  1345 000009B4 50                      		push		ax
  1346 000009B5 B88100                  		mov		ax,129
  1347 000009B8 50                      		push		ax
  1348 000009B9 B8CA01                  		mov		ax,458
  1349 000009BC 50                      		push		ax
  1350 000009BD B8B200                  		mov		ax,178
  1351 000009C0 50                      		push		ax
  1352 000009C1 E8F305                  		call		line
  1353                                  	
  1354 000009C4 B8CA01                  		mov		ax,458
  1355 000009C7 50                      		push		ax
  1356 000009C8 B88100                  		mov		ax,129
  1357 000009CB 50                      		push		ax
  1358 000009CC B89B01                  		mov		ax,411
  1359 000009CF 50                      		push		ax
  1360 000009D0 B8B200                  		mov		ax,178
  1361 000009D3 50                      		push		ax
  1362 000009D4 E8E005                  		call		line
  1363 000009D7 C3                      		ret
  1364                                  
  1365                                  clear_terminal:
  1366 000009D8 53                      	push	bx
  1367 000009D9 50                      	push	ax
  1368                                  
  1369 000009DA BB0000                  	mov 			bx, 0
  1370 000009DD B90400                  	mov     	cx, 4			;n�mero de caracteres
  1371 000009E0 B608                    	mov 			dh, 8 ;linha 0-29
  1372 000009E2 B201                    	mov 			dl, 1 ;coluna 0-79
  1373 000009E4 C606[0000]0F            	mov		byte[cor],branco_intenso
  1374                                  		
  1375                                  	lclear_terminal:
  1376 000009E9 E8D403                  		call	cursor
  1377 000009EC 8A87[7300]              		mov     al,[bx+string_empty_terminal]
  1378 000009F0 E8E403                  		call	caracter
  1379 000009F3 43                      		inc     bx			;proximo caracter
  1380 000009F4 FEC2                    		inc			dl			;avanca a coluna
  1381 000009F6 E2F1                    		loop    lclear_terminal
  1382                                  
  1383 000009F8 58                      	pop	ax
  1384 000009F9 5B                      	pop bx
  1385 000009FA C3                      	ret
  1386                                  		
  1387                                  check_if_C_won:
  1388                                  	; Checa para a linha 1
  1389 000009FB 803E[3501]43            		cmp byte[cell11], 'C' 										;Verifica se cell11 é igual a C
  1390 00000A00 742B                    		je step_11												
  1391                                  		return_11:
  1392                                  
  1393 00000A02 803E[3601]43            		cmp byte[cell12], 'C'											;Verifica se a cell12 é igual a C
  1394 00000A07 7418                    		je jmp_bridge_step_12
  1395                                  		return_12:
  1396                                  
  1397 00000A09 803E[3701]43            		cmp byte[cell13], 'C'											;Verifica se a cell13 é igual a C
  1398 00000A0E 7414                    		je jmp_bridge_step_13 
  1399                                  		return_13:
  1400                                  
  1401 00000A10 803E[3801]43            		cmp byte[cell21], 'C'											;Verifica se a cell13 é igual a C
  1402 00000A15 7410                    		je jmp_bridge_step_21 
  1403                                  		return_21:
  1404                                  
  1405 00000A17 803E[3B01]43            		cmp byte[cell31], 'C'											;Verifica se a cell13 é igual a C
  1406 00000A1C 740C                    		je jmp_bridge_step_31 
  1407                                  		return_31:
  1408                                  
  1409 00000A1E E99FF8                  		jmp main_loop
  1410                                  		jmp_bridge_step_12:
  1411 00000A21 E87800                  			call step_12
  1412                                  
  1413                                  		jmp_bridge_step_13:
  1414 00000A24 E89C00                  			call step_13
  1415                                  
  1416                                  		jmp_bridge_step_21:
  1417 00000A27 E8E400                  			call step_21
  1418                                  
  1419                                  		jmp_bridge_step_31:
  1420 00000A2A E80801                  			call step_31
  1421                                  		
  1422                                  		step_11:
  1423 00000A2D 803E[3601]43            			cmp byte[cell12], 'C'										;Verifica se cell 12 é igual a C
  1424 00000A32 7411                    			je step_11_12
  1425                                  			return_11_12:
  1426                                  
  1427 00000A34 803E[3801]43            			cmp byte[cell21], 'C'										;Verifica se cell 21 é igual a C
  1428 00000A39 7427                    			je step_11_21
  1429                                  			return_11_21:
  1430                                  
  1431 00000A3B 803E[3901]43            			cmp byte[cell22], 'C'										;Verifica se a cell 22 é igual a C
  1432 00000A40 743D                    			je step_11_22
  1433                                  			return_11_22:
  1434                                  
  1435 00000A42 E9BDFF                  			jmp return_11
  1436                                  
  1437                                  			step_11_12:
  1438 00000A45 803E[3701]43            				cmp byte[cell13], 'C'									; Verifica se cell 13 também é igual a C
  1439 00000A4A 7403                    				je step_11_12_13											; Se for, chama a última etapa dessa sequencia
  1440 00000A4C E9E5FF                  				jmp return_11_12    									; Se não, retorna para o endereço após a função
  1441                                  
  1442                                  				step_11_12_13: 
  1443 00000A4F C606[0000]09            					mov	 byte[cor],azul_claro 
  1444 00000A54 E86C02                  					call SVL1															;Imprime a linha 1
  1445 00000A57 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1446 00000A5C E80403                  					call print_victory_for_player_C
  1447 00000A5F E95EF8                  					jmp main_loop										
  1448                                  
  1449                                  			step_11_21:
  1450 00000A62 803E[3B01]43            				cmp byte[cell31], 'C'										; Verifica se a cell 31 também é igual a C
  1451 00000A67 7403                    				je step_11_21_31   											; Se for, imprime a coluna 1
  1452 00000A69 E9CFFF                  				jmp return_11_21	
  1453                                  
  1454                                  				step_11_21_31:
  1455 00000A6C C606[0000]09            					mov	 byte[cor],azul_claro
  1456 00000A71 E88B02                  					call SVC1															;Imprime a coluna 1
  1457 00000A74 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1458 00000A79 E8E702                  					call print_victory_for_player_C				;Imprime quem venceu
  1459 00000A7C E941F8                  					jmp main_loop;
  1460                                  			step_11_22:
  1461 00000A7F 803E[3D01]43            				cmp byte[cell33], 'C'										; Verifica se a cell 33 também é igual a C
  1462 00000A84 7403                    				je step_11_22_33 												; Se for, imprime a primeira diagonal
  1463 00000A86 E9B9FF                  				jmp return_11_22;
  1464                                  
  1465                                  				step_11_22_33:
  1466 00000A89 C606[0000]09            					mov	 byte[cor],azul_claro
  1467 00000A8E E8AA02                  					call SVD1															;Imprime a diagonal 1
  1468 00000A91 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1469 00000A96 E8CA02                  					call print_victory_for_player_C				;Imprime quem venceu
  1470 00000A99 E924F8                  					jmp main_loop;
  1471                                  
  1472                                  		step_12:
  1473 00000A9C 803E[3901]43            			cmp byte[cell22], 'C'											;Verifica se cell22 é igual a C
  1474 00000AA1 7403                    			je step_12_22
  1475                                  			return_12_22:
  1476                                  
  1477 00000AA3 E963FF                  			jmp return_12
  1478                                  
  1479                                  			step_12_22:
  1480 00000AA6 803E[3C01]43            				cmp byte[cell32], 'C' 		 							;Verifica se a cell32 tammbém é a igual 'C'
  1481 00000AAB 7403                    				je step_12_22_32        	 							
  1482                                  
  1483 00000AAD E9F3FF                  				jmp return_12_22;
  1484                                  
  1485                                  				step_12_22_32:
  1486 00000AB0 C606[0000]09            					mov	 byte[cor],azul_claro 
  1487 00000AB5 E85B02                  					call SVC2															;Imprime a coluna 2
  1488 00000AB8 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1489 00000ABD E8A302                  					call print_victory_for_player_C
  1490 00000AC0 E9FDF7                  					jmp main_loop;						
  1491                                  		step_13:
  1492 00000AC3 803E[3A01]43            			cmp byte[cell23], 'C'											;Verifica se cell23 é igual a C
  1493 00000AC8 740A                    			je step_13_23
  1494                                  			return_11_23:
  1495                                  
  1496 00000ACA 803E[3901]43            			cmp byte[cell22], 'C'											;Verifica se a cell22 é igual a C
  1497 00000ACF 7420                    			je step_13_22  
  1498                                  			return_13_22:
  1499                                  
  1500 00000AD1 E93CFF                  			jmp return_13
  1501                                  
  1502                                  			step_13_23:
  1503 00000AD4 803E[3D01]43            				cmp byte[cell33], 'C'     							;Verifica se a cell33 tammbém é a igual 'C'
  1504 00000AD9 7403                    				je  step_13_23_33         							;Se for, imprime a coluna 3
  1505 00000ADB E9ECFF                  				jmp return_11_23
  1506                                  
  1507                                  				step_13_23_33: 
  1508 00000ADE C606[0000]09            					mov	 byte[cor],azul_claro 
  1509 00000AE3 E84102                  					call SVC3															;Imprime a coluna 3
  1510 00000AE6 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1511 00000AEB E87502                  					call print_victory_for_player_C
  1512 00000AEE E9CFF7                  					jmp main_loop
  1513                                  			
  1514                                  			step_13_22:
  1515 00000AF1 803E[3B01]43            				cmp byte[cell31], 'C' 									;Verifica se a cell31 tammbém é a igual 'C'
  1516 00000AF6 7403                    				je  step_13_22_31         							;Se for, imprime a diagonal 2
  1517 00000AF8 E9D6FF                  				jmp return_13_22
  1518                                  				
  1519                                  				step_13_22_31: 
  1520 00000AFB C606[0000]09            					mov	 byte[cor],azul_claro 
  1521 00000B00 E84C02                  					call SVD2															;Imprime a diagonal 2
  1522 00000B03 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1523 00000B08 E85802                  					call print_victory_for_player_C
  1524 00000B0B E9B2F7                  					jmp main_loop;	
  1525                                  
  1526                                  		step_21:
  1527 00000B0E 803E[3901]43            			cmp byte[cell22], 'C'										;Verifica se cell 12 é igual a C
  1528 00000B13 7403                    			je step_21_22
  1529                                  			return_21_22:
  1530                                  
  1531 00000B15 E9FFFE                  			jmp return_21
  1532                                  			step_21_22:
  1533 00000B18 803E[3A01]43            				cmp byte[cell23], 'C'
  1534 00000B1D 7403                    				je step_21_22_23
  1535                                  
  1536 00000B1F E9F3FF                  				jmp return_21_22
  1537                                  				step_21_22_23:
  1538 00000B22 C606[0000]09            					mov	 byte[cor],azul_claro 
  1539 00000B27 E8AD01                  					call SVL2															;Imprime a linha 2
  1540 00000B2A C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1541 00000B2F E83102                  					call print_victory_for_player_C
  1542 00000B32 E98BF7                  					jmp main_loop			
  1543                                  		step_31:
  1544 00000B35 803E[3C01]43            			cmp byte[cell32], 'C'										;Verifica se cell 12 é igual a C
  1545 00000B3A 7403                    			je step_31_32
  1546                                  			return_31_32:
  1547                                  
  1548 00000B3C E9DFFE                  			jmp return_31
  1549                                  			step_31_32:
  1550 00000B3F 803E[3D01]43            				cmp byte[cell33], 'C'
  1551 00000B44 7403                    				je step_31_32_33
  1552                                  
  1553 00000B46 E9F3FF                  				jmp return_31_32
  1554                                  				step_31_32_33:
  1555 00000B49 C606[0000]09            					mov	 byte[cor],azul_claro 
  1556 00000B4E E89A01                  					call SVL3															;Imprime a linha 2
  1557 00000B51 C606[3F01]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1558 00000B56 E80A02                  					call print_victory_for_player_C
  1559 00000B59 E964F7                  					jmp main_loop
  1560 00000B5C E961F7                  	jmp main_loop
  1561                                  check_if_X_won:
  1562                                  	; Checa para a linha 1
  1563 00000B5F 803E[3501]58            		cmp byte[cell11], 'X' 										;Verifica se cell11 é igual a C
  1564 00000B64 742B                    		je step_X_11												
  1565                                  		return_X_11:
  1566                                  
  1567 00000B66 803E[3601]58            		cmp byte[cell12], 'X'											;Verifica se a cell12 é igual a C
  1568 00000B6B 7418                    		je jmp_bridge_step_X_12
  1569                                  		return_X_12:
  1570                                  
  1571 00000B6D 803E[3701]58            		cmp byte[cell13], 'X'											;Verifica se a cell13 é igual a C
  1572 00000B72 7414                    		je jmp_bridge_step_X_13 
  1573                                  		return_X_13:
  1574                                  
  1575 00000B74 803E[3801]58            		cmp byte[cell21], 'X'											;Verifica se a cell13 é igual a C
  1576 00000B79 7410                    		je jmp_bridge_step_X_21 
  1577                                  		return_X_21:
  1578                                  
  1579 00000B7B 803E[3B01]58            		cmp byte[cell31], 'X'											;Verifica se a cell13 é igual a C
  1580 00000B80 740C                    		je jmp_bridge_step_X_31 
  1581                                  		return_X_31:
  1582                                  
  1583 00000B82 E93BF7                  		jmp main_loop
  1584                                  		jmp_bridge_step_X_12:
  1585 00000B85 E87800                  			call step_X_12
  1586                                  
  1587                                  		jmp_bridge_step_X_13:
  1588 00000B88 E89C00                  			call step_X_13
  1589                                  
  1590                                  		jmp_bridge_step_X_21:
  1591 00000B8B E8E400                  			call step_X_21
  1592                                  
  1593                                  		jmp_bridge_step_X_31:
  1594 00000B8E E80801                  			call step_X_31
  1595                                  		
  1596                                  		step_X_11:
  1597 00000B91 803E[3601]58            			cmp byte[cell12], 'X'										;Verifica se cell 12 é igual a C
  1598 00000B96 7411                    			je step_X_11_12
  1599                                  			return_X_11_12:
  1600                                  
  1601 00000B98 803E[3801]58            			cmp byte[cell21], 'X'										;Verifica se cell 21 é igual a C
  1602 00000B9D 7427                    			je step_X_11_21
  1603                                  			return_X_11_21:
  1604                                  
  1605 00000B9F 803E[3901]58            			cmp byte[cell22], 'X'										;Verifica se a cell 22 é igual a C
  1606 00000BA4 743D                    			je step_X_11_22
  1607                                  			return_X_11_22:
  1608                                  
  1609 00000BA6 E9BDFF                  			jmp return_X_11
  1610                                  
  1611                                  			step_X_11_12:
  1612 00000BA9 803E[3701]58            				cmp byte[cell13], 'X'									; Verifica se cell 13 também é igual a C
  1613 00000BAE 7403                    				je step_X_11_12_13											; Se for, chama a última etapa dessa sequencia
  1614 00000BB0 E9E5FF                  				jmp return_X_11_12    									; Se não, retorna para o endereço após a função
  1615                                  
  1616                                  				step_X_11_12_13: 
  1617 00000BB3 C606[0000]09            					mov	 byte[cor],azul_claro 
  1618 00000BB8 E80801                  					call SVL1															;Imprime a linha 1
  1619 00000BBB C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1620 00000BC0 E8BF01                  					call print_victory_for_player_X
  1621 00000BC3 E9FAF6                  					jmp main_loop										
  1622                                  
  1623                                  			step_X_11_21:
  1624 00000BC6 803E[3B01]58            				cmp byte[cell31], 'X'										; Verifica se a cell 31 também é igual a C
  1625 00000BCB 7403                    				je step_X_11_21_31   											; Se for, imprime a coluna 1
  1626 00000BCD E9CFFF                  				jmp return_X_11_21	
  1627                                  
  1628                                  				step_X_11_21_31:
  1629 00000BD0 C606[0000]09            					mov	 byte[cor],azul_claro
  1630 00000BD5 E82701                  					call SVC1															;Imprime a coluna 1
  1631 00000BD8 C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1632 00000BDD E8A201                  					call print_victory_for_player_X				;Imprime quem venceu
  1633 00000BE0 E9DDF6                  					jmp main_loop;
  1634                                  			step_X_11_22:
  1635 00000BE3 803E[3D01]58            				cmp byte[cell33], 'X'										; Verifica se a cell 33 também é igual a C
  1636 00000BE8 7403                    				je step_X_11_22_33 												; Se for, imprime a primeira diagonal
  1637 00000BEA E9B9FF                  				jmp return_X_11_22;
  1638                                  
  1639                                  				step_X_11_22_33:
  1640 00000BED C606[0000]09            					mov	 byte[cor],azul_claro
  1641 00000BF2 E84601                  					call SVD1															;Imprime a diagonal 1
  1642 00000BF5 C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1643 00000BFA E88501                  					call print_victory_for_player_X				;Imprime quem venceu
  1644 00000BFD E9C0F6                  					jmp main_loop;
  1645                                  
  1646                                  		step_X_12:
  1647 00000C00 803E[3901]58            			cmp byte[cell22], 'X'											;Verifica se cell22 é igual a C
  1648 00000C05 7403                    			je step_X_12_22
  1649                                  			return_X_12_22:
  1650                                  
  1651 00000C07 E963FF                  			jmp return_X_12
  1652                                  
  1653                                  			step_X_12_22:
  1654 00000C0A 803E[3C01]58            				cmp byte[cell32], 'X' 		 							;Verifica se a cell32 tammbém é a igual 'C'
  1655 00000C0F 7403                    				je step_X_12_22_32        	 							
  1656                                  
  1657 00000C11 E9F3FF                  				jmp return_X_12_22;
  1658                                  
  1659                                  				step_X_12_22_32:
  1660 00000C14 C606[0000]09            					mov	 byte[cor],azul_claro 
  1661 00000C19 E8F700                  					call SVC2															;Imprime a coluna 2
  1662 00000C1C C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1663 00000C21 E85E01                  					call print_victory_for_player_X
  1664 00000C24 E999F6                  					jmp main_loop;						
  1665                                  		step_X_13:
  1666 00000C27 803E[3A01]58            			cmp byte[cell23], 'X'											;Verifica se cell23 é igual a C
  1667 00000C2C 740A                    			je step_X_13_23
  1668                                  			return_X_11_23:
  1669                                  
  1670 00000C2E 803E[3901]58            			cmp byte[cell22], 'X'											;Verifica se a cell22 é igual a C
  1671 00000C33 7420                    			je step_X_13_22  
  1672                                  			return_X_13_22:
  1673                                  
  1674 00000C35 E93CFF                  			jmp return_X_13
  1675                                  
  1676                                  			step_X_13_23:
  1677 00000C38 803E[3D01]58            				cmp byte[cell33], 'X'     							;Verifica se a cell33 tammbém é a igual 'C'
  1678 00000C3D 7403                    				je  step_X_13_23_33         							;Se for, imprime a coluna 3
  1679 00000C3F E9ECFF                  				jmp return_X_11_23
  1680                                  
  1681                                  				step_X_13_23_33: 
  1682 00000C42 C606[0000]09            					mov	 byte[cor],azul_claro 
  1683 00000C47 E8DD00                  					call SVC3															;Imprime a coluna 3
  1684 00000C4A C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1685 00000C4F E83001                  					call print_victory_for_player_X
  1686 00000C52 E96BF6                  					jmp main_loop
  1687                                  			
  1688                                  			step_X_13_22:
  1689 00000C55 803E[3B01]58            				cmp byte[cell31], 'X' 									;Verifica se a cell31 tammbém é a igual 'C'
  1690 00000C5A 7403                    				je  step_X_13_22_31         							;Se for, imprime a diagonal 2
  1691 00000C5C E9D6FF                  				jmp return_X_13_22
  1692                                  				
  1693                                  				step_X_13_22_31: 
  1694 00000C5F C606[0000]09            					mov	 byte[cor],azul_claro 
  1695 00000C64 E8E800                  					call SVD2															;Imprime a diagonal 2
  1696 00000C67 C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1697 00000C6C E81301                  					call print_victory_for_player_X
  1698 00000C6F E94EF6                  					jmp main_loop;	
  1699                                  
  1700                                  		step_X_21:
  1701 00000C72 803E[3901]58            			cmp byte[cell22], 'X'										;Verifica se cell 12 é igual a C
  1702 00000C77 7403                    			je step_X_21_22
  1703                                  			return_X_21_22:
  1704                                  
  1705 00000C79 E9FFFE                  			jmp return_X_21
  1706                                  			step_X_21_22:
  1707 00000C7C 803E[3A01]58            				cmp byte[cell23], 'X'
  1708 00000C81 7403                    				je step_X_21_22_23
  1709                                  
  1710 00000C83 E9F3FF                  				jmp return_X_21_22
  1711                                  				step_X_21_22_23:
  1712 00000C86 C606[0000]09            					mov	 byte[cor],azul_claro 
  1713 00000C8B E84900                  					call SVL2															;Imprime a linha 2
  1714 00000C8E C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1715 00000C93 E8EC00                  					call print_victory_for_player_X
  1716 00000C96 E927F6                  					jmp main_loop			
  1717                                  		step_X_31:
  1718 00000C99 803E[3C01]58            			cmp byte[cell32], 'X'										;Verifica se cell 12 é igual a C
  1719 00000C9E 7403                    			je step_X_31_32
  1720                                  			return_X_31_32:
  1721                                  
  1722 00000CA0 E9DFFE                  			jmp return_X_31
  1723                                  			step_X_31_32:
  1724 00000CA3 803E[3D01]58            				cmp byte[cell33], 'X'
  1725 00000CA8 7403                    				je step_X_31_32_33
  1726                                  
  1727 00000CAA E9F3FF                  				jmp return_X_31_32
  1728                                  				step_X_31_32_33:
  1729 00000CAD C606[0000]09            					mov	 byte[cor],azul_claro 
  1730 00000CB2 E83600                  					call SVL3															;Imprime a linha 2
  1731 00000CB5 C606[3F01]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1732 00000CBA E8C500                  					call print_victory_for_player_X
  1733 00000CBD E900F6                  					jmp main_loop
  1734 00000CC0 E9FDF5                  	jmp main_loop  
  1735                                  	; CHECA PARA X
  1736                                  ;Desenhar linha da seguencia vencedora
  1737                                    ;Sequencia linha 1
  1738                                      SVL1:
  1739 00000CC3 B87700                        mov		ax,119
  1740 00000CC6 50                            push		ax
  1741 00000CC7 B89601                        mov		ax,406
  1742 00000CCA 50                            push		ax
  1743 00000CCB B8F201                        mov		ax,498
  1744 00000CCE 50                            push		ax
  1745 00000CCF B89601                        mov		ax,406
  1746 00000CD2 50                            push		ax
  1747 00000CD3 E8E102                        call		line
  1748 00000CD6 C3                      			ret 
  1749                                    ;Sequencia linha 2
  1750                                      SVL2:
  1751                                  	
  1752 00000CD7 B87700                          mov		ax,119
  1753 00000CDA 50                              push		ax
  1754 00000CDB B81801                          mov		ax,280
  1755 00000CDE 50                              push		ax
  1756 00000CDF B8F201                          mov		ax,498
  1757 00000CE2 50                              push		ax
  1758 00000CE3 B81801                          mov		ax,280
  1759 00000CE6 50                              push		ax
  1760 00000CE7 E8CD02                          call		line
  1761 00000CEA C3                      				ret
  1762                                    ;Sequencia linha 3
  1763                                      SVL3:
  1764                                  	
  1765 00000CEB B87700                          mov		ax,119
  1766 00000CEE 50                              push		ax
  1767 00000CEF B89900                          mov		ax,153
  1768 00000CF2 50                              push		ax
  1769 00000CF3 B8F201                          mov		ax,498
  1770 00000CF6 50                              push		ax
  1771 00000CF7 B89900                          mov		ax,153
  1772 00000CFA 50                              push		ax
  1773 00000CFB E8B902                          call		line
  1774 00000CFE C3                      				ret
  1775                                    ;Sequencia coluna 1
  1776                                  	 SVC1:	
  1777 00000CFF B8B600                        mov		ax,182
  1778 00000D02 50                            push		ax
  1779 00000D03 B8D501                        mov		ax,469
  1780 00000D06 50                            push		ax
  1781 00000D07 B8B600                        mov		ax,182
  1782 00000D0A 50                            push		ax
  1783 00000D0B B85A00                        mov		ax,90
  1784 00000D0E 50                            push		ax
  1785 00000D0F E8A502                        call		line
  1786 00000D12 C3                      			ret
  1787                                  	;Sequencia coluna 2
  1788                                  		SVC2:	
  1789 00000D13 B83401                        mov		ax,308
  1790 00000D16 50                            push		ax
  1791 00000D17 B8D501                        mov		ax,469
  1792 00000D1A 50                            push		ax
  1793 00000D1B B83401                        mov		ax,308
  1794 00000D1E 50                            push		ax
  1795 00000D1F B85A00                        mov		ax,90
  1796 00000D22 50                            push		ax
  1797 00000D23 E89102                        call		line
  1798 00000D26 C3                      			ret
  1799                                    ;Sequencia coluna 3
  1800                                  		SVC3:
  1801                                  	
  1802 00000D27 B8B201                  				mov		ax,434
  1803 00000D2A 50                      				push		ax
  1804 00000D2B B8D501                  				mov		ax,469
  1805 00000D2E 50                      				push		ax
  1806 00000D2F B8B201                  				mov		ax,434
  1807 00000D32 50                      				push		ax
  1808 00000D33 B85A00                  				mov		ax,90
  1809 00000D36 50                      				push		ax
  1810 00000D37 E87D02                  				call		line
  1811 00000D3A C3                      				ret
  1812                                    ;Sequencia diagonal 1
  1813                                  		SVD1:	
  1814 00000D3B B87700                  			mov		ax,119
  1815 00000D3E 50                      			push		ax
  1816 00000D3F B8D501                  			mov		ax,469
  1817 00000D42 50                      			push		ax
  1818 00000D43 B8F101                  			mov		ax,497
  1819 00000D46 50                      			push		ax
  1820 00000D47 B85B00                  			mov		ax,91
  1821 00000D4A 50                      			push		ax
  1822 00000D4B E86902                  			call		line
  1823 00000D4E C3                      			ret
  1824                                    ;Sequencia diagonal 2
  1825                                  		SVD2:	
  1826 00000D4F B8F101                  			mov		ax,497
  1827 00000D52 50                      			push		ax
  1828 00000D53 B8D501                  			mov		ax,469
  1829 00000D56 50                      			push		ax
  1830 00000D57 B87700                  			mov		ax,119
  1831 00000D5A 50                      			push		ax
  1832 00000D5B B85B00                  			mov		ax,91
  1833 00000D5E 50                      			push		ax
  1834 00000D5F E85502                  			call		line
  1835 00000D62 C3                      			ret
  1836                                  	;Imprime jogador que venceu ou empate
  1837                                  		print_victory_for_player_C:
  1838 00000D63 BB0000                  			mov 			bx, 0
  1839 00000D66 B91300                  			mov			  cx, 19 								;Carrega o tamanho da string em CX
  1840 00000D69 B61C                    			mov     	dh, 28								;linha 0-29
  1841 00000D6B B215                    			mov     	dl, 21								;coluna 0-79
  1842 00000D6D C606[0000]02            			mov		byte[cor],verde
  1843                                  			
  1844                                  			loop_print_victory_for_player_C:
  1845 00000D72 E84B00                  				call		cursor
  1846 00000D75 8A87[BD00]              				mov     al,	[bx+string_player_C_victory]
  1847 00000D79 E85B00                  				call		caracter
  1848 00000D7C 43                      				inc     bx			;proximo caracter
  1849 00000D7D FEC2                    				inc			dl			;avanca a coluna
  1850                                  				
  1851 00000D7F E2F1                    			loop    loop_print_victory_for_player_C
  1852 00000D81 C3                      			ret
  1853                                  		print_victory_for_player_X:
  1854 00000D82 BB0000                  			mov 			bx, 0
  1855 00000D85 B91300                  			mov			  cx, 19 								;Carrega o tamanho da string em CX
  1856 00000D88 B61C                    			mov     	dh, 28								;linha 0-29
  1857 00000D8A B215                    			mov     	dl, 21								;coluna 0-79
  1858 00000D8C C606[0000]02            			mov		byte[cor],verde
  1859                                  			
  1860                                  			loop_print_victory_for_player_X:
  1861 00000D91 E82C00                  				call		cursor
  1862 00000D94 8A87[D000]              				mov     al,	[bx+string_player_X_victory]
  1863 00000D98 E83C00                  				call		caracter
  1864 00000D9B 43                      				inc     bx			;proximo caracter
  1865 00000D9C FEC2                    				inc			dl			;avanca a coluna
  1866                                  				
  1867 00000D9E E2F1                    			loop    loop_print_victory_for_player_X
  1868 00000DA0 C3                      			ret
  1869                                  		print_tied:
  1870 00000DA1 BB0000                  			mov 			bx, 0
  1871 00000DA4 B90D00                  			mov			  cx, 13 								;Carrega o tamanho da string em CX
  1872 00000DA7 B61C                    			mov     	dh, 28								;linha 0-29
  1873 00000DA9 B215                    			mov     	dl, 21								;coluna 0-79
  1874 00000DAB C606[0000]0E            			mov		byte[cor],amarelo
  1875                                  			
  1876                                  			loop_print_tied:
  1877 00000DB0 E80D00                  				call		cursor
  1878 00000DB3 8A87[E300]              				mov     al,	[bx+string_tied]
  1879 00000DB7 E81D00                  				call		caracter
  1880 00000DBA 43                      				inc     bx			;proximo caracter
  1881 00000DBB FEC2                    				inc			dl			;avanca a coluna
  1882                                  				
  1883 00000DBD E2F1                    			loop    loop_print_tied
  1884 00000DBF C3                      			ret
  1885                                  	
  1886                                  
  1887                                  
  1888                                  
  1889                                  ;***************************************************************************
  1890                                  ;
  1891                                  ;   fun��o cursor
  1892                                  ;
  1893                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
  1894                                  cursor:
  1895 00000DC0 9C                      		pushf
  1896 00000DC1 50                      		push 		ax
  1897 00000DC2 53                      		push 		bx
  1898 00000DC3 51                      		push		cx
  1899 00000DC4 52                      		push		dx
  1900 00000DC5 56                      		push		si
  1901 00000DC6 57                      		push		di
  1902 00000DC7 55                      		push		bp
  1903 00000DC8 B402                    		mov     	ah,2
  1904 00000DCA B700                    		mov     	bh,0
  1905 00000DCC CD10                    		int     	10h
  1906 00000DCE 5D                      		pop		bp
  1907 00000DCF 5F                      		pop		di
  1908 00000DD0 5E                      		pop		si
  1909 00000DD1 5A                      		pop		dx
  1910 00000DD2 59                      		pop		cx
  1911 00000DD3 5B                      		pop		bx
  1912 00000DD4 58                      		pop		ax
  1913 00000DD5 9D                      		popf
  1914 00000DD6 C3                      		ret
  1915                                  ;
  1916                                  ;escreve os nomes dos campos de comando e mensagem
  1917                                  
  1918                                  ;escreve numeros das cells do jogo da velha
  1919                                  _____________________________________________________________________________
  1920                                  ;
  1921                                  ;   fun��o caracter escrito na posi��o do cursor
  1922                                  ;
  1923                                  ; al= caracter a ser escrito
  1924                                  ; cor definida na variavel cor
  1925                                  caracter:
  1926 00000DD7 9C                      		pushf
  1927 00000DD8 50                      		push 		ax
  1928 00000DD9 53                      		push 		bx
  1929 00000DDA 51                      		push		cx
  1930 00000DDB 52                      		push		dx
  1931 00000DDC 56                      		push		si
  1932 00000DDD 57                      		push		di
  1933 00000DDE 55                      		push		bp
  1934 00000DDF B409                        		mov     	ah,9
  1935 00000DE1 B700                        		mov     	bh,0
  1936 00000DE3 B90100                      		mov     	cx,1
  1937 00000DE6 8A1E[0000]                 		mov     	bl,[cor]
  1938 00000DEA CD10                        		int     	10h
  1939 00000DEC 5D                      		pop		bp
  1940 00000DED 5F                      		pop		di
  1941 00000DEE 5E                      		pop		si
  1942 00000DEF 5A                      		pop		dx
  1943 00000DF0 59                      		pop		cx
  1944 00000DF1 5B                      		pop		bx
  1945 00000DF2 58                      		pop		ax
  1946 00000DF3 9D                      		popf
  1947 00000DF4 C3                      		ret
  1948                                  ;_____________________________________________________________________________
  1949                                  ;
  1950                                  ;   fun��o plot_xy
  1951                                  ;
  1952                                  ; push x; push y; call plot_xy;  (x<639, y<479)
  1953                                  ; cor definida na variavel cor
  1954                                  plot_xy:
  1955 00000DF5 55                      		push		bp
  1956 00000DF6 89E5                    		mov		bp,sp
  1957 00000DF8 9C                      		pushf
  1958 00000DF9 50                      		push 		ax
  1959 00000DFA 53                      		push 		bx
  1960 00000DFB 51                      		push		cx
  1961 00000DFC 52                      		push		dx
  1962 00000DFD 56                      		push		si
  1963 00000DFE 57                      		push		di
  1964 00000DFF B40C                    	    mov     	ah,0ch
  1965 00000E01 A0[0000]                	    mov     	al,[cor]
  1966 00000E04 B700                    	    mov     	bh,0
  1967 00000E06 BADF01                  	    mov     	dx,479
  1968 00000E09 2B5604                  		sub		dx,[bp+4]
  1969 00000E0C 8B4E06                  	    mov     	cx,[bp+6]
  1970 00000E0F CD10                    	    int     	10h
  1971 00000E11 5F                      		pop		di
  1972 00000E12 5E                      		pop		si
  1973 00000E13 5A                      		pop		dx
  1974 00000E14 59                      		pop		cx
  1975 00000E15 5B                      		pop		bx
  1976 00000E16 58                      		pop		ax
  1977 00000E17 9D                      		popf
  1978 00000E18 5D                      		pop		bp
  1979 00000E19 C20400                  		ret		4
  1980                                  ;_____________________________________________________________________________
  1981                                  ;    fun��o circle
  1982                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1983                                  ; cor definida na variavel cor
  1984                                  circle:
  1985 00000E1C 55                      	push 	bp
  1986 00000E1D 89E5                    	mov	 	bp,sp
  1987 00000E1F 9C                      	pushf                        ;coloca os flags na pilha
  1988 00000E20 50                      	push 	ax
  1989 00000E21 53                      	push 	bx
  1990 00000E22 51                      	push	cx
  1991 00000E23 52                      	push	dx
  1992 00000E24 56                      	push	si
  1993 00000E25 57                      	push	di
  1994                                  	
  1995 00000E26 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1996 00000E29 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1997 00000E2C 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1998                                  	
  1999 00000E2F 89DA                    	mov 	dx,bx	
  2000 00000E31 01CA                    	add		dx,cx       ;ponto extremo superior
  2001 00000E33 50                      	push    ax			
  2002 00000E34 52                      	push	dx
  2003 00000E35 E8BDFF                  	call plot_xy
  2004                                  	
  2005 00000E38 89DA                    	mov		dx,bx
  2006 00000E3A 29CA                    	sub		dx,cx       ;ponto extremo inferior
  2007 00000E3C 50                      	push    ax			
  2008 00000E3D 52                      	push	dx
  2009 00000E3E E8B4FF                  	call plot_xy
  2010                                  	
  2011 00000E41 89C2                    	mov 	dx,ax	
  2012 00000E43 01CA                    	add		dx,cx       ;ponto extremo direita
  2013 00000E45 52                      	push    dx			
  2014 00000E46 53                      	push	bx
  2015 00000E47 E8ABFF                  	call plot_xy
  2016                                  	
  2017 00000E4A 89C2                    	mov		dx,ax
  2018 00000E4C 29CA                    	sub		dx,cx       ;ponto extremo esquerda
  2019 00000E4E 52                      	push    dx			
  2020 00000E4F 53                      	push	bx
  2021 00000E50 E8A2FF                  	call plot_xy
  2022                                  		
  2023 00000E53 89CF                    	mov		di,cx
  2024 00000E55 81EF0100                	sub		di,1	 ;di=r-1
  2025 00000E59 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  2026                                  	
  2027                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  2028                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  2029                                  ;valores positivos para d
  2030                                  
  2031                                  stay:				;loop
  2032 00000E5C 89FE                    	mov		si,di
  2033 00000E5E 81FE0000                	cmp		si,0
  2034 00000E62 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  2035 00000E64 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  2036 00000E66 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  2037 00000E68 81C60300                	add		si,3
  2038 00000E6C 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  2039 00000E6E 42                      	inc		dx		;incrementa dx
  2040 00000E6F E90E00                  	jmp		plotar
  2041                                  inf:	
  2042 00000E72 89D6                    	mov		si,dx
  2043 00000E74 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  2044 00000E76 D1E6                    	sal		si,1
  2045 00000E78 81C60500                	add		si,5
  2046 00000E7C 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  2047 00000E7E 42                      	inc		dx		;incrementa x (dx)
  2048 00000E7F 49                      	dec		cx		;decrementa y (cx)
  2049                                  	
  2050                                  plotar:	
  2051 00000E80 89D6                    	mov		si,dx
  2052 00000E82 01C6                    	add		si,ax
  2053 00000E84 56                      	push    si			;coloca a abcisa x+xc na pilha
  2054 00000E85 89CE                    	mov		si,cx
  2055 00000E87 01DE                    	add		si,bx
  2056 00000E89 56                      	push    si			;coloca a ordenada y+yc na pilha
  2057 00000E8A E868FF                  	call plot_xy		;toma conta do segundo octante
  2058 00000E8D 89C6                    	mov		si,ax
  2059 00000E8F 01D6                    	add		si,dx
  2060 00000E91 56                      	push    si			;coloca a abcisa xc+x na pilha
  2061 00000E92 89DE                    	mov		si,bx
  2062 00000E94 29CE                    	sub		si,cx
  2063 00000E96 56                      	push    si			;coloca a ordenada yc-y na pilha
  2064 00000E97 E85BFF                  	call plot_xy		;toma conta do s�timo octante
  2065 00000E9A 89C6                    	mov		si,ax
  2066 00000E9C 01CE                    	add		si,cx
  2067 00000E9E 56                      	push    si			;coloca a abcisa xc+y na pilha
  2068 00000E9F 89DE                    	mov		si,bx
  2069 00000EA1 01D6                    	add		si,dx
  2070 00000EA3 56                      	push    si			;coloca a ordenada yc+x na pilha
  2071 00000EA4 E84EFF                  	call plot_xy		;toma conta do segundo octante
  2072 00000EA7 89C6                    	mov		si,ax
  2073 00000EA9 01CE                    	add		si,cx
  2074 00000EAB 56                      	push    si			;coloca a abcisa xc+y na pilha
  2075 00000EAC 89DE                    	mov		si,bx
  2076 00000EAE 29D6                    	sub		si,dx
  2077 00000EB0 56                      	push    si			;coloca a ordenada yc-x na pilha
  2078 00000EB1 E841FF                  	call plot_xy		;toma conta do oitavo octante
  2079 00000EB4 89C6                    	mov		si,ax
  2080 00000EB6 29D6                    	sub		si,dx
  2081 00000EB8 56                      	push    si			;coloca a abcisa xc-x na pilha
  2082 00000EB9 89DE                    	mov		si,bx
  2083 00000EBB 01CE                    	add		si,cx
  2084 00000EBD 56                      	push    si			;coloca a ordenada yc+y na pilha
  2085 00000EBE E834FF                  	call plot_xy		;toma conta do terceiro octante
  2086 00000EC1 89C6                    	mov		si,ax
  2087 00000EC3 29D6                    	sub		si,dx
  2088 00000EC5 56                      	push    si			;coloca a abcisa xc-x na pilha
  2089 00000EC6 89DE                    	mov		si,bx
  2090 00000EC8 29CE                    	sub		si,cx
  2091 00000ECA 56                      	push    si			;coloca a ordenada yc-y na pilha
  2092 00000ECB E827FF                  	call plot_xy		;toma conta do sexto octante
  2093 00000ECE 89C6                    	mov		si,ax
  2094 00000ED0 29CE                    	sub		si,cx
  2095 00000ED2 56                      	push    si			;coloca a abcisa xc-y na pilha
  2096 00000ED3 89DE                    	mov		si,bx
  2097 00000ED5 29D6                    	sub		si,dx
  2098 00000ED7 56                      	push    si			;coloca a ordenada yc-x na pilha
  2099 00000ED8 E81AFF                  	call plot_xy		;toma conta do quinto octante
  2100 00000EDB 89C6                    	mov		si,ax
  2101 00000EDD 29CE                    	sub		si,cx
  2102 00000EDF 56                      	push    si			;coloca a abcisa xc-y na pilha
  2103 00000EE0 89DE                    	mov		si,bx
  2104 00000EE2 01D6                    	add		si,dx
  2105 00000EE4 56                      	push    si			;coloca a ordenada yc-x na pilha
  2106 00000EE5 E80DFF                  	call plot_xy		;toma conta do quarto octante
  2107                                  	
  2108 00000EE8 39D1                    	cmp		cx,dx
  2109 00000EEA 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  2110 00000EEC E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  2111                                  	
  2112                                  	
  2113                                  fim_circle:
  2114 00000EEF 5F                      	pop		di
  2115 00000EF0 5E                      	pop		si
  2116 00000EF1 5A                      	pop		dx
  2117 00000EF2 59                      	pop		cx
  2118 00000EF3 5B                      	pop		bx
  2119 00000EF4 58                      	pop		ax
  2120 00000EF5 9D                      	popf
  2121 00000EF6 5D                      	pop		bp
  2122 00000EF7 C20600                  	ret		6
  2123                                  ;-----------------------------------------------------------------------------
  2124                                  ;    fun��o full_circle
  2125                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  2126                                  ; cor definida na variavel cor
  2127                                  
  2128                                  full_circle:
  2129 00000EFA 55                      	push 	bp
  2130 00000EFB 89E5                    	mov	 	bp,sp
  2131 00000EFD 9C                      	pushf                        ;coloca os flags na pilha
  2132 00000EFE 50                      	push 	ax
  2133 00000EFF 53                      	push 	bx
  2134 00000F00 51                      	push	cx
  2135 00000F01 52                      	push	dx
  2136 00000F02 56                      	push	si
  2137 00000F03 57                      	push	di
  2138                                  
  2139 00000F04 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  2140 00000F07 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  2141 00000F0A 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  2142                                  	
  2143 00000F0D 89DE                    	mov		si,bx
  2144 00000F0F 29CE                    	sub		si,cx
  2145 00000F11 50                      	push    ax			;coloca xc na pilha			
  2146 00000F12 56                      	push	si			;coloca yc-r na pilha
  2147 00000F13 89DE                    	mov		si,bx
  2148 00000F15 01CE                    	add		si,cx
  2149 00000F17 50                      	push	ax		;coloca xc na pilha
  2150 00000F18 56                      	push	si		;coloca yc+r na pilha
  2151 00000F19 E89B00                  	call line
  2152                                  	
  2153                                  		
  2154 00000F1C 89CF                    	mov		di,cx
  2155 00000F1E 81EF0100                	sub		di,1	 ;di=r-1
  2156 00000F22 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  2157                                  	
  2158                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  2159                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  2160                                  ;valores positivos para d
  2161                                  
  2162                                  stay_full:				;loop
  2163 00000F25 89FE                    	mov		si,di
  2164 00000F27 81FE0000                	cmp		si,0
  2165 00000F2B 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  2166 00000F2D 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  2167 00000F2F D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  2168 00000F31 81C60300                	add		si,3
  2169 00000F35 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  2170 00000F37 42                      	inc		dx		;incrementa dx
  2171 00000F38 E90E00                  	jmp		plotar_full
  2172                                  inf_full:	
  2173 00000F3B 89D6                    	mov		si,dx
  2174 00000F3D 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  2175 00000F3F D1E6                    	sal		si,1
  2176 00000F41 81C60500                	add		si,5
  2177 00000F45 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  2178 00000F47 42                      	inc		dx		;incrementa x (dx)
  2179 00000F48 49                      	dec		cx		;decrementa y (cx)
  2180                                  	
  2181                                  plotar_full:	
  2182 00000F49 89C6                    	mov		si,ax
  2183 00000F4B 01CE                    	add		si,cx
  2184 00000F4D 56                      	push	si		;coloca a abcisa y+xc na pilha			
  2185 00000F4E 89DE                    	mov		si,bx
  2186 00000F50 29D6                    	sub		si,dx
  2187 00000F52 56                      	push    si		;coloca a ordenada yc-x na pilha
  2188 00000F53 89C6                    	mov		si,ax
  2189 00000F55 01CE                    	add		si,cx
  2190 00000F57 56                      	push	si		;coloca a abcisa y+xc na pilha	
  2191 00000F58 89DE                    	mov		si,bx
  2192 00000F5A 01D6                    	add		si,dx
  2193 00000F5C 56                      	push    si		;coloca a ordenada yc+x na pilha	
  2194 00000F5D E85700                  	call 	line
  2195                                  	
  2196 00000F60 89C6                    	mov		si,ax
  2197 00000F62 01D6                    	add		si,dx
  2198 00000F64 56                      	push	si		;coloca a abcisa xc+x na pilha			
  2199 00000F65 89DE                    	mov		si,bx
  2200 00000F67 29CE                    	sub		si,cx
  2201 00000F69 56                      	push    si		;coloca a ordenada yc-y na pilha
  2202 00000F6A 89C6                    	mov		si,ax
  2203 00000F6C 01D6                    	add		si,dx
  2204 00000F6E 56                      	push	si		;coloca a abcisa xc+x na pilha	
  2205 00000F6F 89DE                    	mov		si,bx
  2206 00000F71 01CE                    	add		si,cx
  2207 00000F73 56                      	push    si		;coloca a ordenada yc+y na pilha	
  2208 00000F74 E84000                  	call	line
  2209                                  	
  2210 00000F77 89C6                    	mov		si,ax
  2211 00000F79 29D6                    	sub		si,dx
  2212 00000F7B 56                      	push	si		;coloca a abcisa xc-x na pilha			
  2213 00000F7C 89DE                    	mov		si,bx
  2214 00000F7E 29CE                    	sub		si,cx
  2215 00000F80 56                      	push    si		;coloca a ordenada yc-y na pilha
  2216 00000F81 89C6                    	mov		si,ax
  2217 00000F83 29D6                    	sub		si,dx
  2218 00000F85 56                      	push	si		;coloca a abcisa xc-x na pilha	
  2219 00000F86 89DE                    	mov		si,bx
  2220 00000F88 01CE                    	add		si,cx
  2221 00000F8A 56                      	push    si		;coloca a ordenada yc+y na pilha	
  2222 00000F8B E82900                  	call	line
  2223                                  	
  2224 00000F8E 89C6                    	mov		si,ax
  2225 00000F90 29CE                    	sub		si,cx
  2226 00000F92 56                      	push	si		;coloca a abcisa xc-y na pilha			
  2227 00000F93 89DE                    	mov		si,bx
  2228 00000F95 29D6                    	sub		si,dx
  2229 00000F97 56                      	push    si		;coloca a ordenada yc-x na pilha
  2230 00000F98 89C6                    	mov		si,ax
  2231 00000F9A 29CE                    	sub		si,cx
  2232 00000F9C 56                      	push	si		;coloca a abcisa xc-y na pilha	
  2233 00000F9D 89DE                    	mov		si,bx
  2234 00000F9F 01D6                    	add		si,dx
  2235 00000FA1 56                      	push    si		;coloca a ordenada yc+x na pilha	
  2236 00000FA2 E81200                  	call	line
  2237                                  	
  2238 00000FA5 39D1                    	cmp		cx,dx
  2239 00000FA7 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  2240 00000FA9 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  2241                                  	
  2242                                  	
  2243                                  fim_full_circle:
  2244 00000FAC 5F                      	pop		di
  2245 00000FAD 5E                      	pop		si
  2246 00000FAE 5A                      	pop		dx
  2247 00000FAF 59                      	pop		cx
  2248 00000FB0 5B                      	pop		bx
  2249 00000FB1 58                      	pop		ax
  2250 00000FB2 9D                      	popf
  2251 00000FB3 5D                      	pop		bp
  2252 00000FB4 C20600                  	ret		6
  2253                                  ;-----------------------------------------------------------------------------
  2254                                  ;
  2255                                  ;   fun��o line
  2256                                  ;
  2257                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  2258                                  line:
  2259 00000FB7 55                      		push		bp
  2260 00000FB8 89E5                    		mov		bp,sp
  2261 00000FBA 9C                      		pushf                        ;coloca os flags na pilha
  2262 00000FBB 50                      		push 		ax
  2263 00000FBC 53                      		push 		bx
  2264 00000FBD 51                      		push		cx
  2265 00000FBE 52                      		push		dx
  2266 00000FBF 56                      		push		si
  2267 00000FC0 57                      		push		di
  2268 00000FC1 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  2269 00000FC4 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  2270 00000FC7 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  2271 00000FCA 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  2272 00000FCD 39C8                    		cmp		ax,cx
  2273 00000FCF 7408                    		je		line2
  2274 00000FD1 721C                    		jb		line1
  2275 00000FD3 91                      		xchg		ax,cx
  2276 00000FD4 87DA                    		xchg		bx,dx
  2277 00000FD6 E91600                  		jmp		line1
  2278                                  line2:		; deltax=0
  2279 00000FD9 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  2280 00000FDB 7202                    		jb		line3
  2281 00000FDD 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  2282                                  line3:	; dx > bx
  2283 00000FDF 50                      		push		ax
  2284 00000FE0 53                      		push		bx
  2285 00000FE1 E811FE                  		call 		plot_xy
  2286 00000FE4 39D3                    		cmp		bx,dx
  2287 00000FE6 7503                    		jne		line31
  2288 00000FE8 E9C600                  		jmp		fim_line
  2289 00000FEB 43                      line31:		inc		bx
  2290 00000FEC E9F0FF                  		jmp		line3
  2291                                  ;deltax <>0
  2292                                  line1:
  2293                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  2294                                  	; cx > ax
  2295 00000FEF 51                      		push		cx
  2296 00000FF0 29C1                    		sub		cx,ax
  2297 00000FF2 890E[0600]              		mov		[deltax],cx
  2298 00000FF6 59                      		pop		cx
  2299 00000FF7 52                      		push		dx
  2300 00000FF8 29DA                    		sub		dx,bx
  2301 00000FFA 7702                    		ja		line32
  2302 00000FFC F7DA                    		neg		dx
  2303                                  line32:		
  2304 00000FFE 8916[0800]              		mov		[deltay],dx
  2305 00001002 5A                      		pop		dx
  2306                                  
  2307 00001003 50                      		push		ax
  2308 00001004 A1[0600]                		mov		ax,[deltax]
  2309 00001007 3B06[0800]              		cmp		ax,[deltay]
  2310 0000100B 58                      		pop		ax
  2311 0000100C 724D                    		jb		line5
  2312                                  
  2313                                  	; cx > ax e deltax>deltay
  2314 0000100E 51                      		push		cx
  2315 0000100F 29C1                    		sub		cx,ax
  2316 00001011 890E[0600]              		mov		[deltax],cx
  2317 00001015 59                      		pop		cx
  2318 00001016 52                      		push		dx
  2319 00001017 29DA                    		sub		dx,bx
  2320 00001019 8916[0800]              		mov		[deltay],dx
  2321 0000101D 5A                      		pop		dx
  2322                                  
  2323 0000101E 89C6                    		mov		si,ax
  2324                                  line4:
  2325 00001020 50                      		push		ax
  2326 00001021 52                      		push		dx
  2327 00001022 56                      		push		si
  2328 00001023 29C6                    		sub		si,ax	;(x-x1)
  2329 00001025 A1[0800]                		mov		ax,[deltay]
  2330 00001028 F7EE                    		imul		si
  2331 0000102A 8B36[0600]              		mov		si,[deltax]		;arredondar
  2332 0000102E D1EE                    		shr		si,1
  2333                                  ; se numerador (DX)>0 soma se <0 subtrai
  2334 00001030 81FA0000                		cmp		dx,0
  2335 00001034 7C09                    		jl		ar1
  2336 00001036 01F0                    		add		ax,si
  2337 00001038 81D20000                		adc		dx,0
  2338 0000103C E90600                  		jmp		arc1
  2339 0000103F 29F0                    ar1:		sub		ax,si
  2340 00001041 81DA0000                		sbb		dx,0
  2341                                  arc1:
  2342 00001045 F73E[0600]              		idiv		word [deltax]
  2343 00001049 01D8                    		add		ax,bx
  2344 0000104B 5E                      		pop		si
  2345 0000104C 56                      		push		si
  2346 0000104D 50                      		push		ax
  2347 0000104E E8A4FD                  		call		plot_xy
  2348 00001051 5A                      		pop		dx
  2349 00001052 58                      		pop		ax
  2350 00001053 39CE                    		cmp		si,cx
  2351 00001055 745A                    		je		fim_line
  2352 00001057 46                      		inc		si
  2353 00001058 E9C5FF                  		jmp		line4
  2354                                  
  2355 0000105B 39D3                    line5:		cmp		bx,dx
  2356 0000105D 7203                    		jb 		line7
  2357 0000105F 91                      		xchg		ax,cx
  2358 00001060 87DA                    		xchg		bx,dx
  2359                                  line7:
  2360 00001062 51                      		push		cx
  2361 00001063 29C1                    		sub		cx,ax
  2362 00001065 890E[0600]              		mov		[deltax],cx
  2363 00001069 59                      		pop		cx
  2364 0000106A 52                      		push		dx
  2365 0000106B 29DA                    		sub		dx,bx
  2366 0000106D 8916[0800]              		mov		[deltay],dx
  2367 00001071 5A                      		pop		dx
  2368                                  
  2369                                  
  2370                                  
  2371 00001072 89DE                    		mov		si,bx
  2372                                  line6:
  2373 00001074 52                      		push		dx
  2374 00001075 56                      		push		si
  2375 00001076 50                      		push		ax
  2376 00001077 29DE                    		sub		si,bx	;(y-y1)
  2377 00001079 A1[0600]                		mov		ax,[deltax]
  2378 0000107C F7EE                    		imul		si
  2379 0000107E 8B36[0800]              		mov		si,[deltay]		;arredondar
  2380 00001082 D1EE                    		shr		si,1
  2381                                  ; se numerador (DX)>0 soma se <0 subtrai
  2382 00001084 81FA0000                		cmp		dx,0
  2383 00001088 7C09                    		jl		ar2
  2384 0000108A 01F0                    		add		ax,si
  2385 0000108C 81D20000                		adc		dx,0
  2386 00001090 E90600                  		jmp		arc2
  2387 00001093 29F0                    ar2:		sub		ax,si
  2388 00001095 81DA0000                		sbb		dx,0
  2389                                  arc2:
  2390 00001099 F73E[0800]              		idiv		word [deltay]
  2391 0000109D 89C7                    		mov		di,ax
  2392 0000109F 58                      		pop		ax
  2393 000010A0 01C7                    		add		di,ax
  2394 000010A2 5E                      		pop		si
  2395 000010A3 57                      		push		di
  2396 000010A4 56                      		push		si
  2397 000010A5 E84DFD                  		call		plot_xy
  2398 000010A8 5A                      		pop		dx
  2399 000010A9 39D6                    		cmp		si,dx
  2400 000010AB 7404                    		je		fim_line
  2401 000010AD 46                      		inc		si
  2402 000010AE E9C3FF                  		jmp		line6
  2403                                  
  2404                                  fim_line:
  2405 000010B1 5F                      		pop		di
  2406 000010B2 5E                      		pop		si
  2407 000010B3 5A                      		pop		dx
  2408 000010B4 59                      		pop		cx
  2409 000010B5 5B                      		pop		bx
  2410 000010B6 58                      		pop		ax
  2411 000010B7 9D                      		popf
  2412 000010B8 5D                      		pop		bp
  2413 000010B9 C20800                  		ret		8
  2414                                  
  2415                                  
  2416                                  
  2417                                  
  2418                                  ;*******************************************************************
  2419                                  segment data
  2420                                  
  2421 00000000 0F                      cor		db		branco_intenso
  2422                                  
  2423                                  ;	I R G B COR
  2424                                  ;	0 0 0 0 preto
  2425                                  ;	0 0 0 1 azul
  2426                                  ;	0 0 1 0 verde
  2427                                  ;	0 0 1 1 cyan
  2428                                  ;	0 1 0 0 vermelho
  2429                                  ;	0 1 0 1 magenta
  2430                                  ;	0 1 1 0 marrom
  2431                                  ;	0 1 1 1 branco
  2432                                  ;	1 0 0 0 cinza
  2433                                  ;	1 0 0 1 azul claro
  2434                                  ;	1 0 1 0 verde claro
  2435                                  ;	1 0 1 1 cyan claro
  2436                                  ;	1 1 0 0 rosa
  2437                                  ;	1 1 0 1 magenta claro
  2438                                  ;	1 1 1 0 amarelo
  2439                                  ;	1 1 1 1 branco intenso
  2440                                  
  2441                                  ;Colors
  2442                                  preto						equ		0
  2443                                  azul						equ		1
  2444                                  verde						equ		2
  2445                                  cyan						equ		3
  2446                                  vermelho				equ		4
  2447                                  magenta					equ		5
  2448                                  marrom					equ		6
  2449                                  branco					equ		7
  2450                                  cinza						equ		8
  2451                                  azul_claro			equ		9
  2452                                  verde_claro			equ		10
  2453                                  cyan_claro			equ		11
  2454                                  rosa						equ		12
  2455                                  magenta_claro		equ		13
  2456                                  amarelo					equ		14
  2457                                  branco_intenso	equ		15
  2458                                  
  2459 00000001 00                      modo_anterior	db	0
  2460 00000002 0000                    linha   	dw  		0
  2461 00000004 0000                    coluna  	dw  		0
  2462 00000006 0000                    deltax		dw			0
  2463 00000008 0000                    deltay		dw			0	
  2464                                  
  2465                                  ;keys			
  2466 0000000A 63                      key_new_game			db	  'c'
  2467 0000000B 04                      key_jogada				db		4
  2468 0000000C 73                      key_out_game			db		's'  
  2469                                  
  2470                                  ;Strings
  2471 0000000D 5465726D696E616C        string_terminal					db	'Terminal'
  2472 00000015 4A4F474F2044412056-     string_game    					db  'JOGO DA VELHA'
  2473 0000001E 454C4841           
  2474 00000022 43616D706F20646520-     string_last_move 				db	'Campo de comando'
  2475 0000002B 636F6D616E646F     
  2476 00000032 43616D706F20646520-     string_message   				db  'Campo de mensagens'
  2477 0000003B 6D656E736167656E73 
  2478 00000044 436F6D616E646F2049-     string_invalid_command	db 	'Comando Invalido'
  2479 0000004D 6E76616C69646F     
  2480 00000054 4A6F6761646120496E-     string_invalid_play			db 	'Jogada Inválida'
  2481 0000005D 76C3A16C696461     
  2482 00000064 4A6F6761646120496E-     string_occupied_cell    db  'Jogada Invalida'
  2483 0000006D 76616C696461       
  2484 00000073 2020202020              string_empty_terminal		db  '     '
  2485 00000078 4A6F6761646120496E-     string_invalid_player   db  'Jogada Invalida'
  2486 00000081 76616C696461       
  2487 00000087 202020202020202020-     string_empty_message    db 	'                                                   '
  2488 00000090 202020202020202020-
  2489 00000099 202020202020202020-
  2490 000000A2 202020202020202020-
  2491 000000AB 202020202020202020-
  2492 000000B4 202020202020       
  2493 000000BA 202020                  string_empty_command    db  '   '
  2494 000000BD 4F206A6F6761646F72-     string_player_C_victory db  'O jogador C venceu!'
  2495 000000C6 20432076656E636575-
  2496 000000CF 21                 
  2497 000000D0 4F206A6F6761646F72-     string_player_X_victory db  'O jogador X venceu!'
  2498 000000D9 20582076656E636575-
  2499 000000E2 21                 
  2500 000000E3 486F75766520656D70-     string_tied 						db  'Houve empate!'
  2501 000000EC 61746521           
  2502 000000F0 4661766F722C20696E-     string_final_message    db  'Favor, iniciar um novo jogo ou encerrar o programa!' ;;66
  2503 000000F9 696369617220756D20-
  2504 00000102 6E6F766F206A6F676F-
  2505 0000010B 206F7520656E636572-
  2506 00000114 726172206F2070726F-
  2507 0000011D 6772616D6121       
  2508                                  
  2509 00000123 3131                    n11 										db  '11'
  2510 00000125 3132                    n12 										db  '12'
  2511 00000127 3133                    n13 										db  '13'
  2512 00000129 3231                    n21 										db  '21'
  2513 0000012B 3232                    n22 										db  '22'
  2514 0000012D 3233                    n23 										db  '23'
  2515 0000012F 3331                    n31 										db  '31'
  2516 00000131 3332                    n32 										db  '32'
  2517 00000133 3333                    n33 										db  '33'
  2518                                  
  2519                                  ;Variaveis que definem o preenchimento das cells, 0 vazio e 1 preenchido
  2520 00000135 00                      cell11 db 0
  2521 00000136 00                      cell12 db 0
  2522 00000137 00                      cell13 db 0
  2523 00000138 00                      cell21 db 0
  2524 00000139 00                      cell22 db 0
  2525 0000013A 00                      cell23 db 0
  2526 0000013B 00                      cell31 db 0
  2527 0000013C 00                      cell32 db 0
  2528 0000013D 00                      cell33 db 0
  2529                                  
  2530 0000013E 00                      last_player db 0 ;Última jogador a jogar: 'C' ou 'X'
  2531 0000013F 00                      victorious_player db 0 ;Jogador vencedor da rodada: 'C' ou 'X'
  2532 00000140 00                      is_tied db 0
  2533                                  
  2534                                  ;*************************************************************************
  2535                                  segment stack stack
  2536 00000000 <res 00000200>            resb 		512
  2537                                  				
  2538                                  stacktop:
  2539                                  ;NAO PODE JOGAR NO MESMO LUGAR\;
  2540                                  

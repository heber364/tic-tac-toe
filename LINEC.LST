     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                  mov 		ax,data
     8 00000003 8ED8                      mov 		ds,ax
     9 00000005 B8[0000]                  mov 		ax,stack
    10 00000008 8ED0                      mov 		ss,ax
    11 0000000A BC[0002]                  mov 		sp,stacktop
    12                                  
    13                                  ;Salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                      mov  		ah,0Fh
    15 0000000F CD10                      int  		10h
    16 00000011 A2[0100]                  mov  		[modo_anterior],al   
    17                                  
    18                                  ;Alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                      mov     	al,12h
    20 00000016 B400                      mov     	ah,0
    21 00000018 CD10                      int     	10h
    22                                  		
    23                                  
    24                                  ;Desenhar jogo da velha
    25                                  	print_terminal_text:
    26 0000001A BB0000                  		mov     	bx,0
    27 0000001D B90800                  		mov     	cx,8			;n�mero de caracteres
    28 00000020 B607                    		mov     	dh,7			;linha 0-29
    29 00000022 B201                    		mov     	dl,1			;coluna 0-79
    30 00000024 C606[0000]0F            		mov		byte[cor], branco_intenso
    31                                  
    32                                  		LTT:
    33 00000029 E8390A                  			call		cursor
    34 0000002C 8A87[0D00]              			mov     al,[bx+string_terminal]
    35 00000030 E8490A                  			call		caracter
    36 00000033 43                      			inc     bx			;proximo caracter
    37 00000034 FEC2                    			inc			dl			;avanca a coluna
    38                                  			
    39 00000036 E2F1                    			loop    LTT
    40                                  	print_tic_tac_toe:
    41 00000038 C606[0000]0F            		mov		byte[cor],branco_intenso	;1 Reta vertical
    42 0000003D B8F500                  		mov		ax,245
    43 00000040 50                      		push		ax
    44 00000041 B85B00                  		mov		ax,91
    45 00000044 50                      		push		ax
    46 00000045 B8F500                  		mov		ax,245
    47 00000048 50                      		push		ax
    48 00000049 B8D501                  		mov		ax,469
    49 0000004C 50                      		push		ax
    50 0000004D E80C0C                  		call		line
    51                                  
    52 00000050 C606[0000]0F            		mov		byte[cor],branco_intenso	;2 Reta vertical
    53 00000055 B87301                  		mov		ax,371
    54 00000058 50                      		push		ax
    55 00000059 B85B00                  		mov		ax,91
    56 0000005C 50                      		push		ax
    57 0000005D B87301                  		mov		ax,371
    58 00000060 50                      		push		ax
    59 00000061 B8D501                  		mov		ax,469
    60 00000064 50                      		push		ax
    61 00000065 E8F40B                  		call		line
    62                                  
    63 00000068 C606[0000]0F            		mov		byte[cor],branco_intenso	;1 Reta horizontal
    64 0000006D B87700                  		mov		ax,119
    65 00000070 50                      		push		ax
    66 00000071 B85701                  		mov		ax,343
    67 00000074 50                      		push		ax
    68 00000075 B8F101                  		mov		ax,497
    69 00000078 50                      		push		ax
    70 00000079 B85701                  		mov		ax,343
    71 0000007C 50                      		push		ax
    72 0000007D E8DC0B                  		call		line
    73                                  
    74 00000080 C606[0000]0F            		mov		byte[cor],branco_intenso	;2 Reta horizontal
    75 00000085 B87700                  		mov		ax,119
    76 00000088 50                      		push		ax
    77 00000089 B8D900                  		mov		ax,217
    78 0000008C 50                      		push		ax
    79 0000008D B8F101                  		mov		ax,497
    80 00000090 50                      		push		ax
    81 00000091 B8D900                  		mov		ax,217
    82 00000094 50                      		push		ax
    83 00000095 E8C40B                  		call		line
    84                                  
    85                                  	print_command_field:
    86 00000098 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal superior
    87 0000009D B80500                  		mov		ax,5
    88 000000A0 50                      		push		ax
    89 000000A1 B84600                  		mov		ax,70
    90 000000A4 50                      		push		ax
    91 000000A5 B87B02                  		mov		ax,635
    92 000000A8 50                      		push		ax
    93 000000A9 B84600                  		mov		ax,70
    94 000000AC 50                      		push		ax
    95 000000AD E8AC0B                  		call		line
    96                                  
    97 000000B0 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal inferior
    98 000000B5 B80500                  		mov		ax,5
    99 000000B8 50                      		push		ax
   100 000000B9 B82800                  		mov		ax,40
   101 000000BC 50                      		push		ax
   102 000000BD B87B02                  		mov		ax,635
   103 000000C0 50                      		push		ax
   104 000000C1 B82800                  		mov		ax,40
   105 000000C4 50                      		push		ax
   106 000000C5 E8940B                  		call		line
   107                                  
   108 000000C8 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da esquerda
   109 000000CD B80500                  		mov		ax,5
   110 000000D0 50                      		push		ax
   111 000000D1 B84600                  		mov		ax,70
   112 000000D4 50                      		push		ax
   113 000000D5 B80500                  		mov		ax,5
   114 000000D8 50                      		push		ax
   115 000000D9 B82800                  		mov		ax,40
   116 000000DC 50                      		push		ax
   117 000000DD E87C0B                  		call		line
   118                                  
   119 000000E0 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da direita
   120 000000E5 B87B02                  		mov		ax,635
   121 000000E8 50                      		push		ax
   122 000000E9 B84600                  		mov		ax,70
   123 000000EC 50                      		push		ax
   124 000000ED B87B02                  		mov		ax,635
   125 000000F0 50                      		push		ax
   126 000000F1 B82800                  		mov		ax,40
   127 000000F4 50                      		push		ax
   128 000000F5 E8640B                  		call		line
   129                                  
   130                                  	print_message_field:
   131 000000F8 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal superior
   132 000000FD B80500                  		mov		ax,5
   133 00000100 50                      		push		ax
   134 00000101 B82300                  		mov		ax,35
   135 00000104 50                      		push		ax
   136 00000105 B87B02                  		mov		ax,635
   137 00000108 50                      		push		ax
   138 00000109 B82300                  		mov		ax,35
   139 0000010C 50                      		push		ax
   140 0000010D E84C0B                  		call		line
   141                                  
   142 00000110 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal inferior
   143 00000115 B80500                  		mov		ax,5
   144 00000118 50                      		push		ax
   145 00000119 B80500                  		mov		ax,5
   146 0000011C 50                      		push		ax
   147 0000011D B87B02                  		mov		ax,635
   148 00000120 50                      		push		ax
   149 00000121 B80500                  		mov		ax,5
   150 00000124 50                      		push		ax
   151 00000125 E8340B                  		call		line
   152                                  
   153 00000128 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da esquerda
   154 0000012D B80500                  		mov		ax,5
   155 00000130 50                      		push		ax
   156 00000131 B82300                  		mov		ax,35
   157 00000134 50                      		push		ax
   158 00000135 B80500                  		mov		ax,5
   159 00000138 50                      		push		ax
   160 00000139 B80500                  		mov		ax,5
   161 0000013C 50                      		push		ax
   162 0000013D E81C0B                  		call		line
   163                                  
   164 00000140 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da direita
   165 00000145 B87B02                  		mov		ax,635
   166 00000148 50                      		push		ax
   167 00000149 B82300                  		mov		ax,35
   168 0000014C 50                      		push		ax
   169 0000014D B87B02                  		mov		ax,635
   170 00000150 50                      		push		ax
   171 00000151 B80500                  		mov		ax,5
   172 00000154 50                      		push		ax
   173 00000155 E8040B                  		call		line	
   174                                  	
   175                                  	print_command_title:
   176 00000158 B91000                  		mov     	cx,16			;n�mero de caracteres
   177 0000015B BB0000                  		mov     	bx,0
   178 0000015E B61A                    		mov     	dh,26			;linha 0-29
   179 00000160 B202                    		mov     	dl,2			;coluna 0-79
   180 00000162 C606[0000]0F            		mov		byte[cor],branco_intenso
   181                                  	
   182                                  		LCC:
   183 00000167 E8FB08                  		call	cursor
   184 0000016A 8A87[2200]              		mov     al,[bx+string_last_move]
   185 0000016E E80B09                  		call	caracter
   186 00000171 43                      		inc     bx			;proximo caracter
   187 00000172 FEC2                    		inc		dl			;avanca a coluna
   188                                  
   189 00000174 E2F1                    		loop    LCC
   190                                  	
   191                                  	
   192                                  	print_message_title:
   193 00000176 B91200                  		mov     	cx,18			;n�mero de caracteres
   194 00000179 BB0000                  		mov     	bx,0
   195 0000017C B61C                    		mov     	dh,28			;linha 0-29
   196 0000017E B202                    		mov     	dl,2			;coluna 0-79
   197 00000180 C606[0000]0F            		mov		byte[cor],branco_intenso
   198                                  
   199                                  		LCM:
   200 00000185 E8DD08                  			call	cursor
   201 00000188 8A87[3200]              			mov     al,[bx+string_message]
   202 0000018C E8ED08                  			call	caracter
   203 0000018F 43                      			inc     bx			;proximo caracter
   204 00000190 FEC2                    			inc		dl			;avanca a coluna
   205 00000192 E2F1                    			loop    LCM
   206                                  	print_game_title:
   207 00000194 B90D00                  		mov     	cx,13			;n�mero de caracteres
   208 00000197 BB0000                  		mov     	bx,0
   209 0000019A B600                    		mov     	dh,0			;linha 0-29
   210 0000019C B220                    		mov     	dl,32			;coluna 0-79
   211 0000019E C606[0000]0F            		mov		byte[cor],branco_intenso
   212                                  
   213                                  		L1GT:
   214 000001A3 E8BF08                  			call	cursor
   215 000001A6 8A87[1500]              			mov     al,[bx+string_game]
   216 000001AA E8CF08                  			call	caracter
   217 000001AD 43                      			inc     bx			;proximo caracter
   218 000001AE FEC2                    			inc		dl			;avanca a coluna
   219 000001B0 E2F1                    			loop    L1GT
   220                                  
   221                                  		;mov    	ah,08h
   222                                  
   223                                  
   224                                  ;Escrever numerações de ajuda 
   225                                  	;N11
   226 000001B2 B90200                  		mov     	cx,2			;n�mero de caracteres
   227 000001B5 BB0000                  		mov     	bx,0
   228 000001B8 B601                    		mov     	dh,1			;linha 0-29
   229 000001BA B20F                    		mov     	dl,15			;coluna 0-79
   230 000001BC C606[0000]0F            		mov		byte[cor],branco_intenso
   231                                  
   232                                  
   233                                  		LN11:
   234 000001C1 E8A108                  			call	cursor
   235 000001C4 8A87[D100]              				mov     al,[bx+n11]
   236 000001C8 E8B108                  			call	caracter
   237 000001CB 43                      				inc     bx			;proximo caracter
   238 000001CC FEC2                    			inc		dl			;avanca a coluna
   239                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   240 000001CE E2F1                    				loop    LN11
   241                                  	;N12
   242 000001D0 B90200                  		mov     	cx,2			;n�mero de caracteres
   243 000001D3 BB0000                  		mov     	bx,0
   244 000001D6 B601                    		mov     	dh,1			;linha 0-29
   245 000001D8 B21F                    		mov     	dl,31			;coluna 0-79
   246 000001DA C606[0000]0F            		mov		byte[cor],branco_intenso
   247                                  
   248                                  
   249                                  		LN12:
   250 000001DF E88308                  			call	cursor
   251 000001E2 8A87[D300]              				mov     al,[bx+n12]
   252 000001E6 E89308                  			call	caracter
   253 000001E9 43                      				inc     bx			;proximo caracter
   254 000001EA FEC2                    			inc		dl			;avanca a coluna
   255                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   256 000001EC E2F1                    				loop    LN12
   257                                  	;N13
   258 000001EE B90200                  		mov     	cx,2			;n�mero de caracteres
   259 000001F1 BB0000                  		mov     	bx,0
   260 000001F4 B601                    		mov     	dh,1			;linha 0-29
   261 000001F6 B22F                    		mov     	dl,47			;coluna 0-79
   262 000001F8 C606[0000]0F            		mov		byte[cor],branco_intenso
   263                                  
   264                                  
   265                                  		LN13:
   266 000001FD E86508                  			call	cursor
   267 00000200 8A87[D500]              				mov     al,[bx+n13]
   268 00000204 E87508                  			call	caracter
   269 00000207 43                      				inc     bx			;proximo caracter
   270 00000208 FEC2                    			inc		dl			;avanca a coluna
   271                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   272 0000020A E2F1                    				loop    LN13
   273                                  	;N21
   274 0000020C B90200                  		mov     	cx,2			;n�mero de caracteres
   275 0000020F BB0000                  		mov     	bx,0
   276 00000212 B609                    		mov     	dh,9			;linha 0-29
   277 00000214 B20F                    		mov     	dl,15			;coluna 0-79
   278 00000216 C606[0000]0F            		mov		byte[cor],branco_intenso
   279                                  
   280                                  
   281                                  		LN21:
   282 0000021B E84708                  			call	cursor
   283 0000021E 8A87[D700]              				mov     al,[bx+n21]
   284 00000222 E85708                  			call	caracter
   285 00000225 43                      				inc     bx			;proximo caracter
   286 00000226 FEC2                    			inc		dl			;avanca a coluna
   287                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   288 00000228 E2F1                    				loop    LN21
   289                                  	;N22
   290 0000022A B90200                  		mov     	cx,2			;n�mero de caracteres
   291 0000022D BB0000                  		mov     	bx,0
   292 00000230 B609                    		mov     	dh,9			;linha 0-29
   293 00000232 B21F                    		mov     	dl,31			;coluna 0-79
   294 00000234 C606[0000]0F            		mov		byte[cor],branco_intenso
   295                                  
   296                                  
   297                                  		LN22:
   298 00000239 E82908                  			call	cursor
   299 0000023C 8A87[D900]              				mov     al,[bx+n22]
   300 00000240 E83908                  			call	caracter
   301 00000243 43                      				inc     bx			;proximo caracter
   302 00000244 FEC2                    			inc		dl			;avanca a coluna
   303                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   304 00000246 E2F1                    				loop    LN22
   305                                  	;N23
   306 00000248 B90200                  		mov     	cx,2			;n�mero de caracteres
   307 0000024B BB0000                  		mov     	bx,0
   308 0000024E B609                    		mov     	dh,9			;linha 0-29
   309 00000250 B22F                    		mov     	dl,47			;coluna 0-79
   310 00000252 C606[0000]0F            		mov		byte[cor],branco_intenso
   311                                  
   312                                  
   313                                  		LN23:
   314 00000257 E80B08                  			call	cursor
   315 0000025A 8A87[DB00]              				mov     al,[bx+n23]
   316 0000025E E81B08                  			call	caracter
   317 00000261 43                      				inc     bx			;proximo caracter
   318 00000262 FEC2                    			inc		dl			;avanca a coluna
   319                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   320 00000264 E2F1                    				loop    LN23
   321                                  	;N31
   322 00000266 B90200                  		mov     	cx,2			;n�mero de caracteres
   323 00000269 BB0000                  		mov     	bx,0
   324 0000026C B611                    		mov     	dh,17			;linha 0-29
   325 0000026E B20F                    		mov     	dl,15			;coluna 0-79
   326 00000270 C606[0000]0F            		mov		byte[cor],branco_intenso
   327                                  
   328                                  
   329                                  		LN31:
   330 00000275 E8ED07                  			call	cursor
   331 00000278 8A87[DD00]              				mov     al,[bx+n31]
   332 0000027C E8FD07                  			call	caracter
   333 0000027F 43                      				inc     bx			;proximo caracter
   334 00000280 FEC2                    			inc		dl			;avanca a coluna
   335                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   336 00000282 E2F1                    				loop    LN31
   337                                  	;N32
   338 00000284 B90200                  		mov     	cx,2			;n�mero de caracteres
   339 00000287 BB0000                  		mov     	bx,0
   340 0000028A B611                    		mov     	dh,17			;linha 0-29
   341 0000028C B21F                    		mov     	dl,31			;coluna 0-79
   342 0000028E C606[0000]0F            		mov		byte[cor],branco_intenso
   343                                  
   344                                  
   345                                  		LN32:
   346 00000293 E8CF07                  			call	cursor
   347 00000296 8A87[DF00]              				mov     al,[bx+n32]
   348 0000029A E8DF07                  			call	caracter
   349 0000029D 43                      				inc     bx			;proximo caracter
   350 0000029E FEC2                    			inc		dl			;avanca a coluna
   351                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   352 000002A0 E2F1                    				loop    LN32
   353                                  	;N33
   354 000002A2 B90200                  		mov     	cx,2			;n�mero de caracteres
   355 000002A5 BB0000                  		mov     	bx,0
   356 000002A8 B611                    		mov     	dh,17			;linha 0-29
   357 000002AA B22F                    		mov     	dl,47			;coluna 0-79
   358 000002AC C606[0000]0F            		mov		byte[cor],branco_intenso
   359                                  
   360                                  
   361                                  		LN33:
   362 000002B1 E8B107                  			call	cursor
   363 000002B4 8A87[E100]              				mov     al,[bx+n33]
   364 000002B8 E8C107                  			call	caracter
   365 000002BB 43                      				inc     bx			;proximo caracter
   366 000002BC FEC2                    			inc		dl			;avanca a coluna
   367                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   368 000002BE E2F1                    				loop    LN33
   369                                  ;Código principal
   370                                  main_loop:
   371                                  
   372 000002C0 B608                    	mov dh, 8 ;linha 0-29
   373 000002C2 B201                    	mov dl, 1 ;coluna 0-79
   374 000002C4 E89E07                  	call cursor
   375                                  
   376                                  	; Interrupção para capturar jogada
   377 000002C7 B40A                    	mov ah, 0Ah
   378 000002C9 BA[0B00]                	mov dx, key_jogada
   379 000002CC CD21                    	int 21h
   380                                  	
   381                                  	;Limpa campo de mensagem
   382 000002CE E8D300                  	call clear_message_field
   383                                  	;Limpa terminal onde foi digitado o comando
   384 000002D1 E8E005                  	call clear_terminal
   385                                  
   386                                  	;Imprime comanddo na barra de comando
   387 000002D4 BB0200                  	mov 			bx, 2
   388 000002D7 B90300                  	mov			  cx, 3 ; Carrega o tamanho da string em CX
   389 000002DA B61A                    	mov     	dh,26								;linha 0-29
   390 000002DC B213                    	mov     	dl,19								;coluna 0-79
   391 000002DE C606[0000]0F            	mov		byte[cor],branco_intenso
   392                                  	
   393                                  	loop_print_last_command:
   394 000002E3 E87F07                  		call		cursor
   395 000002E6 8A87[0B00]              		mov     al,	[bx+key_jogada]
   396 000002EA E88F07                  		call		caracter
   397 000002ED 43                      		inc     bx			;proximo caracter
   398 000002EE FEC2                    		inc			dl			;avanca a coluna
   399                                  		
   400 000002F0 E2F1                    	loop    loop_print_last_command
   401                                  	
   402 000002F2 BB0200                  	mov bx, 2
   403 000002F5 B043                    	mov al, 'C'
   404 000002F7 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 'C'
   405 000002FB 742C                    	je jmp_bridge_jogada_circulo ; caso seja igual a 'C' pule para a jogada_circulo
   406                                  	
   407 000002FD B058                    	mov al, 'X'
   408 000002FF 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com X
   409 00000303 7421                    	je jmp_bridge_jogada_x	 ; caso seja igual a 'X' pule para a jogada_circulo
   410                                  
   411 00000305 B063                     	mov al, 'c'
   412 00000307 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 'c'
   413 0000030B 741F                    	je	novo_jogo ; caso seja igual a 'c' começa um novo jogo
   414                                  	
   415 0000030D B073                    	mov al, 's'
   416 0000030F 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 's'
   417 00000313 7403                    	je	exit_game ; caso seja igual a 's', saia do programa
   418                                  
   419 00000315 E9A8FF                  	jmp main_loop	; 
   420                                  exit_game:
   421 00000318 CD21                    	int     21h
   422 0000031A B400                      mov  	ah,0   			; set video mode
   423 0000031C A0[0100]                  mov  	al,[modo_anterior]   	; modo anterior
   424 0000031F CD10                      int  	10h
   425 00000321 B8004C                  	mov     ax,4c00h
   426 00000324 CD21                    	int     21h
   427                                  jmp_bridge_jogada_x:
   428 00000326 E8C400                  	call jogada_x
   429                                  jmp_bridge_jogada_circulo:
   430 00000329 E89700                  	call jogada_circulo
   431                                  
   432                                  novo_jogo:
   433 0000032C C606[0000]00            		mov		byte[cor],preto
   434                                  		;LIMPA CIRCULOS
   435 00000331 E86D03                  		call circle11
   436 00000334 E87E03                  		call circle12
   437 00000337 E88F03                  		call circle13
   438 0000033A E8A003                  		call circle21
   439 0000033D E8B103                  		call circle22
   440 00000340 E8C203                  		call circle23
   441 00000343 E8D303                  		call circle31
   442 00000346 E8E403                  		call circle32
   443 00000349 E8F503                  		call circle33
   444                                  
   445                                  		;LIMPA X'S
   446 0000034C E80604                  		call x11
   447 0000034F E82A04                  		call x12
   448 00000352 E84E04                  		call x13
   449 00000355 E87204                  		call x21
   450 00000358 E89604                  		call x22
   451 0000035B E8BA04                  		call x23
   452 0000035E E8DE04                  		call x31
   453 00000361 E80205                  		call x32
   454 00000364 E82605                  		call x33
   455                                  
   456                                  		;LIMPA LINHAS DE VITÓRIA
   457 00000367 E81906                  		call SVL1
   458                                  
   459                                  		;LIMPA CELULAS 
   460 0000036A C606[E300]00            		mov byte[cell11], 0
   461 0000036F C606[E400]00            		mov byte[cell12], 0
   462 00000374 C606[E500]00            		mov byte[cell13], 0
   463 00000379 C606[E600]00            		mov byte[cell21], 0
   464 0000037E C606[E700]00            		mov byte[cell22], 0
   465 00000383 C606[E800]00            		mov byte[cell23], 0
   466 00000388 C606[E900]00            		mov byte[cell31], 0
   467 0000038D C606[EA00]00            		mov byte[cell32], 0
   468 00000392 C606[EB00]00            		mov byte[cell33], 0
   469                                  
   470                                  		;LIMPA REGISTROS DE ÚLTIMA JOGADA E GANHADOR
   471 00000397 C606[EC00]00            		mov byte[last_player], 0
   472 0000039C C606[ED00]00            		mov byte[victorious_player], 0	
   473                                  		
   474 000003A1 E994FC                  		jmp print_tic_tac_toe;
   475                                  		;;limpa jogas na tela
   476                                  
   477                                  clear_message_field:
   478                                  	;Limpa campo de mensagem
   479 000003A4 BB0000                  		mov 			bx, 0
   480 000003A7 B92300                  		mov			  cx, 35 								;Carrega o tamanho da string em CX
   481 000003AA B61C                    		mov     	dh, 28								;linha 0-29
   482 000003AC B215                    		mov     	dl, 21								;coluna 0-79
   483 000003AE C606[0000]00            		mov		byte[cor],preto
   484                                  		
   485                                  		loop_print_clear_message_field:
   486 000003B3 E8AF06                  			call		cursor
   487 000003B6 8A87[9B00]              			mov     al,	[bx+string_empty_message]
   488 000003BA E8BF06                  			call		caracter
   489 000003BD 43                      			inc     bx			;proximo caracter
   490 000003BE FEC2                    			inc			dl			;avanca a coluna
   491                                  			
   492 000003C0 E2F1                    		loop    loop_print_clear_message_field
   493 000003C2 C3                      	ret
   494                                  jogada_circulo:
   495 000003C3 A0[EC00]                		mov al, [last_player]
   496 000003C6 3C43                    		cmp al, 'C'
   497 000003C8 7450                    		je jogada_repetida
   498                                  
   499 000003CA C606[0000]0A            		mov		byte[cor],verde_claro	 ; seleciona a cord verde claro para círculo
   500                                  		
   501 000003CF BB0300                  		mov bx, 3
   502 000003D2 8A87[0B00]              		mov al,[bx+key_jogada]
   503 000003D6 2C30                    		sub al, '0'
   504                                  
   505                                  		;compara linha da jogada com 1 
   506 000003D8 3C01                    		cmp al, 1
   507 000003DA 745F                    		je jmp_intermediary_C1
   508                                  		
   509                                  		;compara linha da jogada com 2 
   510 000003DC 3C02                    		cmp al, 2
   511 000003DE 7407                    		je jmp_bridge_c2
   512                                  
   513                                  		; compara linha da jogada com 3 
   514 000003E0 3C03                    		cmp al, 3
   515 000003E2 7406                    		je jmp_bridge_c3
   516                                  
   517 000003E4 E9D9FE                  		jmp main_loop	
   518                                  		jmp_bridge_c2:
   519 000003E7 E8BA00                  			call jmp_intermediary_C2
   520                                  		jmp_bridge_c3:
   521 000003EA E81401                  			call jmp_intermediary_C3
   522                                  
   523                                  jogada_x:	
   524 000003ED A0[EC00]                		mov al, [last_player]
   525 000003F0 3C58                    		cmp al, 'X'
   526 000003F2 7426                    		je jogada_repetida
   527                                  		
   528 000003F4 C606[0000]0C            		mov	byte[cor],rosa
   529                                  
   530 000003F9 BB0300                  		mov bx, 3
   531 000003FC 8A87[0B00]              		mov al,[bx+key_jogada]
   532 00000400 2C30                    		sub al, '0'
   533                                  		;compara linha da jogada com 1 
   534 00000402 3C01                    		cmp al, 1
   535 00000404 740B                    		je jmp_bridge_x1
   536                                  		
   537                                  		;compara linha da jogada com 2 
   538 00000406 3C02                    		cmp al, 2
   539 00000408 740A                    		je jmp_bridge_x2
   540                                  
   541                                  		; compara linha da jogada com 3 
   542 0000040A 3C03                    		cmp al, 3
   543 0000040C 7409                    		je jmp_bridge_x3
   544                                  
   545 0000040E E9AFFE                  		jmp main_loop	
   546                                  
   547                                  		jmp_bridge_x1:
   548 00000411 E87301                  			call jmp_intermediary_X1
   549                                  		jmp_bridge_x2:
   550 00000414 E8CD01                  			call jmp_intermediary_X2
   551                                  		jmp_bridge_x3:
   552 00000417 E82A02                  			call jmp_intermediary_X3
   553                                  jogada_repetida:
   554                                  		;Imprime mensagem de jogada repetida na barra de mensagem
   555 0000041A BB0000                  		mov 			bx, 0
   556 0000041D B92300                  		mov			  cx, 35 								;Carrega o tamanho da string em CX
   557 00000420 B61C                    		mov     	dh, 28								;linha 0-29
   558 00000422 B215                    		mov     	dl, 21								;coluna 0-79
   559 00000424 C606[0000]04            		mov		byte[cor],vermelho
   560                                  		
   561                                  	loop_print_jogada_repetida:
   562 00000429 E83906                  			call		cursor
   563 0000042C 8A87[7800]              			mov     al,	[bx+string_invalid_player]
   564 00000430 E84906                  			call		caracter
   565 00000433 43                      			inc     bx			;proximo caracter
   566 00000434 FEC2                    			inc			dl			;avanca a coluna
   567                                  			
   568 00000436 E2F1                    	loop    loop_print_jogada_repetida
   569 00000438 E985FE                  		jmp main_loop
   570                                  jmp_intermediary_C1:
   571 0000043B BB0400                  		mov bx, 4
   572 0000043E 8A87[0B00]              		mov al,[bx+key_jogada]
   573 00000442 2C30                    		sub al, '0'
   574                                  
   575                                  		;compara coluna da jogada com 1 
   576 00000444 3C01                    		cmp al, 1
   577 00000446 740B                    		je jmp_intermediary_C11
   578                                  
   579                                  		;compara coluna da jogada com 2
   580 00000448 3C02                    		cmp al, 2
   581 0000044A 7424                    		je jmp_intermediary_C12
   582                                  
   583                                  		;compara coluna da jogada com 3
   584 0000044C 3C03                    		cmp al, 3
   585 0000044E 743A                    		je jmp_intermediary_C13
   586                                  		
   587 00000450 E96DFE                  		jmp main_loop
   588                                  	jmp_intermediary_C11:
   589 00000453 803E[E300]00            			cmp byte[cell11], 0	
   590 00000458 7513                    			jne jmp_bridge_print_occupied_cell
   591                                  
   592 0000045A C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   593 0000045F C606[E300]43            		  mov byte[cell11], 'C' ; Seta na celula 11 a jogada C
   594                                  
   595 00000464 E83A02                  			call circle11
   596 00000467 E86D04                  			call check_if_anyone_won
   597 0000046A E953FE                  			jmp main_loop
   598                                  		jmp_bridge_print_occupied_cell: ;ponte para a função principal
   599 0000046D E8EE00                  			call print_occupied_cell
   600                                  	jmp_intermediary_C12:	
   601 00000470 803E[E400]00            			cmp byte[cell12], 0	
   602 00000475 75F6                    			jne jmp_bridge_print_occupied_cell
   603                                  
   604 00000477 C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   605 0000047C C606[E400]43            			mov byte[cell12], 'C' ; Seta na celula 12 a jogada C
   606                                  
   607 00000481 E83102                  			call circle12
   608 00000484 E85004                  			call check_if_anyone_won
   609                                  
   610 00000487 E936FE                  			jmp main_loop
   611                                  	jmp_intermediary_C13:
   612 0000048A 803E[E500]00            			cmp byte[cell13], 0
   613 0000048F 75DC                    			jne jmp_bridge_print_occupied_cell
   614                                  
   615 00000491 C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   616 00000496 C606[E500]43            			mov byte[cell13], 'C' ; Seta na celula 13 a jogada C
   617                                  
   618 0000049B E82B02                  			call circle13
   619 0000049E E83604                  			call check_if_anyone_won
   620 000004A1 E91CFE                  			jmp main_loop
   621                                  jmp_intermediary_C2:
   622 000004A4 BB0400                  		mov bx, 4
   623 000004A7 8A87[0B00]              		mov al,[bx+key_jogada]
   624 000004AB 2C30                    		sub al, '0'
   625                                  
   626                                  		;compara coluna da jogada com 1 
   627 000004AD 3C01                    		cmp al, 1
   628 000004AF 740B                    		je jmp_intermediary_C21
   629                                  
   630                                  		;compara coluna da jogada com 2
   631 000004B1 3C02                    		cmp al, 2
   632 000004B3 741E                    		je jmp_intermediary_C22
   633                                  
   634                                  		;compara coluna da jogada com 3
   635 000004B5 3C03                    		cmp al, 3
   636 000004B7 7431                    		je jmp_intermediary_C23
   637                                  
   638 000004B9 E904FE                  		jmp main_loop
   639                                  	jmp_intermediary_C21:
   640 000004BC 803E[E600]00            			cmp byte[cell21], 0	
   641 000004C1 75AA                    			jne jmp_bridge_print_occupied_cell
   642                                  
   643 000004C3 C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   644 000004C8 C606[E600]43            			mov byte[cell21], 'C' ; Seta na celula 21 a jogada C
   645                                  
   646 000004CD E80D02                  			call circle21
   647 000004D0 E9EDFD                  			jmp main_loop
   648                                  	jmp_intermediary_C22:
   649 000004D3 803E[E700]00            			cmp byte[cell22], 0	
   650 000004D8 7593                    			jne jmp_bridge_print_occupied_cell
   651                                  
   652 000004DA C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   653 000004DF C606[E700]43            			mov byte[cell22], 'C' ; Seta na celula 22 a jogada C
   654                                  
   655 000004E4 E80A02                  			call circle22
   656 000004E7 E9D6FD                  			jmp main_loop
   657                                  	jmp_intermediary_C23:
   658 000004EA 803E[E800]00            			cmp byte[cell23], 0	
   659 000004EF 756D                    			jne print_occupied_cell
   660                                  
   661 000004F1 C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   662 000004F6 C606[E800]43            			mov byte[cell23], 'C' ; Seta na celula 23 a jogada C
   663                                  
   664 000004FB E80702                  			call circle23
   665 000004FE E9BFFD                  			jmp main_loop
   666                                  
   667                                  jmp_intermediary_C3:
   668 00000501 BB0400                  		mov bx, 4
   669 00000504 8A87[0B00]              		mov al,[bx+key_jogada]
   670 00000508 2C30                    		sub al, '0'
   671                                  
   672                                  		;compara coluna da jogada com 1 
   673 0000050A 3C01                    		cmp al, 1
   674 0000050C 740B                    		je jmp_intermediary_C31
   675                                  
   676                                  		;compara coluna da jogada com 2
   677 0000050E 3C02                    		cmp al, 2
   678 00000510 741E                    		je jmp_intermediary_C32
   679                                  
   680                                  		;compara coluna da jogada com 3
   681 00000512 3C03                    		cmp al, 3
   682 00000514 7431                    		je jmp_intermediary_C33
   683                                  
   684 00000516 E9A7FD                  		jmp main_loop
   685                                  
   686                                  	jmp_intermediary_C31:
   687 00000519 803E[E900]00            			cmp byte[cell31], 0	
   688 0000051E 753E                    			jne print_occupied_cell
   689                                  
   690 00000520 C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   691 00000525 C606[E900]43            			mov byte[cell31], 'C' ; Seta na celula 31 a jogada C
   692                                  
   693 0000052A E8EC01                  			call circle31
   694 0000052D E990FD                  			jmp main_loop
   695                                  	jmp_intermediary_C32:
   696 00000530 803E[EA00]00            			cmp byte[cell32], 0	
   697 00000535 7527                    			jne print_occupied_cell
   698                                  
   699 00000537 C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   700 0000053C C606[EA00]43            			mov byte[cell32], 'C' ; Seta na celula 32 a jogada C
   701                                  
   702 00000541 E8E901                  			call circle32
   703 00000544 E979FD                  			jmp main_loop
   704                                  	jmp_intermediary_C33:
   705 00000547 803E[EB00]00            			cmp byte[cell33], 0	
   706 0000054C 7510                    			jne print_occupied_cell
   707                                  
   708 0000054E C606[EC00]43            			mov byte[last_player], 'C' ;Set como último jogador o 'C'
   709 00000553 C606[EB00]43            			mov byte[cell33], 'C' ; Seta na celula 33 a jogada C
   710                                  
   711 00000558 E8E601                  			call circle33
   712 0000055B E962FD                  			jmp main_loop
   713                                  print_occupied_cell:
   714 0000055E 50                      	push ax
   715 0000055F 53                      	push bx
   716 00000560 51                      	push cx
   717 00000561 52                      	push dx
   718                                  
   719 00000562 BB0000                  		mov				bx, 0
   720 00000565 B90E00                  		mov			  cx, 14 								;Carrega o tamanho da string em CX
   721 00000568 B61C                    		mov     	dh, 28								;linha 0-29
   722 0000056A B215                    		mov     	dl, 21								;coluna 0-79
   723 0000056C C606[0000]04            		mov		byte[cor],vermelho
   724                                  		
   725                                  		loop_teste:
   726 00000571 E8F104                  			call		cursor
   727 00000574 8A87[6500]              			mov     al,	[bx+string_occupied_cell]
   728 00000578 E80105                  			call		caracter
   729 0000057B 43                      			inc     bx			;proximo caracter
   730 0000057C FEC2                    			inc			dl			;avanca a coluna
   731                                  			
   732 0000057E E2F1                    		loop    loop_teste
   733                                  	
   734 00000580 5A                      	pop dx
   735 00000581 59                      	pop cx
   736 00000582 5B                      	pop bx
   737 00000583 58                      	pop ax
   738                                  
   739 00000584 E939FD                  	jmp main_loop
   740                                  jmp_intermediary_X1:
   741 00000587 BB0400                  		mov bx, 4
   742 0000058A 8A87[0B00]              		mov al,[bx+key_jogada]
   743 0000058E 2C30                    		sub al, '0'
   744                                  
   745                                  		;compara coluna da jogada com 1 
   746 00000590 3C01                    		cmp al, 1
   747 00000592 740B                    		je jmp_intermediary_X11
   748                                  
   749                                  		;compara coluna da jogada com 2
   750 00000594 3C02                    		cmp al, 2
   751 00000596 741E                    		je jmp_intermediary_X12
   752                                  
   753                                  		;compara coluna da jogada com 3
   754 00000598 3C03                    		cmp al, 3
   755 0000059A 7431                    		je jmp_intermediary_X13
   756                                  
   757 0000059C E921FD                  		jmp main_loop
   758                                  	jmp_intermediary_X11:
   759 0000059F 803E[E300]00            			cmp byte[cell11], 0	
   760 000005A4 75B8                    			jne print_occupied_cell
   761                                  
   762 000005A6 C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   763 000005AB C606[E300]58            			mov byte[cell11], 'X' ; Seta na celula 11 a jogada 'X'
   764                                  
   765 000005B0 E8A201                  			call x11
   766 000005B3 E90AFD                  			jmp main_loop
   767                                  	jmp_intermediary_X12:
   768 000005B6 803E[E400]00            			cmp byte[cell12], 0	
   769 000005BB 75A1                    			jne print_occupied_cell
   770                                  
   771 000005BD C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   772 000005C2 C606[E400]58            			mov byte[cell12], 'X' ; Seta na celula 12 a jogada 'X'
   773                                  
   774 000005C7 E8B201                  			call x12
   775 000005CA E9F3FC                  			jmp main_loop
   776                                  	jmp_intermediary_X13:
   777 000005CD 803E[E500]00            			cmp byte[cell13], 0	
   778 000005D2 758A                    			jne print_occupied_cell
   779                                  
   780 000005D4 C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   781 000005D9 C606[E500]58            			mov byte[cell13], 'X' ; Seta na celula 13 a jogada 'X'
   782                                  
   783 000005DE E8C201                  			call x13
   784 000005E1 E9DCFC                  			jmp main_loop
   785                                  jmp_intermediary_X2:
   786 000005E4 BB0400                  		mov bx, 4
   787 000005E7 8A87[0B00]              		mov al,[bx+key_jogada]
   788 000005EB 2C30                    		sub al, '0'
   789                                  
   790                                  		;compara coluna da jogada com 1 
   791 000005ED 3C01                    		cmp al, 1
   792 000005EF 740B                    		je jmp_intermediary_X21
   793                                  
   794                                  		;compara coluna da jogada com 2
   795 000005F1 3C02                    		cmp al, 2
   796 000005F3 7421                    		je jmp_intermediary_X22
   797                                  
   798                                  		;compara coluna da jogada com 3
   799 000005F5 3C03                    		cmp al, 3
   800 000005F7 7434                    		je jmp_intermediary_X23
   801                                  
   802 000005F9 E9C4FC                  		jmp main_loop
   803                                  	jmp_intermediary_X21:
   804 000005FC 803E[E600]00            			cmp byte[cell21], 0	
   805 00000601 7510                    			jne jmp_bridge_2_print_occupied_cell
   806                                  
   807 00000603 C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   808 00000608 C606[E600]58            			mov byte[cell21], 'X' ; Seta na celula 21 a jogada 'X'
   809                                  			
   810 0000060D E8BA01                  			call x21
   811 00000610 E9ADFC                  			jmp main_loop
   812                                  	jmp_bridge_2_print_occupied_cell:
   813 00000613 E848FF                  		call print_occupied_cell
   814                                  	jmp_intermediary_X22:
   815 00000616 803E[E700]00            			cmp byte[cell22], 0	
   816 0000061B 75F6                    			jne jmp_bridge_2_print_occupied_cell
   817                                  
   818 0000061D C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   819 00000622 C606[E700]58            			mov byte[cell22], 'X' ; Seta na celula 22 a jogada 'X'
   820                                  
   821 00000627 E8C701                  			call x22
   822 0000062A E993FC                  			jmp main_loop
   823                                  	jmp_intermediary_X23:
   824 0000062D 803E[E800]00            			cmp byte[cell23], 0	
   825 00000632 75DF                    			jne jmp_bridge_2_print_occupied_cell
   826                                  
   827 00000634 C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   828 00000639 C606[E800]58            			mov byte[cell23], 'X' ; Seta na celula 23 a jogada 'X'
   829                                  
   830 0000063E E8D701                  			call x23
   831 00000641 E97CFC                  			jmp main_loop
   832                                  
   833                                  jmp_intermediary_X3:
   834 00000644 BB0400                  		mov bx, 4
   835 00000647 8A87[0B00]              		mov al,[bx+key_jogada]
   836 0000064B 2C30                    		sub al, '0'
   837                                  
   838                                  		;compara coluna da jogada com 1 
   839 0000064D 3C01                    		cmp al, 1
   840 0000064F 740B                    		je jmp_intermediary_X31
   841                                  
   842                                  		;compara coluna da jogada com 2
   843 00000651 3C02                    		cmp al, 2
   844 00000653 741E                    		je jmp_intermediary_X32
   845                                  
   846                                  		;compara coluna da jogada com 3
   847 00000655 3C03                    		cmp al, 3
   848 00000657 7431                    		je jmp_intermediary_X33
   849                                  
   850 00000659 E964FC                  		jmp main_loop
   851                                  	jmp_intermediary_X31:
   852 0000065C 803E[E900]00            			cmp byte[cell31], 0	
   853 00000661 75B0                    			jne jmp_bridge_2_print_occupied_cell
   854                                  
   855 00000663 C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   856 00000668 C606[E900]58            			mov byte[cell31], 'X' ; Seta na celula 31 a jogada 'X'
   857                                  
   858 0000066D E8CF01                  			call x31
   859 00000670 E94DFC                  			jmp main_loop
   860                                  	jmp_intermediary_X32:
   861 00000673 803E[EA00]00            			cmp byte[cell32], 0	
   862 00000678 7599                    			jne jmp_bridge_2_print_occupied_cell
   863                                  
   864 0000067A C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   865 0000067F C606[EA00]58            			mov byte[cell32], 'X' ; Seta na celula 32 a jogada 'X'
   866 00000684 E8DF01                  			call x32
   867 00000687 E936FC                  			jmp main_loop
   868                                  	jmp_intermediary_X33:
   869 0000068A 803E[EB00]00            			cmp byte[cell33], 0	
   870 0000068F 7582                    			jne jmp_bridge_2_print_occupied_cell
   871                                  
   872 00000691 C606[EC00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   873 00000696 C606[EB00]58            			mov byte[cell33], 'X' ; Seta na celula 33 a jogada 'X'
   874                                  
   875 0000069B E8EF01                  			call x33
   876 0000069E E91FFC                  			jmp main_loop
   877                                  ;Desenhar circulos 
   878                                    circle11:
   879 000006A1 9C                      		pushf
   880 000006A2 50                      		push 		ax
   881                                  
   882 000006A3 B8B600                  		mov		ax,182
   883 000006A6 50                      		push		ax
   884 000006A7 B89601                  		mov		ax,406
   885 000006AA 50                      		push		ax
   886 000006AB B82300                  		mov		ax,35
   887 000006AE 50                      		push		ax		
   888 000006AF E80F04                  		call	circle
   889                                  		
   890 000006B2 58                      		pop		ax
   891 000006B3 9D                      		popf
   892 000006B4 C3                      		ret
   893                                  
   894                                    circle12:
   895 000006B5 9C                      		pushf
   896 000006B6 50                      		push ax
   897                                  
   898 000006B7 B83401                  		mov		ax,308
   899 000006BA 50                      		push		ax
   900 000006BB B89601                  		mov		ax,406
   901 000006BE 50                      		push		ax
   902 000006BF B82300                  		mov		ax,35
   903 000006C2 50                      		push		ax
   904 000006C3 E8FB03                  		call	circle
   905                                  
   906 000006C6 58                      		pop ax
   907 000006C7 9D                      		popf
   908 000006C8 C3                      		ret 	
   909                                  
   910                                    circle13:
   911 000006C9 9C                      		pushf
   912 000006CA 50                      		push ax
   913                                  
   914 000006CB B8B201                  		mov		ax,434
   915 000006CE 50                      		push		ax
   916 000006CF B89601                  		mov		ax,406
   917 000006D2 50                      		push		ax
   918 000006D3 B82300                  		mov		ax,35
   919 000006D6 50                      		push		ax
   920 000006D7 E8E703                  		call	circle
   921                                  
   922 000006DA 58                      		pop ax
   923 000006DB 9D                      		popf
   924 000006DC C3                      		ret 
   925                                  	circle21:
   926 000006DD 9C                      		pushf
   927 000006DE 50                      		push ax
   928                                  
   929 000006DF B8B600                  		mov		ax,182
   930 000006E2 50                      		push		ax
   931 000006E3 B81801                  		mov		ax,280
   932 000006E6 50                      		push		ax
   933 000006E7 B82300                  		mov		ax,35
   934 000006EA 50                      		push		ax
   935 000006EB E8D303                  		call	circle
   936                                  
   937 000006EE 58                      		pop ax
   938 000006EF 9D                      		popf
   939 000006F0 C3                      		ret
   940                                  
   941                                    circle22:
   942 000006F1 9C                      		pushf
   943 000006F2 50                      		push ax
   944                                  
   945 000006F3 B83401                  		mov		ax,308
   946 000006F6 50                      		push		ax
   947 000006F7 B81801                  		mov		ax,280
   948 000006FA 50                      		push		ax
   949 000006FB B82300                  		mov		ax,35
   950 000006FE 50                      		push		ax
   951 000006FF E8BF03                  		call	circle
   952                                  
   953 00000702 58                      		pop ax
   954 00000703 9D                      		popf
   955 00000704 C3                      		ret
   956                                  
   957                                    circle23:
   958 00000705 9C                      		pushf
   959 00000706 50                      		push ax
   960                                  
   961 00000707 B8B201                  		mov		ax,434
   962 0000070A 50                      		push		ax
   963 0000070B B81801                  		mov		ax,280
   964 0000070E 50                      		push		ax
   965 0000070F B82300                  		mov		ax,35
   966 00000712 50                      		push		ax
   967 00000713 E8AB03                  		call	circle
   968                                  		
   969 00000716 58                      		pop ax
   970 00000717 9D                      		popf
   971 00000718 C3                      		ret
   972                                  	circle31:
   973 00000719 9C                      		pushf
   974 0000071A 50                      		push ax
   975                                  
   976 0000071B B8B600                  		mov		ax,182
   977 0000071E 50                      		push		ax
   978 0000071F B89900                  		mov		ax,153
   979 00000722 50                      		push		ax
   980 00000723 B82300                  		mov		ax,35
   981 00000726 50                      		push		ax
   982 00000727 E89703                  		call	circle
   983                                  		
   984 0000072A 58                      		pop ax
   985 0000072B 9D                      		popf
   986 0000072C C3                      		ret 
   987                                  
   988                                    circle32:
   989 0000072D 9C                      		pushf
   990 0000072E 50                      		push ax
   991                                  
   992 0000072F B83401                  		mov		ax,308
   993 00000732 50                      		push		ax
   994 00000733 B89900                  		mov		ax,153
   995 00000736 50                      		push		ax
   996 00000737 B82300                  		mov		ax,35
   997 0000073A 50                      		push		ax
   998 0000073B E88303                  		call	circle
   999                                  
  1000 0000073E 58                      		pop ax
  1001 0000073F 9D                      		popf
  1002 00000740 C3                      		ret
  1003                                  
  1004                                    circle33:
  1005 00000741 9C                      		pushf
  1006 00000742 50                      		push ax
  1007                                  
  1008 00000743 B8B201                  		mov		ax,434
  1009 00000746 50                      		push		ax
  1010 00000747 B89900                  		mov		ax,153
  1011 0000074A 50                      		push		ax
  1012 0000074B B82300                  		mov		ax,35
  1013 0000074E 50                      		push		ax
  1014 0000074F E86F03                  		call	circle
  1015                                  		
  1016 00000752 58                      		pop ax
  1017 00000753 9D                      		popf
  1018 00000754 C3                      		ret		
  1019                                  
  1020                                  ;Desenhar x's
  1021                                    x11:
  1022 00000755 B89F00                  		mov		ax,159
  1023 00000758 50                      		push		ax
  1024 00000759 B8AF01                  		mov		ax,431
  1025 0000075C 50                      		push		ax
  1026 0000075D B8CE00                  		mov		ax,206
  1027 00000760 50                      		push		ax
  1028 00000761 B87E01                  		mov		ax,382
  1029 00000764 50                      		push		ax
  1030 00000765 E8F404                  		call		line
  1031                                  		
  1032 00000768 B8CE00                  		mov		ax,206
  1033 0000076B 50                      		push		ax
  1034 0000076C B8AF01                  		mov		ax,431
  1035 0000076F 50                      		push		ax
  1036 00000770 B89F00                  		mov		ax,159
  1037 00000773 50                      		push		ax
  1038 00000774 B87E01                  		mov		ax,382
  1039 00000777 50                      		push		ax
  1040 00000778 E8E104                  		call		line
  1041 0000077B C3                      		ret
  1042                                  
  1043                                    x12:
  1044 0000077C B81D01                  		mov		ax,285
  1045 0000077F 50                      		push		ax
  1046 00000780 B8AF01                  		mov		ax,431
  1047 00000783 50                      		push		ax
  1048 00000784 B84C01                  		mov		ax,332
  1049 00000787 50                      		push		ax
  1050 00000788 B87E01                  		mov		ax,382
  1051 0000078B 50                      		push		ax
  1052 0000078C E8CD04                  		call		line
  1053                                  			
  1054 0000078F B84C01                  		mov		ax,332
  1055 00000792 50                      		push		ax
  1056 00000793 B8AF01                  		mov		ax,431
  1057 00000796 50                      		push		ax
  1058 00000797 B81D01                  		mov		ax,285
  1059 0000079A 50                      		push		ax
  1060 0000079B B87E01                  		mov		ax,382
  1061 0000079E 50                      		push		ax
  1062 0000079F E8BA04                  		call		line
  1063 000007A2 C3                      		ret
  1064                                  
  1065                                    x13:
  1066 000007A3 B89B01                  		mov		ax,411
  1067 000007A6 50                      		push		ax
  1068 000007A7 B8AF01                  		mov		ax,431
  1069 000007AA 50                      		push		ax
  1070 000007AB B8CA01                  		mov		ax,458
  1071 000007AE 50                      		push		ax
  1072 000007AF B87E01                  		mov		ax,382
  1073 000007B2 50                      		push		ax
  1074 000007B3 E8A604                  		call		line
  1075                                  	
  1076 000007B6 B8CA01                  		mov		ax,458
  1077 000007B9 50                      		push		ax
  1078 000007BA B8AF01                  		mov		ax,431
  1079 000007BD 50                      		push		ax
  1080 000007BE B89B01                  		mov		ax,411
  1081 000007C1 50                      		push		ax
  1082 000007C2 B87E01                  		mov		ax,382
  1083 000007C5 50                      		push		ax
  1084 000007C6 E89304                  		call		line
  1085 000007C9 C3                      		ret
  1086                                    
  1087                                  	x21:
  1088 000007CA B89F00                  		mov		ax,159
  1089 000007CD 50                      		push		ax
  1090 000007CE B83001                  		mov		ax,304
  1091 000007D1 50                      		push		ax
  1092 000007D2 B8CE00                  		mov		ax,206
  1093 000007D5 50                      		push		ax
  1094 000007D6 B8FF00                  		mov		ax,255
  1095 000007D9 50                      		push		ax
  1096 000007DA E87F04                  		call		line
  1097                                  
  1098 000007DD B8CE00                  		mov		ax,206
  1099 000007E0 50                      		push		ax
  1100 000007E1 B83001                  		mov		ax,304
  1101 000007E4 50                      		push		ax
  1102 000007E5 B89F00                  		mov		ax,159
  1103 000007E8 50                      		push		ax
  1104 000007E9 B8FF00                  		mov		ax,255
  1105 000007EC 50                      		push		ax
  1106 000007ED E86C04                  		call		line
  1107 000007F0 C3                      		ret
  1108                                    
  1109                                  	x22:
  1110 000007F1 B81D01                  		mov		ax,285
  1111 000007F4 50                      		push		ax
  1112 000007F5 B83001                  		mov		ax,304
  1113 000007F8 50                      		push		ax
  1114 000007F9 B84C01                  		mov		ax,332
  1115 000007FC 50                      		push		ax
  1116 000007FD B8FF00                  		mov		ax,255
  1117 00000800 50                      		push		ax
  1118 00000801 E85804                  		call		line
  1119                                  
  1120 00000804 B84C01                  		mov		ax,332
  1121 00000807 50                      		push		ax
  1122 00000808 B83001                  		mov		ax,304
  1123 0000080B 50                      		push		ax
  1124 0000080C B81D01                  		mov		ax,285
  1125 0000080F 50                      		push		ax
  1126 00000810 B8FF00                  		mov		ax,255
  1127 00000813 50                      		push		ax
  1128 00000814 E84504                  		call		line
  1129 00000817 C3                      		ret
  1130                                    
  1131                                  	x23:
  1132 00000818 B89B01                  		mov		ax,411
  1133 0000081B 50                      		push		ax
  1134 0000081C B83001                  		mov		ax,304
  1135 0000081F 50                      		push		ax
  1136 00000820 B8CA01                  		mov		ax,458
  1137 00000823 50                      		push		ax
  1138 00000824 B8FF00                  		mov		ax,255
  1139 00000827 50                      		push		ax
  1140 00000828 E83104                  		call		line
  1141                                  	
  1142 0000082B B8CA01                  		mov		ax,458
  1143 0000082E 50                      		push		ax
  1144 0000082F B83001                  		mov		ax,304
  1145 00000832 50                      		push		ax
  1146 00000833 B89B01                  		mov		ax,411
  1147 00000836 50                      		push		ax
  1148 00000837 B8FF00                  		mov		ax,255
  1149 0000083A 50                      		push		ax
  1150 0000083B E81E04                  		call		line
  1151 0000083E C3                      		ret
  1152                                    
  1153                                  	x31:	
  1154 0000083F B89F00                  		mov		ax,159
  1155 00000842 50                      		push		ax
  1156 00000843 B88100                  		mov		ax,129
  1157 00000846 50                      		push		ax
  1158 00000847 B8CE00                  		mov		ax,206
  1159 0000084A 50                      		push		ax
  1160 0000084B B8B200                  		mov		ax,178
  1161 0000084E 50                      		push		ax
  1162 0000084F E80A04                  		call		line
  1163                                  		
  1164 00000852 B8CE00                  		mov		ax,206
  1165 00000855 50                      		push		ax
  1166 00000856 B88100                  		mov		ax,129
  1167 00000859 50                      		push		ax
  1168 0000085A B89F00                  		mov		ax,159
  1169 0000085D 50                      		push		ax
  1170 0000085E B8B200                  		mov		ax,178
  1171 00000861 50                      		push		ax
  1172 00000862 E8F703                  		call		line
  1173 00000865 C3                      		ret
  1174                                    
  1175                                  	x32:
  1176 00000866 B81D01                  		mov		ax,285
  1177 00000869 50                      		push		ax
  1178 0000086A B88100                  		mov		ax,129
  1179 0000086D 50                      		push		ax
  1180 0000086E B84C01                  		mov		ax,332
  1181 00000871 50                      		push		ax
  1182 00000872 B8B200                  		mov		ax,178
  1183 00000875 50                      		push		ax
  1184 00000876 E8E303                  		call		line
  1185                                  	
  1186 00000879 B84C01                  		mov		ax,332
  1187 0000087C 50                      		push		ax
  1188 0000087D B88100                  		mov		ax,129
  1189 00000880 50                      		push		ax
  1190 00000881 B81D01                  		mov		ax,285
  1191 00000884 50                      		push		ax
  1192 00000885 B8B200                  		mov		ax,178
  1193 00000888 50                      		push		ax
  1194 00000889 E8D003                  		call		line
  1195 0000088C C3                      		ret
  1196                                    
  1197                                  	x33:	
  1198 0000088D B89B01                  		mov		ax,411
  1199 00000890 50                      		push		ax
  1200 00000891 B88100                  		mov		ax,129
  1201 00000894 50                      		push		ax
  1202 00000895 B8CA01                  		mov		ax,458
  1203 00000898 50                      		push		ax
  1204 00000899 B8B200                  		mov		ax,178
  1205 0000089C 50                      		push		ax
  1206 0000089D E8BC03                  		call		line
  1207                                  	
  1208 000008A0 B8CA01                  		mov		ax,458
  1209 000008A3 50                      		push		ax
  1210 000008A4 B88100                  		mov		ax,129
  1211 000008A7 50                      		push		ax
  1212 000008A8 B89B01                  		mov		ax,411
  1213 000008AB 50                      		push		ax
  1214 000008AC B8B200                  		mov		ax,178
  1215 000008AF 50                      		push		ax
  1216 000008B0 E8A903                  		call		line
  1217 000008B3 C3                      		ret
  1218                                  
  1219                                  clear_terminal:
  1220 000008B4 53                      	push	bx
  1221 000008B5 50                      	push	ax
  1222                                  
  1223 000008B6 BB0000                  	mov 			bx, 0
  1224 000008B9 B90400                  	mov     	cx, 4			;n�mero de caracteres
  1225 000008BC B608                    	mov 			dh, 8 ;linha 0-29
  1226 000008BE B201                    	mov 			dl, 1 ;coluna 0-79
  1227 000008C0 C606[0000]0F            	mov		byte[cor],branco_intenso
  1228                                  		
  1229                                  	lclear_terminal:
  1230 000008C5 E89D01                  		call	cursor
  1231 000008C8 8A87[7300]              		mov     al,[bx+string_empty_terminal]
  1232 000008CC E8AD01                  		call	caracter
  1233 000008CF 43                      		inc     bx			;proximo caracter
  1234 000008D0 FEC2                    		inc			dl			;avanca a coluna
  1235 000008D2 E2F1                    		loop    lclear_terminal
  1236                                  
  1237 000008D4 58                      	pop	ax
  1238 000008D5 5B                      	pop bx
  1239 000008D6 C3                      	ret
  1240                                  		
  1241                                  check_if_anyone_won:
  1242                                  	; Checa para a linha 1
  1243 000008D7 803E[E300]43            		cmp byte[cell11], 'C' ;Verifica se cell11 é igual a C
  1244 000008DC 7411                    		je step_11
  1245                                  
  1246                                  		return_12:
  1247                                  
  1248 000008DE 803E[E400]43            		cmp byte[cell12], 'C'; Verifica se a cell12 é igual a C
  1249 000008E3 7459                    		je step_12
  1250                                  
  1251                                  		return_13:
  1252                                  
  1253 000008E5 803E[E500]43            		cmp byte[cell13], 'C'; Verifica se a cell13 é igual a C
  1254 000008EA 7469                    		je step_13  	
  1255                                  
  1256 000008EC E9D1F9                  		jmp main_loop
  1257                                  
  1258                                  		step_11:
  1259 000008EF 803E[E400]43            			cmp byte[cell12], 'C'; Verifica se cell 12 é igual a C
  1260 000008F4 7411                    			je step_11_12
  1261                                  			return_11_12:
  1262                                  
  1263 000008F6 803E[E600]43            			cmp byte[cell21], 'C'; Verifica se cell 21 é igual a C
  1264 000008FB 7427                    			je step_11_21
  1265                                  			return_11_21:
  1266                                  
  1267 000008FD 803E[E700]43            			cmp byte[cell22], 'C'; Verifica se a cell 22 é igual a C
  1268 00000902 742D                    			je step_11_22
  1269                                  			return_11_22:
  1270                                  
  1271 00000904 E9D7FF                  			jmp return_12
  1272                                  
  1273                                  			step_11_12:
  1274 00000907 803E[E500]43            				cmp byte[cell13], 'C'			; Verifica se cell 13 também é igual a C
  1275 0000090C 7403                    				je step_11_12_13					; Se for, chama a última etapa dessa sequencia
  1276 0000090E E9AFF9                  				jmp main_loop;
  1277                                  
  1278                                  				step_11_12_13: 
  1279 00000911 C606[0000]09            					mov	 byte[cor],azul_claro 
  1280 00000916 E86A00                  					call SVL1													;Imprime a linha 1
  1281 00000919 C606[ED00]43            					mov byte[victorious_player], 'C'	;Defini como vitorioso o jogador 'C'
  1282 0000091E E82501                  					call print_victory_for_player_C
  1283 00000921 E99CF9                  					jmp main_loop;										
  1284                                  
  1285                                  			step_11_21:
  1286 00000924 803E[E900]43            				cmp byte[cell31], 'C'; Verifica se a cell 31 também é igual a C
  1287 00000929 7403                    				je jmp_bridge_SVC1   ; Se for, imprime a coluna 1
  1288 0000092B E992F9                  				jmp main_loop;
  1289                                  				jmp_bridge_SVC1:
  1290 0000092E E89800                  					call SVC1
  1291                                  			step_11_22:
  1292 00000931 803E[EB00]43            				cmp byte[cell33], 'C'; Verifica se a cell 33 também é igual a C
  1293 00000936 7403                    				je jmp_bridge_SVD1 				; Se for, imprime a primeira diagonal
  1294 00000938 E985F9                  				jmp main_loop;
  1295                                  			
  1296                                  				jmp_bridge_SVD1:
  1297 0000093B E8D600                  					call SVD1
  1298                                  		step_12:
  1299 0000093E 803E[E700]43            			cmp byte[cell22], 'C'; Verifica se cell22 é igual a C
  1300 00000943 7403                    			je step_12_22
  1301 00000945 E99DFF                  			jmp return_13
  1302                                  
  1303                                  			step_12_22:
  1304 00000948 803E[EA00]43            				cmp byte[cell32], 'C' ;Verifica se a cell32 tammbém é a igual 'C'
  1305 0000094D 7403                    				je jmp_bridge_SVC2         ;Se for, imprime a coluna 2
  1306 0000094F E96EF9                  				jmp main_loop;
  1307                                  
  1308                                  				jmp_bridge_SVC2:
  1309 00000952 E88D00                  					call SVC2
  1310                                  		step_13:
  1311 00000955 803E[E800]43            			cmp byte[cell23], 'C'; Verifica se cell23 é igual a C
  1312 0000095A 740A                    			je step_13_23
  1313                                  
  1314 0000095C 803E[E700]43            			cmp byte[cell22], 'C'; Verifica se a cell22 é igual a C
  1315 00000961 7410                    			je step_13_22  
  1316                                  
  1317 00000963 E91A00                  			jmp return_3
  1318                                  
  1319                                  			step_13_23:
  1320 00000966 803E[EB00]43            				cmp byte[cell33], 'C' ;Verifica se a cell33 tammbém é a igual 'C'
  1321 0000096B 7403                    				je  jmp_bridge_SVC3         ;Se for, imprime a coluna 3
  1322 0000096D E950F9                  				jmp main_loop
  1323                                  
  1324                                  				jmp_bridge_SVC3:
  1325 00000970 E88800                  					call SVC3				
  1326                                  			step_13_22:
  1327 00000973 803E[E900]43            				cmp byte[cell31], 'C' ;Verifica se a cell31 tammbém é a igual 'C'
  1328 00000978 7403                    				je  jmp_bridge_SVD2         ;Se for, imprime a diagonal 2
  1329 0000097A E943F9                  				jmp main_loop
  1330                                  				
  1331                                  				jmp_bridge_SVD2:
  1332 0000097D E8AD00                  					call SVD2	
  1333                                  	;Checa para a linha 2
  1334                                  		return_3:
  1335                                  
  1336 00000980 E93DF9                  	jmp main_loop 
  1337                                  	; CHECA PARA X
  1338                                  ;Desenhar linha da seguencia vencedora
  1339                                    ;Sequencia linha 1
  1340                                      SVL1:
  1341 00000983 B87700                        mov		ax,119
  1342 00000986 50                            push		ax
  1343 00000987 B89601                        mov		ax,406
  1344 0000098A 50                            push		ax
  1345 0000098B B8F201                        mov		ax,498
  1346 0000098E 50                            push		ax
  1347 0000098F B89601                        mov		ax,406
  1348 00000992 50                            push		ax
  1349 00000993 E8C602                        call		line
  1350 00000996 C3                      			ret 
  1351                                    ;Sequencia linha 2
  1352                                      SVL2:
  1353 00000997 C606[0000]09                    mov		byte[cor],azul_claro	
  1354 0000099C B87700                          mov		ax,119
  1355 0000099F 50                              push		ax
  1356 000009A0 B81801                          mov		ax,280
  1357 000009A3 50                              push		ax
  1358 000009A4 B8F201                          mov		ax,498
  1359 000009A7 50                              push		ax
  1360 000009A8 B81801                          mov		ax,280
  1361 000009AB 50                              push		ax
  1362 000009AC E8AD02                          call		line
  1363 000009AF C3                      				ret
  1364                                    ;Sequencia linha 3
  1365                                      SVL3:
  1366 000009B0 C606[0000]09                    mov		byte[cor],azul_claro	
  1367 000009B5 B87700                          mov		ax,119
  1368 000009B8 50                              push		ax
  1369 000009B9 B89900                          mov		ax,153
  1370 000009BC 50                              push		ax
  1371 000009BD B8F201                          mov		ax,498
  1372 000009C0 50                              push		ax
  1373 000009C1 B89900                          mov		ax,153
  1374 000009C4 50                              push		ax
  1375 000009C5 E89402                          call		line
  1376 000009C8 C3                      				ret
  1377                                    ;Sequencia coluna 1
  1378                                  	 SVC1:
  1379 000009C9 C606[0000]09                  mov		byte[cor],azul_claro	
  1380 000009CE B8B600                        mov		ax,182
  1381 000009D1 50                            push		ax
  1382 000009D2 B8D501                        mov		ax,469
  1383 000009D5 50                            push		ax
  1384 000009D6 B8B600                        mov		ax,182
  1385 000009D9 50                            push		ax
  1386 000009DA B85A00                        mov		ax,90
  1387 000009DD 50                            push		ax
  1388 000009DE E87B02                        call		line
  1389 000009E1 C3                      			ret
  1390                                  	;Sequencia coluna 2
  1391                                  		SVC2:
  1392 000009E2 C606[0000]09                  mov		byte[cor],azul_claro	
  1393 000009E7 B83401                        mov		ax,308
  1394 000009EA 50                            push		ax
  1395 000009EB B8D501                        mov		ax,469
  1396 000009EE 50                            push		ax
  1397 000009EF B83401                        mov		ax,308
  1398 000009F2 50                            push		ax
  1399 000009F3 B85A00                        mov		ax,90
  1400 000009F6 50                            push		ax
  1401 000009F7 E86202                        call		line
  1402 000009FA C3                      			ret
  1403                                    ;Sequencia coluna 3
  1404                                  		SVC3:
  1405 000009FB C606[0000]09            				mov		byte[cor],azul_claro	
  1406 00000A00 B8B201                  				mov		ax,434
  1407 00000A03 50                      				push		ax
  1408 00000A04 B8D501                  				mov		ax,469
  1409 00000A07 50                      				push		ax
  1410 00000A08 B8B201                  				mov		ax,434
  1411 00000A0B 50                      				push		ax
  1412 00000A0C B85A00                  				mov		ax,90
  1413 00000A0F 50                      				push		ax
  1414 00000A10 E84902                  				call		line
  1415 00000A13 C3                      				ret
  1416                                    ;Sequencia diagonal 1
  1417                                  		SVD1:
  1418 00000A14 C606[0000]09            			mov		byte[cor],azul_claro	
  1419 00000A19 B87700                  			mov		ax,119
  1420 00000A1C 50                      			push		ax
  1421 00000A1D B8D501                  			mov		ax,469
  1422 00000A20 50                      			push		ax
  1423 00000A21 B8F101                  			mov		ax,497
  1424 00000A24 50                      			push		ax
  1425 00000A25 B85B00                  			mov		ax,91
  1426 00000A28 50                      			push		ax
  1427 00000A29 E83002                  			call		line
  1428 00000A2C C3                      			ret
  1429                                    ;Sequencia diagonal 2
  1430                                  		SVD2:
  1431 00000A2D C606[0000]09            			mov		byte[cor],azul_claro	
  1432 00000A32 B8F101                  			mov		ax,497
  1433 00000A35 50                      			push		ax
  1434 00000A36 B8D501                  			mov		ax,469
  1435 00000A39 50                      			push		ax
  1436 00000A3A B87700                  			mov		ax,119
  1437 00000A3D 50                      			push		ax
  1438 00000A3E B85B00                  			mov		ax,91
  1439 00000A41 50                      			push		ax
  1440 00000A42 E81702                  			call		line
  1441 00000A45 C3                      			ret
  1442                                  	;Imprime jogadores que venceu
  1443                                  		print_victory_for_player_C:
  1444 00000A46 BB0000                  			mov 			bx, 0
  1445 00000A49 B91300                  			mov			  cx, 19 								;Carrega o tamanho da string em CX
  1446 00000A4C B61C                    			mov     	dh, 28								;linha 0-29
  1447 00000A4E B215                    			mov     	dl, 21								;coluna 0-79
  1448 00000A50 C606[0000]02            			mov		byte[cor],verde
  1449                                  			
  1450                                  			loop_print_victory_for_player_C:
  1451 00000A55 E80D00                  				call		cursor
  1452 00000A58 8A87[BE00]              				mov     al,	[bx+string_player_C_victory]
  1453 00000A5C E81D00                  				call		caracter
  1454 00000A5F 43                      				inc     bx			;proximo caracter
  1455 00000A60 FEC2                    				inc			dl			;avanca a coluna
  1456                                  				
  1457 00000A62 E2F1                    			loop    loop_print_victory_for_player_C
  1458 00000A64 C3                      			ret
  1459                                  	
  1460                                  
  1461                                  
  1462                                  
  1463                                  ;***************************************************************************
  1464                                  ;
  1465                                  ;   fun��o cursor
  1466                                  ;
  1467                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
  1468                                  cursor:
  1469 00000A65 9C                      		pushf
  1470 00000A66 50                      		push 		ax
  1471 00000A67 53                      		push 		bx
  1472 00000A68 51                      		push		cx
  1473 00000A69 52                      		push		dx
  1474 00000A6A 56                      		push		si
  1475 00000A6B 57                      		push		di
  1476 00000A6C 55                      		push		bp
  1477 00000A6D B402                    		mov     	ah,2
  1478 00000A6F B700                    		mov     	bh,0
  1479 00000A71 CD10                    		int     	10h
  1480 00000A73 5D                      		pop		bp
  1481 00000A74 5F                      		pop		di
  1482 00000A75 5E                      		pop		si
  1483 00000A76 5A                      		pop		dx
  1484 00000A77 59                      		pop		cx
  1485 00000A78 5B                      		pop		bx
  1486 00000A79 58                      		pop		ax
  1487 00000A7A 9D                      		popf
  1488 00000A7B C3                      		ret
  1489                                  ;
  1490                                  ;escreve os nomes dos campos de comando e mensagem
  1491                                  
  1492                                  ;escreve numeros das cells do jogo da velha
  1493                                  _____________________________________________________________________________
  1494                                  ;
  1495                                  ;   fun��o caracter escrito na posi��o do cursor
  1496                                  ;
  1497                                  ; al= caracter a ser escrito
  1498                                  ; cor definida na variavel cor
  1499                                  caracter:
  1500 00000A7C 9C                      		pushf
  1501 00000A7D 50                      		push 		ax
  1502 00000A7E 53                      		push 		bx
  1503 00000A7F 51                      		push		cx
  1504 00000A80 52                      		push		dx
  1505 00000A81 56                      		push		si
  1506 00000A82 57                      		push		di
  1507 00000A83 55                      		push		bp
  1508 00000A84 B409                        		mov     	ah,9
  1509 00000A86 B700                        		mov     	bh,0
  1510 00000A88 B90100                      		mov     	cx,1
  1511 00000A8B 8A1E[0000]                 		mov     	bl,[cor]
  1512 00000A8F CD10                        		int     	10h
  1513 00000A91 5D                      		pop		bp
  1514 00000A92 5F                      		pop		di
  1515 00000A93 5E                      		pop		si
  1516 00000A94 5A                      		pop		dx
  1517 00000A95 59                      		pop		cx
  1518 00000A96 5B                      		pop		bx
  1519 00000A97 58                      		pop		ax
  1520 00000A98 9D                      		popf
  1521 00000A99 C3                      		ret
  1522                                  ;_____________________________________________________________________________
  1523                                  ;
  1524                                  ;   fun��o plot_xy
  1525                                  ;
  1526                                  ; push x; push y; call plot_xy;  (x<639, y<479)
  1527                                  ; cor definida na variavel cor
  1528                                  plot_xy:
  1529 00000A9A 55                      		push		bp
  1530 00000A9B 89E5                    		mov		bp,sp
  1531 00000A9D 9C                      		pushf
  1532 00000A9E 50                      		push 		ax
  1533 00000A9F 53                      		push 		bx
  1534 00000AA0 51                      		push		cx
  1535 00000AA1 52                      		push		dx
  1536 00000AA2 56                      		push		si
  1537 00000AA3 57                      		push		di
  1538 00000AA4 B40C                    	    mov     	ah,0ch
  1539 00000AA6 A0[0000]                	    mov     	al,[cor]
  1540 00000AA9 B700                    	    mov     	bh,0
  1541 00000AAB BADF01                  	    mov     	dx,479
  1542 00000AAE 2B5604                  		sub		dx,[bp+4]
  1543 00000AB1 8B4E06                  	    mov     	cx,[bp+6]
  1544 00000AB4 CD10                    	    int     	10h
  1545 00000AB6 5F                      		pop		di
  1546 00000AB7 5E                      		pop		si
  1547 00000AB8 5A                      		pop		dx
  1548 00000AB9 59                      		pop		cx
  1549 00000ABA 5B                      		pop		bx
  1550 00000ABB 58                      		pop		ax
  1551 00000ABC 9D                      		popf
  1552 00000ABD 5D                      		pop		bp
  1553 00000ABE C20400                  		ret		4
  1554                                  ;_____________________________________________________________________________
  1555                                  ;    fun��o circle
  1556                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1557                                  ; cor definida na variavel cor
  1558                                  circle:
  1559 00000AC1 55                      	push 	bp
  1560 00000AC2 89E5                    	mov	 	bp,sp
  1561 00000AC4 9C                      	pushf                        ;coloca os flags na pilha
  1562 00000AC5 50                      	push 	ax
  1563 00000AC6 53                      	push 	bx
  1564 00000AC7 51                      	push	cx
  1565 00000AC8 52                      	push	dx
  1566 00000AC9 56                      	push	si
  1567 00000ACA 57                      	push	di
  1568                                  	
  1569 00000ACB 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1570 00000ACE 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1571 00000AD1 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1572                                  	
  1573 00000AD4 89DA                    	mov 	dx,bx	
  1574 00000AD6 01CA                    	add		dx,cx       ;ponto extremo superior
  1575 00000AD8 50                      	push    ax			
  1576 00000AD9 52                      	push	dx
  1577 00000ADA E8BDFF                  	call plot_xy
  1578                                  	
  1579 00000ADD 89DA                    	mov		dx,bx
  1580 00000ADF 29CA                    	sub		dx,cx       ;ponto extremo inferior
  1581 00000AE1 50                      	push    ax			
  1582 00000AE2 52                      	push	dx
  1583 00000AE3 E8B4FF                  	call plot_xy
  1584                                  	
  1585 00000AE6 89C2                    	mov 	dx,ax	
  1586 00000AE8 01CA                    	add		dx,cx       ;ponto extremo direita
  1587 00000AEA 52                      	push    dx			
  1588 00000AEB 53                      	push	bx
  1589 00000AEC E8ABFF                  	call plot_xy
  1590                                  	
  1591 00000AEF 89C2                    	mov		dx,ax
  1592 00000AF1 29CA                    	sub		dx,cx       ;ponto extremo esquerda
  1593 00000AF3 52                      	push    dx			
  1594 00000AF4 53                      	push	bx
  1595 00000AF5 E8A2FF                  	call plot_xy
  1596                                  		
  1597 00000AF8 89CF                    	mov		di,cx
  1598 00000AFA 81EF0100                	sub		di,1	 ;di=r-1
  1599 00000AFE BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1600                                  	
  1601                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1602                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1603                                  ;valores positivos para d
  1604                                  
  1605                                  stay:				;loop
  1606 00000B01 89FE                    	mov		si,di
  1607 00000B03 81FE0000                	cmp		si,0
  1608 00000B07 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1609 00000B09 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1610 00000B0B D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1611 00000B0D 81C60300                	add		si,3
  1612 00000B11 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1613 00000B13 42                      	inc		dx		;incrementa dx
  1614 00000B14 E90E00                  	jmp		plotar
  1615                                  inf:	
  1616 00000B17 89D6                    	mov		si,dx
  1617 00000B19 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1618 00000B1B D1E6                    	sal		si,1
  1619 00000B1D 81C60500                	add		si,5
  1620 00000B21 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1621 00000B23 42                      	inc		dx		;incrementa x (dx)
  1622 00000B24 49                      	dec		cx		;decrementa y (cx)
  1623                                  	
  1624                                  plotar:	
  1625 00000B25 89D6                    	mov		si,dx
  1626 00000B27 01C6                    	add		si,ax
  1627 00000B29 56                      	push    si			;coloca a abcisa x+xc na pilha
  1628 00000B2A 89CE                    	mov		si,cx
  1629 00000B2C 01DE                    	add		si,bx
  1630 00000B2E 56                      	push    si			;coloca a ordenada y+yc na pilha
  1631 00000B2F E868FF                  	call plot_xy		;toma conta do segundo octante
  1632 00000B32 89C6                    	mov		si,ax
  1633 00000B34 01D6                    	add		si,dx
  1634 00000B36 56                      	push    si			;coloca a abcisa xc+x na pilha
  1635 00000B37 89DE                    	mov		si,bx
  1636 00000B39 29CE                    	sub		si,cx
  1637 00000B3B 56                      	push    si			;coloca a ordenada yc-y na pilha
  1638 00000B3C E85BFF                  	call plot_xy		;toma conta do s�timo octante
  1639 00000B3F 89C6                    	mov		si,ax
  1640 00000B41 01CE                    	add		si,cx
  1641 00000B43 56                      	push    si			;coloca a abcisa xc+y na pilha
  1642 00000B44 89DE                    	mov		si,bx
  1643 00000B46 01D6                    	add		si,dx
  1644 00000B48 56                      	push    si			;coloca a ordenada yc+x na pilha
  1645 00000B49 E84EFF                  	call plot_xy		;toma conta do segundo octante
  1646 00000B4C 89C6                    	mov		si,ax
  1647 00000B4E 01CE                    	add		si,cx
  1648 00000B50 56                      	push    si			;coloca a abcisa xc+y na pilha
  1649 00000B51 89DE                    	mov		si,bx
  1650 00000B53 29D6                    	sub		si,dx
  1651 00000B55 56                      	push    si			;coloca a ordenada yc-x na pilha
  1652 00000B56 E841FF                  	call plot_xy		;toma conta do oitavo octante
  1653 00000B59 89C6                    	mov		si,ax
  1654 00000B5B 29D6                    	sub		si,dx
  1655 00000B5D 56                      	push    si			;coloca a abcisa xc-x na pilha
  1656 00000B5E 89DE                    	mov		si,bx
  1657 00000B60 01CE                    	add		si,cx
  1658 00000B62 56                      	push    si			;coloca a ordenada yc+y na pilha
  1659 00000B63 E834FF                  	call plot_xy		;toma conta do terceiro octante
  1660 00000B66 89C6                    	mov		si,ax
  1661 00000B68 29D6                    	sub		si,dx
  1662 00000B6A 56                      	push    si			;coloca a abcisa xc-x na pilha
  1663 00000B6B 89DE                    	mov		si,bx
  1664 00000B6D 29CE                    	sub		si,cx
  1665 00000B6F 56                      	push    si			;coloca a ordenada yc-y na pilha
  1666 00000B70 E827FF                  	call plot_xy		;toma conta do sexto octante
  1667 00000B73 89C6                    	mov		si,ax
  1668 00000B75 29CE                    	sub		si,cx
  1669 00000B77 56                      	push    si			;coloca a abcisa xc-y na pilha
  1670 00000B78 89DE                    	mov		si,bx
  1671 00000B7A 29D6                    	sub		si,dx
  1672 00000B7C 56                      	push    si			;coloca a ordenada yc-x na pilha
  1673 00000B7D E81AFF                  	call plot_xy		;toma conta do quinto octante
  1674 00000B80 89C6                    	mov		si,ax
  1675 00000B82 29CE                    	sub		si,cx
  1676 00000B84 56                      	push    si			;coloca a abcisa xc-y na pilha
  1677 00000B85 89DE                    	mov		si,bx
  1678 00000B87 01D6                    	add		si,dx
  1679 00000B89 56                      	push    si			;coloca a ordenada yc-x na pilha
  1680 00000B8A E80DFF                  	call plot_xy		;toma conta do quarto octante
  1681                                  	
  1682 00000B8D 39D1                    	cmp		cx,dx
  1683 00000B8F 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1684 00000B91 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  1685                                  	
  1686                                  	
  1687                                  fim_circle:
  1688 00000B94 5F                      	pop		di
  1689 00000B95 5E                      	pop		si
  1690 00000B96 5A                      	pop		dx
  1691 00000B97 59                      	pop		cx
  1692 00000B98 5B                      	pop		bx
  1693 00000B99 58                      	pop		ax
  1694 00000B9A 9D                      	popf
  1695 00000B9B 5D                      	pop		bp
  1696 00000B9C C20600                  	ret		6
  1697                                  ;-----------------------------------------------------------------------------
  1698                                  ;    fun��o full_circle
  1699                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1700                                  ; cor definida na variavel cor
  1701                                  
  1702                                  full_circle:
  1703 00000B9F 55                      	push 	bp
  1704 00000BA0 89E5                    	mov	 	bp,sp
  1705 00000BA2 9C                      	pushf                        ;coloca os flags na pilha
  1706 00000BA3 50                      	push 	ax
  1707 00000BA4 53                      	push 	bx
  1708 00000BA5 51                      	push	cx
  1709 00000BA6 52                      	push	dx
  1710 00000BA7 56                      	push	si
  1711 00000BA8 57                      	push	di
  1712                                  
  1713 00000BA9 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1714 00000BAC 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1715 00000BAF 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1716                                  	
  1717 00000BB2 89DE                    	mov		si,bx
  1718 00000BB4 29CE                    	sub		si,cx
  1719 00000BB6 50                      	push    ax			;coloca xc na pilha			
  1720 00000BB7 56                      	push	si			;coloca yc-r na pilha
  1721 00000BB8 89DE                    	mov		si,bx
  1722 00000BBA 01CE                    	add		si,cx
  1723 00000BBC 50                      	push	ax		;coloca xc na pilha
  1724 00000BBD 56                      	push	si		;coloca yc+r na pilha
  1725 00000BBE E89B00                  	call line
  1726                                  	
  1727                                  		
  1728 00000BC1 89CF                    	mov		di,cx
  1729 00000BC3 81EF0100                	sub		di,1	 ;di=r-1
  1730 00000BC7 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1731                                  	
  1732                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1733                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1734                                  ;valores positivos para d
  1735                                  
  1736                                  stay_full:				;loop
  1737 00000BCA 89FE                    	mov		si,di
  1738 00000BCC 81FE0000                	cmp		si,0
  1739 00000BD0 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  1740 00000BD2 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  1741 00000BD4 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  1742 00000BD6 81C60300                	add		si,3
  1743 00000BDA 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  1744 00000BDC 42                      	inc		dx		;incrementa dx
  1745 00000BDD E90E00                  	jmp		plotar_full
  1746                                  inf_full:	
  1747 00000BE0 89D6                    	mov		si,dx
  1748 00000BE2 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  1749 00000BE4 D1E6                    	sal		si,1
  1750 00000BE6 81C60500                	add		si,5
  1751 00000BEA 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  1752 00000BEC 42                      	inc		dx		;incrementa x (dx)
  1753 00000BED 49                      	dec		cx		;decrementa y (cx)
  1754                                  	
  1755                                  plotar_full:	
  1756 00000BEE 89C6                    	mov		si,ax
  1757 00000BF0 01CE                    	add		si,cx
  1758 00000BF2 56                      	push	si		;coloca a abcisa y+xc na pilha			
  1759 00000BF3 89DE                    	mov		si,bx
  1760 00000BF5 29D6                    	sub		si,dx
  1761 00000BF7 56                      	push    si		;coloca a ordenada yc-x na pilha
  1762 00000BF8 89C6                    	mov		si,ax
  1763 00000BFA 01CE                    	add		si,cx
  1764 00000BFC 56                      	push	si		;coloca a abcisa y+xc na pilha	
  1765 00000BFD 89DE                    	mov		si,bx
  1766 00000BFF 01D6                    	add		si,dx
  1767 00000C01 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1768 00000C02 E85700                  	call 	line
  1769                                  	
  1770 00000C05 89C6                    	mov		si,ax
  1771 00000C07 01D6                    	add		si,dx
  1772 00000C09 56                      	push	si		;coloca a abcisa xc+x na pilha			
  1773 00000C0A 89DE                    	mov		si,bx
  1774 00000C0C 29CE                    	sub		si,cx
  1775 00000C0E 56                      	push    si		;coloca a ordenada yc-y na pilha
  1776 00000C0F 89C6                    	mov		si,ax
  1777 00000C11 01D6                    	add		si,dx
  1778 00000C13 56                      	push	si		;coloca a abcisa xc+x na pilha	
  1779 00000C14 89DE                    	mov		si,bx
  1780 00000C16 01CE                    	add		si,cx
  1781 00000C18 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1782 00000C19 E84000                  	call	line
  1783                                  	
  1784 00000C1C 89C6                    	mov		si,ax
  1785 00000C1E 29D6                    	sub		si,dx
  1786 00000C20 56                      	push	si		;coloca a abcisa xc-x na pilha			
  1787 00000C21 89DE                    	mov		si,bx
  1788 00000C23 29CE                    	sub		si,cx
  1789 00000C25 56                      	push    si		;coloca a ordenada yc-y na pilha
  1790 00000C26 89C6                    	mov		si,ax
  1791 00000C28 29D6                    	sub		si,dx
  1792 00000C2A 56                      	push	si		;coloca a abcisa xc-x na pilha	
  1793 00000C2B 89DE                    	mov		si,bx
  1794 00000C2D 01CE                    	add		si,cx
  1795 00000C2F 56                      	push    si		;coloca a ordenada yc+y na pilha	
  1796 00000C30 E82900                  	call	line
  1797                                  	
  1798 00000C33 89C6                    	mov		si,ax
  1799 00000C35 29CE                    	sub		si,cx
  1800 00000C37 56                      	push	si		;coloca a abcisa xc-y na pilha			
  1801 00000C38 89DE                    	mov		si,bx
  1802 00000C3A 29D6                    	sub		si,dx
  1803 00000C3C 56                      	push    si		;coloca a ordenada yc-x na pilha
  1804 00000C3D 89C6                    	mov		si,ax
  1805 00000C3F 29CE                    	sub		si,cx
  1806 00000C41 56                      	push	si		;coloca a abcisa xc-y na pilha	
  1807 00000C42 89DE                    	mov		si,bx
  1808 00000C44 01D6                    	add		si,dx
  1809 00000C46 56                      	push    si		;coloca a ordenada yc+x na pilha	
  1810 00000C47 E81200                  	call	line
  1811                                  	
  1812 00000C4A 39D1                    	cmp		cx,dx
  1813 00000C4C 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  1814 00000C4E E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  1815                                  	
  1816                                  	
  1817                                  fim_full_circle:
  1818 00000C51 5F                      	pop		di
  1819 00000C52 5E                      	pop		si
  1820 00000C53 5A                      	pop		dx
  1821 00000C54 59                      	pop		cx
  1822 00000C55 5B                      	pop		bx
  1823 00000C56 58                      	pop		ax
  1824 00000C57 9D                      	popf
  1825 00000C58 5D                      	pop		bp
  1826 00000C59 C20600                  	ret		6
  1827                                  ;-----------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;   fun��o line
  1830                                  ;
  1831                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  1832                                  line:
  1833 00000C5C 55                      		push		bp
  1834 00000C5D 89E5                    		mov		bp,sp
  1835 00000C5F 9C                      		pushf                        ;coloca os flags na pilha
  1836 00000C60 50                      		push 		ax
  1837 00000C61 53                      		push 		bx
  1838 00000C62 51                      		push		cx
  1839 00000C63 52                      		push		dx
  1840 00000C64 56                      		push		si
  1841 00000C65 57                      		push		di
  1842 00000C66 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  1843 00000C69 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  1844 00000C6C 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  1845 00000C6F 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  1846 00000C72 39C8                    		cmp		ax,cx
  1847 00000C74 7408                    		je		line2
  1848 00000C76 721C                    		jb		line1
  1849 00000C78 91                      		xchg		ax,cx
  1850 00000C79 87DA                    		xchg		bx,dx
  1851 00000C7B E91600                  		jmp		line1
  1852                                  line2:		; deltax=0
  1853 00000C7E 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  1854 00000C80 7202                    		jb		line3
  1855 00000C82 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  1856                                  line3:	; dx > bx
  1857 00000C84 50                      		push		ax
  1858 00000C85 53                      		push		bx
  1859 00000C86 E811FE                  		call 		plot_xy
  1860 00000C89 39D3                    		cmp		bx,dx
  1861 00000C8B 7503                    		jne		line31
  1862 00000C8D E9C600                  		jmp		fim_line
  1863 00000C90 43                      line31:		inc		bx
  1864 00000C91 E9F0FF                  		jmp		line3
  1865                                  ;deltax <>0
  1866                                  line1:
  1867                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  1868                                  	; cx > ax
  1869 00000C94 51                      		push		cx
  1870 00000C95 29C1                    		sub		cx,ax
  1871 00000C97 890E[0600]              		mov		[deltax],cx
  1872 00000C9B 59                      		pop		cx
  1873 00000C9C 52                      		push		dx
  1874 00000C9D 29DA                    		sub		dx,bx
  1875 00000C9F 7702                    		ja		line32
  1876 00000CA1 F7DA                    		neg		dx
  1877                                  line32:		
  1878 00000CA3 8916[0800]              		mov		[deltay],dx
  1879 00000CA7 5A                      		pop		dx
  1880                                  
  1881 00000CA8 50                      		push		ax
  1882 00000CA9 A1[0600]                		mov		ax,[deltax]
  1883 00000CAC 3B06[0800]              		cmp		ax,[deltay]
  1884 00000CB0 58                      		pop		ax
  1885 00000CB1 724D                    		jb		line5
  1886                                  
  1887                                  	; cx > ax e deltax>deltay
  1888 00000CB3 51                      		push		cx
  1889 00000CB4 29C1                    		sub		cx,ax
  1890 00000CB6 890E[0600]              		mov		[deltax],cx
  1891 00000CBA 59                      		pop		cx
  1892 00000CBB 52                      		push		dx
  1893 00000CBC 29DA                    		sub		dx,bx
  1894 00000CBE 8916[0800]              		mov		[deltay],dx
  1895 00000CC2 5A                      		pop		dx
  1896                                  
  1897 00000CC3 89C6                    		mov		si,ax
  1898                                  line4:
  1899 00000CC5 50                      		push		ax
  1900 00000CC6 52                      		push		dx
  1901 00000CC7 56                      		push		si
  1902 00000CC8 29C6                    		sub		si,ax	;(x-x1)
  1903 00000CCA A1[0800]                		mov		ax,[deltay]
  1904 00000CCD F7EE                    		imul		si
  1905 00000CCF 8B36[0600]              		mov		si,[deltax]		;arredondar
  1906 00000CD3 D1EE                    		shr		si,1
  1907                                  ; se numerador (DX)>0 soma se <0 subtrai
  1908 00000CD5 81FA0000                		cmp		dx,0
  1909 00000CD9 7C09                    		jl		ar1
  1910 00000CDB 01F0                    		add		ax,si
  1911 00000CDD 81D20000                		adc		dx,0
  1912 00000CE1 E90600                  		jmp		arc1
  1913 00000CE4 29F0                    ar1:		sub		ax,si
  1914 00000CE6 81DA0000                		sbb		dx,0
  1915                                  arc1:
  1916 00000CEA F73E[0600]              		idiv		word [deltax]
  1917 00000CEE 01D8                    		add		ax,bx
  1918 00000CF0 5E                      		pop		si
  1919 00000CF1 56                      		push		si
  1920 00000CF2 50                      		push		ax
  1921 00000CF3 E8A4FD                  		call		plot_xy
  1922 00000CF6 5A                      		pop		dx
  1923 00000CF7 58                      		pop		ax
  1924 00000CF8 39CE                    		cmp		si,cx
  1925 00000CFA 745A                    		je		fim_line
  1926 00000CFC 46                      		inc		si
  1927 00000CFD E9C5FF                  		jmp		line4
  1928                                  
  1929 00000D00 39D3                    line5:		cmp		bx,dx
  1930 00000D02 7203                    		jb 		line7
  1931 00000D04 91                      		xchg		ax,cx
  1932 00000D05 87DA                    		xchg		bx,dx
  1933                                  line7:
  1934 00000D07 51                      		push		cx
  1935 00000D08 29C1                    		sub		cx,ax
  1936 00000D0A 890E[0600]              		mov		[deltax],cx
  1937 00000D0E 59                      		pop		cx
  1938 00000D0F 52                      		push		dx
  1939 00000D10 29DA                    		sub		dx,bx
  1940 00000D12 8916[0800]              		mov		[deltay],dx
  1941 00000D16 5A                      		pop		dx
  1942                                  
  1943                                  
  1944                                  
  1945 00000D17 89DE                    		mov		si,bx
  1946                                  line6:
  1947 00000D19 52                      		push		dx
  1948 00000D1A 56                      		push		si
  1949 00000D1B 50                      		push		ax
  1950 00000D1C 29DE                    		sub		si,bx	;(y-y1)
  1951 00000D1E A1[0600]                		mov		ax,[deltax]
  1952 00000D21 F7EE                    		imul		si
  1953 00000D23 8B36[0800]              		mov		si,[deltay]		;arredondar
  1954 00000D27 D1EE                    		shr		si,1
  1955                                  ; se numerador (DX)>0 soma se <0 subtrai
  1956 00000D29 81FA0000                		cmp		dx,0
  1957 00000D2D 7C09                    		jl		ar2
  1958 00000D2F 01F0                    		add		ax,si
  1959 00000D31 81D20000                		adc		dx,0
  1960 00000D35 E90600                  		jmp		arc2
  1961 00000D38 29F0                    ar2:		sub		ax,si
  1962 00000D3A 81DA0000                		sbb		dx,0
  1963                                  arc2:
  1964 00000D3E F73E[0800]              		idiv		word [deltay]
  1965 00000D42 89C7                    		mov		di,ax
  1966 00000D44 58                      		pop		ax
  1967 00000D45 01C7                    		add		di,ax
  1968 00000D47 5E                      		pop		si
  1969 00000D48 57                      		push		di
  1970 00000D49 56                      		push		si
  1971 00000D4A E84DFD                  		call		plot_xy
  1972 00000D4D 5A                      		pop		dx
  1973 00000D4E 39D6                    		cmp		si,dx
  1974 00000D50 7404                    		je		fim_line
  1975 00000D52 46                      		inc		si
  1976 00000D53 E9C3FF                  		jmp		line6
  1977                                  
  1978                                  fim_line:
  1979 00000D56 5F                      		pop		di
  1980 00000D57 5E                      		pop		si
  1981 00000D58 5A                      		pop		dx
  1982 00000D59 59                      		pop		cx
  1983 00000D5A 5B                      		pop		bx
  1984 00000D5B 58                      		pop		ax
  1985 00000D5C 9D                      		popf
  1986 00000D5D 5D                      		pop		bp
  1987 00000D5E C20800                  		ret		8
  1988                                  
  1989                                  
  1990                                  
  1991                                  
  1992                                  ;*******************************************************************
  1993                                  segment data
  1994                                  
  1995 00000000 0F                      cor		db		branco_intenso
  1996                                  
  1997                                  ;	I R G B COR
  1998                                  ;	0 0 0 0 preto
  1999                                  ;	0 0 0 1 azul
  2000                                  ;	0 0 1 0 verde
  2001                                  ;	0 0 1 1 cyan
  2002                                  ;	0 1 0 0 vermelho
  2003                                  ;	0 1 0 1 magenta
  2004                                  ;	0 1 1 0 marrom
  2005                                  ;	0 1 1 1 branco
  2006                                  ;	1 0 0 0 cinza
  2007                                  ;	1 0 0 1 azul claro
  2008                                  ;	1 0 1 0 verde claro
  2009                                  ;	1 0 1 1 cyan claro
  2010                                  ;	1 1 0 0 rosa
  2011                                  ;	1 1 0 1 magenta claro
  2012                                  ;	1 1 1 0 amarelo
  2013                                  ;	1 1 1 1 branco intenso
  2014                                  
  2015                                  ;Colors
  2016                                  preto						equ		0
  2017                                  azul						equ		1
  2018                                  verde						equ		2
  2019                                  cyan						equ		3
  2020                                  vermelho				equ		4
  2021                                  magenta					equ		5
  2022                                  marrom					equ		6
  2023                                  branco					equ		7
  2024                                  cinza						equ		8
  2025                                  azul_claro			equ		9
  2026                                  verde_claro			equ		10
  2027                                  cyan_claro			equ		11
  2028                                  rosa						equ		12
  2029                                  magenta_claro		equ		13
  2030                                  amarelo					equ		14
  2031                                  branco_intenso	equ		15
  2032                                  
  2033 00000001 00                      modo_anterior	db	0
  2034 00000002 0000                    linha   	dw  		0
  2035 00000004 0000                    coluna  	dw  		0
  2036 00000006 0000                    deltax		dw			0
  2037 00000008 0000                    deltay		dw			0	
  2038                                  
  2039                                  ;keys			
  2040 0000000A 63                      key_new_game			db	  'c'
  2041 0000000B 14                      key_jogada				db		20
  2042 0000000C 73                      key_out_game			db		's'  
  2043                                  
  2044                                  ;Strings
  2045 0000000D 5465726D696E616C        string_terminal					db	'Terminal'
  2046 00000015 4A4F474F2044412056-     string_game    					db  'JOGO DA VELHA'
  2047 0000001E 454C4841           
  2048 00000022 43616D706F20646520-     string_last_move 				db	'Campo de comando'
  2049 0000002B 636F6D616E646F     
  2050 00000032 43616D706F20646520-     string_message   				db  'Campo de mensagens'
  2051 0000003B 6D656E736167656E73 
  2052 00000044 436F6D616E646F2049-     string_invalid_command	db 	'Comando Inválido'
  2053 0000004D 6E76C3A16C69646F   
  2054 00000055 4A6F6761646120496E-     string_invalid_play			db 	'Jogada Inválida'
  2055 0000005E 76C3A16C696461     
  2056 00000065 43656C756C61206F63-     string_occupied_cell    db  'Celula ocupada'
  2057 0000006E 7570616461         
  2058 00000073 2020202020              string_empty_terminal		db  '     '
  2059 00000078 4F206A6F6761646F72-     string_invalid_player   db  'O jogador nao pode repetir a jogada'
  2060 00000081 206E616F20706F6465-
  2061 0000008A 207265706574697220-
  2062 00000093 61206A6F67616461   
  2063 0000009B 202020202020202020-     string_empty_message    db 	'                                   '
  2064 000000A4 202020202020202020-
  2065 000000AD 202020202020202020-
  2066 000000B6 2020202020202020   
  2067 000000BE 4F206A6F6761646F72-     string_player_C_victory db  'O jogador C venceu!'
  2068 000000C7 20432076656E636575-
  2069 000000D0 21                 
  2070                                  
  2071 000000D1 3131                    n11 										db  '11'
  2072 000000D3 3132                    n12 										db  '12'
  2073 000000D5 3133                    n13 										db  '13'
  2074 000000D7 3231                    n21 										db  '21'
  2075 000000D9 3232                    n22 										db  '22'
  2076 000000DB 3233                    n23 										db  '23'
  2077 000000DD 3331                    n31 										db  '31'
  2078 000000DF 3332                    n32 										db  '32'
  2079 000000E1 3333                    n33 										db  '33'
  2080                                  
  2081                                  ;Variaveis que definem o preenchimento das cells, 0 vazio e 1 preenchido
  2082 000000E3 00                      cell11 db 0
  2083 000000E4 00                      cell12 db 0
  2084 000000E5 00                      cell13 db 0
  2085 000000E6 00                      cell21 db 0
  2086 000000E7 00                      cell22 db 0
  2087 000000E8 00                      cell23 db 0
  2088 000000E9 00                      cell31 db 0
  2089 000000EA 00                      cell32 db 0
  2090 000000EB 00                      cell33 db 0
  2091                                  
  2092 000000EC 00                      last_player db 0 ;Última jogador a jogar: 'C' ou 'X'
  2093 000000ED 00                      victorious_player db 0 ;Jogador vencedor da rodada: 'C' ou 'X'
  2094                                  
  2095                                  ;*************************************************************************
  2096                                  segment stack stack
  2097 00000000 <res 00000200>            resb 		512
  2098                                  				
  2099                                  stacktop:
  2100                                  ;NAO PODE JOGAR NO MESMO LUGAR\;
  2101                                  

     1                                  ; vers�o de 10/05/2007
     2                                  ; corrigido erro de arredondamento na rotina line.
     3                                  ; circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  ;
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                  mov 		ax,data
     8 00000003 8ED8                      mov 		ds,ax
     9 00000005 B8[0000]                  mov 		ax,stack
    10 00000008 8ED0                      mov 		ss,ax
    11 0000000A BC[0002]                  mov 		sp,stacktop
    12                                  
    13                                  ;Salvar modo corrente de video(vendo como est� o modo de video da maquina)
    14 0000000D B40F                      mov  		ah,0Fh
    15 0000000F CD10                      int  		10h
    16 00000011 A2[0100]                  mov  		[modo_anterior],al   
    17                                  
    18                                  ;Alterar modo de video para gr�fico 640x480 16 cores
    19 00000014 B012                      mov     	al,12h
    20 00000016 B400                      mov     	ah,0
    21 00000018 CD10                      int     	10h
    22                                  		
    23                                  
    24                                  ;Desenhar jogo da velha
    25                                  	print_terminal_text:
    26 0000001A BB0000                  		mov     	bx,0
    27 0000001D B90800                  		mov     	cx,8			;n�mero de caracteres
    28 00000020 B607                    		mov     	dh,7			;linha 0-29
    29 00000022 B201                    		mov     	dl,1			;coluna 0-79
    30 00000024 C606[0000]0F            		mov		byte[cor], branco_intenso
    31                                  
    32                                  		LTT:
    33 00000029 E86B0D                  			call		cursor
    34 0000002C 8A87[0D00]              			mov     al,[bx+string_terminal]
    35 00000030 E87B0D                  			call		caracter
    36 00000033 43                      			inc     bx			;proximo caracter
    37 00000034 FEC2                    			inc			dl			;avanca a coluna
    38                                  			
    39 00000036 E2F1                    			loop    LTT
    40                                  	print_tic_tac_toe:
    41 00000038 C606[0000]0F            		mov		byte[cor],branco_intenso	;1 Reta vertical
    42 0000003D B8F500                  		mov		ax,245
    43 00000040 50                      		push		ax
    44 00000041 B85B00                  		mov		ax,91
    45 00000044 50                      		push		ax
    46 00000045 B8F500                  		mov		ax,245
    47 00000048 50                      		push		ax
    48 00000049 B8D501                  		mov		ax,469
    49 0000004C 50                      		push		ax
    50 0000004D E83E0F                  		call		line
    51                                  
    52 00000050 C606[0000]0F            		mov		byte[cor],branco_intenso	;2 Reta vertical
    53 00000055 B87301                  		mov		ax,371
    54 00000058 50                      		push		ax
    55 00000059 B85B00                  		mov		ax,91
    56 0000005C 50                      		push		ax
    57 0000005D B87301                  		mov		ax,371
    58 00000060 50                      		push		ax
    59 00000061 B8D501                  		mov		ax,469
    60 00000064 50                      		push		ax
    61 00000065 E8260F                  		call		line
    62                                  
    63 00000068 C606[0000]0F            		mov		byte[cor],branco_intenso	;1 Reta horizontal
    64 0000006D B87700                  		mov		ax,119
    65 00000070 50                      		push		ax
    66 00000071 B85701                  		mov		ax,343
    67 00000074 50                      		push		ax
    68 00000075 B8F101                  		mov		ax,497
    69 00000078 50                      		push		ax
    70 00000079 B85701                  		mov		ax,343
    71 0000007C 50                      		push		ax
    72 0000007D E80E0F                  		call		line
    73                                  
    74 00000080 C606[0000]0F            		mov		byte[cor],branco_intenso	;2 Reta horizontal
    75 00000085 B87700                  		mov		ax,119
    76 00000088 50                      		push		ax
    77 00000089 B8D900                  		mov		ax,217
    78 0000008C 50                      		push		ax
    79 0000008D B8F101                  		mov		ax,497
    80 00000090 50                      		push		ax
    81 00000091 B8D900                  		mov		ax,217
    82 00000094 50                      		push		ax
    83 00000095 E8F60E                  		call		line
    84                                  
    85                                  	print_command_field:
    86 00000098 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal superior
    87 0000009D B80500                  		mov		ax,5
    88 000000A0 50                      		push		ax
    89 000000A1 B84600                  		mov		ax,70
    90 000000A4 50                      		push		ax
    91 000000A5 B87B02                  		mov		ax,635
    92 000000A8 50                      		push		ax
    93 000000A9 B84600                  		mov		ax,70
    94 000000AC 50                      		push		ax
    95 000000AD E8DE0E                  		call		line
    96                                  
    97 000000B0 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal inferior
    98 000000B5 B80500                  		mov		ax,5
    99 000000B8 50                      		push		ax
   100 000000B9 B82800                  		mov		ax,40
   101 000000BC 50                      		push		ax
   102 000000BD B87B02                  		mov		ax,635
   103 000000C0 50                      		push		ax
   104 000000C1 B82800                  		mov		ax,40
   105 000000C4 50                      		push		ax
   106 000000C5 E8C60E                  		call		line
   107                                  
   108 000000C8 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da esquerda
   109 000000CD B80500                  		mov		ax,5
   110 000000D0 50                      		push		ax
   111 000000D1 B84600                  		mov		ax,70
   112 000000D4 50                      		push		ax
   113 000000D5 B80500                  		mov		ax,5
   114 000000D8 50                      		push		ax
   115 000000D9 B82800                  		mov		ax,40
   116 000000DC 50                      		push		ax
   117 000000DD E8AE0E                  		call		line
   118                                  
   119 000000E0 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da direita
   120 000000E5 B87B02                  		mov		ax,635
   121 000000E8 50                      		push		ax
   122 000000E9 B84600                  		mov		ax,70
   123 000000EC 50                      		push		ax
   124 000000ED B87B02                  		mov		ax,635
   125 000000F0 50                      		push		ax
   126 000000F1 B82800                  		mov		ax,40
   127 000000F4 50                      		push		ax
   128 000000F5 E8960E                  		call		line
   129                                  
   130                                  	print_message_field:
   131 000000F8 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal superior
   132 000000FD B80500                  		mov		ax,5
   133 00000100 50                      		push		ax
   134 00000101 B82300                  		mov		ax,35
   135 00000104 50                      		push		ax
   136 00000105 B87B02                  		mov		ax,635
   137 00000108 50                      		push		ax
   138 00000109 B82300                  		mov		ax,35
   139 0000010C 50                      		push		ax
   140 0000010D E87E0E                  		call		line
   141                                  
   142 00000110 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta horizontal inferior
   143 00000115 B80500                  		mov		ax,5
   144 00000118 50                      		push		ax
   145 00000119 B80500                  		mov		ax,5
   146 0000011C 50                      		push		ax
   147 0000011D B87B02                  		mov		ax,635
   148 00000120 50                      		push		ax
   149 00000121 B80500                  		mov		ax,5
   150 00000124 50                      		push		ax
   151 00000125 E8660E                  		call		line
   152                                  
   153 00000128 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da esquerda
   154 0000012D B80500                  		mov		ax,5
   155 00000130 50                      		push		ax
   156 00000131 B82300                  		mov		ax,35
   157 00000134 50                      		push		ax
   158 00000135 B80500                  		mov		ax,5
   159 00000138 50                      		push		ax
   160 00000139 B80500                  		mov		ax,5
   161 0000013C 50                      		push		ax
   162 0000013D E84E0E                  		call		line
   163                                  
   164 00000140 C606[0000]0F            		mov		byte[cor],branco_intenso	;Reta vertical da direita
   165 00000145 B87B02                  		mov		ax,635
   166 00000148 50                      		push		ax
   167 00000149 B82300                  		mov		ax,35
   168 0000014C 50                      		push		ax
   169 0000014D B87B02                  		mov		ax,635
   170 00000150 50                      		push		ax
   171 00000151 B80500                  		mov		ax,5
   172 00000154 50                      		push		ax
   173 00000155 E8360E                  		call		line	
   174                                  	
   175                                  	print_command_title:
   176 00000158 B91000                  		mov     	cx,16			;n�mero de caracteres
   177 0000015B BB0000                  		mov     	bx,0
   178 0000015E B61A                    		mov     	dh,26			;linha 0-29
   179 00000160 B202                    		mov     	dl,2			;coluna 0-79
   180 00000162 C606[0000]0F            		mov		byte[cor],branco_intenso
   181                                  	
   182                                  		LCC:
   183 00000167 E82D0C                  		call	cursor
   184 0000016A 8A87[2200]              		mov     al,[bx+string_last_move]
   185 0000016E E83D0C                  		call	caracter
   186 00000171 43                      		inc     bx			;proximo caracter
   187 00000172 FEC2                    		inc		dl			;avanca a coluna
   188                                  
   189 00000174 E2F1                    		loop    LCC
   190                                  	
   191                                  	
   192                                  	print_message_title:
   193 00000176 B91200                  		mov     	cx,18			;n�mero de caracteres
   194 00000179 BB0000                  		mov     	bx,0
   195 0000017C B61C                    		mov     	dh,28			;linha 0-29
   196 0000017E B202                    		mov     	dl,2			;coluna 0-79
   197 00000180 C606[0000]0F            		mov		byte[cor],branco_intenso
   198                                  
   199                                  		LCM:
   200 00000185 E80F0C                  			call	cursor
   201 00000188 8A87[3200]              			mov     al,[bx+string_message]
   202 0000018C E81F0C                  			call	caracter
   203 0000018F 43                      			inc     bx			;proximo caracter
   204 00000190 FEC2                    			inc		dl			;avanca a coluna
   205 00000192 E2F1                    			loop    LCM
   206                                  	print_game_title:
   207 00000194 B90D00                  		mov     	cx,13			;n�mero de caracteres
   208 00000197 BB0000                  		mov     	bx,0
   209 0000019A B600                    		mov     	dh,0			;linha 0-29
   210 0000019C B220                    		mov     	dl,32			;coluna 0-79
   211 0000019E C606[0000]0F            		mov		byte[cor],branco_intenso
   212                                  
   213                                  		L1GT:
   214 000001A3 E8F10B                  			call	cursor
   215 000001A6 8A87[1500]              			mov     al,[bx+string_game]
   216 000001AA E8010C                  			call	caracter
   217 000001AD 43                      			inc     bx			;proximo caracter
   218 000001AE FEC2                    			inc		dl			;avanca a coluna
   219 000001B0 E2F1                    			loop    L1GT
   220                                  
   221                                  		;mov    	ah,08h
   222                                  
   223                                  
   224                                  ;Escrever numerações de ajuda 
   225                                  	;N11
   226 000001B2 B90200                  		mov     	cx,2			;n�mero de caracteres
   227 000001B5 BB0000                  		mov     	bx,0
   228 000001B8 B601                    		mov     	dh,1			;linha 0-29
   229 000001BA B20F                    		mov     	dl,15			;coluna 0-79
   230 000001BC C606[0000]0F            		mov		byte[cor],branco_intenso
   231                                  
   232                                  
   233                                  		LN11:
   234 000001C1 E8D30B                  			call	cursor
   235 000001C4 8A87[E000]              				mov     al,[bx+n11]
   236 000001C8 E8E30B                  			call	caracter
   237 000001CB 43                      				inc     bx			;proximo caracter
   238 000001CC FEC2                    			inc		dl			;avanca a coluna
   239                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   240 000001CE E2F1                    				loop    LN11
   241                                  	;N12
   242 000001D0 B90200                  		mov     	cx,2			;n�mero de caracteres
   243 000001D3 BB0000                  		mov     	bx,0
   244 000001D6 B601                    		mov     	dh,1			;linha 0-29
   245 000001D8 B21F                    		mov     	dl,31			;coluna 0-79
   246 000001DA C606[0000]0F            		mov		byte[cor],branco_intenso
   247                                  
   248                                  
   249                                  		LN12:
   250 000001DF E8B50B                  			call	cursor
   251 000001E2 8A87[E200]              				mov     al,[bx+n12]
   252 000001E6 E8C50B                  			call	caracter
   253 000001E9 43                      				inc     bx			;proximo caracter
   254 000001EA FEC2                    			inc		dl			;avanca a coluna
   255                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   256 000001EC E2F1                    				loop    LN12
   257                                  	;N13
   258 000001EE B90200                  		mov     	cx,2			;n�mero de caracteres
   259 000001F1 BB0000                  		mov     	bx,0
   260 000001F4 B601                    		mov     	dh,1			;linha 0-29
   261 000001F6 B22F                    		mov     	dl,47			;coluna 0-79
   262 000001F8 C606[0000]0F            		mov		byte[cor],branco_intenso
   263                                  
   264                                  
   265                                  		LN13:
   266 000001FD E8970B                  			call	cursor
   267 00000200 8A87[E400]              				mov     al,[bx+n13]
   268 00000204 E8A70B                  			call	caracter
   269 00000207 43                      				inc     bx			;proximo caracter
   270 00000208 FEC2                    			inc		dl			;avanca a coluna
   271                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   272 0000020A E2F1                    				loop    LN13
   273                                  	;N21
   274 0000020C B90200                  		mov     	cx,2			;n�mero de caracteres
   275 0000020F BB0000                  		mov     	bx,0
   276 00000212 B609                    		mov     	dh,9			;linha 0-29
   277 00000214 B20F                    		mov     	dl,15			;coluna 0-79
   278 00000216 C606[0000]0F            		mov		byte[cor],branco_intenso
   279                                  
   280                                  
   281                                  		LN21:
   282 0000021B E8790B                  			call	cursor
   283 0000021E 8A87[E600]              				mov     al,[bx+n21]
   284 00000222 E8890B                  			call	caracter
   285 00000225 43                      				inc     bx			;proximo caracter
   286 00000226 FEC2                    			inc		dl			;avanca a coluna
   287                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   288 00000228 E2F1                    				loop    LN21
   289                                  	;N22
   290 0000022A B90200                  		mov     	cx,2			;n�mero de caracteres
   291 0000022D BB0000                  		mov     	bx,0
   292 00000230 B609                    		mov     	dh,9			;linha 0-29
   293 00000232 B21F                    		mov     	dl,31			;coluna 0-79
   294 00000234 C606[0000]0F            		mov		byte[cor],branco_intenso
   295                                  
   296                                  
   297                                  		LN22:
   298 00000239 E85B0B                  			call	cursor
   299 0000023C 8A87[E800]              				mov     al,[bx+n22]
   300 00000240 E86B0B                  			call	caracter
   301 00000243 43                      				inc     bx			;proximo caracter
   302 00000244 FEC2                    			inc		dl			;avanca a coluna
   303                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   304 00000246 E2F1                    				loop    LN22
   305                                  	;N23
   306 00000248 B90200                  		mov     	cx,2			;n�mero de caracteres
   307 0000024B BB0000                  		mov     	bx,0
   308 0000024E B609                    		mov     	dh,9			;linha 0-29
   309 00000250 B22F                    		mov     	dl,47			;coluna 0-79
   310 00000252 C606[0000]0F            		mov		byte[cor],branco_intenso
   311                                  
   312                                  
   313                                  		LN23:
   314 00000257 E83D0B                  			call	cursor
   315 0000025A 8A87[EA00]              				mov     al,[bx+n23]
   316 0000025E E84D0B                  			call	caracter
   317 00000261 43                      				inc     bx			;proximo caracter
   318 00000262 FEC2                    			inc		dl			;avanca a coluna
   319                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   320 00000264 E2F1                    				loop    LN23
   321                                  	;N31
   322 00000266 B90200                  		mov     	cx,2			;n�mero de caracteres
   323 00000269 BB0000                  		mov     	bx,0
   324 0000026C B611                    		mov     	dh,17			;linha 0-29
   325 0000026E B20F                    		mov     	dl,15			;coluna 0-79
   326 00000270 C606[0000]0F            		mov		byte[cor],branco_intenso
   327                                  
   328                                  
   329                                  		LN31:
   330 00000275 E81F0B                  			call	cursor
   331 00000278 8A87[EC00]              				mov     al,[bx+n31]
   332 0000027C E82F0B                  			call	caracter
   333 0000027F 43                      				inc     bx			;proximo caracter
   334 00000280 FEC2                    			inc		dl			;avanca a coluna
   335                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   336 00000282 E2F1                    				loop    LN31
   337                                  	;N32
   338 00000284 B90200                  		mov     	cx,2			;n�mero de caracteres
   339 00000287 BB0000                  		mov     	bx,0
   340 0000028A B611                    		mov     	dh,17			;linha 0-29
   341 0000028C B21F                    		mov     	dl,31			;coluna 0-79
   342 0000028E C606[0000]0F            		mov		byte[cor],branco_intenso
   343                                  
   344                                  
   345                                  		LN32:
   346 00000293 E8010B                  			call	cursor
   347 00000296 8A87[EE00]              				mov     al,[bx+n32]
   348 0000029A E8110B                  			call	caracter
   349 0000029D 43                      				inc     bx			;proximo caracter
   350 0000029E FEC2                    			inc		dl			;avanca a coluna
   351                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   352 000002A0 E2F1                    				loop    LN32
   353                                  	;N33
   354 000002A2 B90200                  		mov     	cx,2			;n�mero de caracteres
   355 000002A5 BB0000                  		mov     	bx,0
   356 000002A8 B611                    		mov     	dh,17			;linha 0-29
   357 000002AA B22F                    		mov     	dl,47			;coluna 0-79
   358 000002AC C606[0000]0F            		mov		byte[cor],branco_intenso
   359                                  
   360                                  
   361                                  		LN33:
   362 000002B1 E8E30A                  			call	cursor
   363 000002B4 8A87[F000]              				mov     al,[bx+n33]
   364 000002B8 E8F30A                  			call	caracter
   365 000002BB 43                      				inc     bx			;proximo caracter
   366 000002BC FEC2                    			inc		dl			;avanca a coluna
   367                                  			;inc		byte [cor]		;mudar a cor para a seguinte
   368 000002BE E2F1                    				loop    LN33
   369                                  ;Código principal
   370                                  main_loop:
   371 000002C0 E8A800                  	call check_is_tied
   372                                  	return_check_is_tied:
   373                                  
   374 000002C3 B608                    	mov dh, 8 ;linha 0-29
   375 000002C5 B201                    	mov dl, 1 ;coluna 0-79
   376 000002C7 E8CD0A                  	call cursor
   377                                  
   378                                  	; Interrupção para capturar jogada
   379 000002CA B40A                    	mov ah, 0Ah
   380 000002CC BA[0B00]                	mov dx, key_jogada
   381 000002CF CD21                    	int 21h
   382                                  
   383                                  	;Limpa campo de mensagem
   384 000002D1 E87901                  	call clear_message_field
   385                                  	;Limpa terminal onde foi digitado o comando
   386 000002D4 E8D806                  	call clear_terminal
   387                                  
   388 000002D7 803E[FC00]00            	cmp byte[victorious_player], 0
   389 000002DC 7530                    	jne jmp_bridge_novo_jogo
   390                                  
   391                                  
   392 000002DE 803E[FD00]01            	cmp byte[is_tied], 1
   393 000002E3 7429                    	je jmp_bridge_novo_jogo
   394                                  
   395 000002E5 E82900                  	call print_last_command
   396                                  
   397 000002E8 BB0200                  	mov bx, 2
   398 000002EB B043                    	mov al, 'C'
   399 000002ED 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 'C'
   400 000002F1 7475                    	je jmp_bridge_jogada_circulo ; caso seja igual a 'C' pule para a jogada_circulo
   401                                  	
   402 000002F3 B058                    	mov al, 'X'
   403 000002F5 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com X
   404 000002F9 746A                    	je jmp_bridge_jogada_x	 ; caso seja igual a 'X' pule para a jogada_circulo
   405                                  
   406 000002FB B063                     	mov al, 'c'
   407 000002FD 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 'c'
   408 00000301 740B                    	je	jmp_bridge_novo_jogo ; caso seja igual a 'c' começa um novo jogo
   409                                  	
   410 00000303 B073                    	mov al, 's'
   411 00000305 3A87[0B00]              	cmp al, [key_jogada + bx] ; compara a primeira letra da string com 's'
   412 00000309 7425                    	je	exit_game ; caso seja igual a 's', saia do programa
   413                                  
   414 0000030B E93300                  	jmp command_invalid
   415                                  jmp_bridge_novo_jogo:
   416 0000030E E8A700                  	call novo_jogo
   417                                  print_last_command:
   418 00000311 BB0200                  	mov 			bx, 2
   419 00000314 B90300                  	mov			  cx, 3 ; Carrega o tamanho da string em CX
   420 00000317 B61A                    	mov     	dh,26								;linha 0-29
   421 00000319 B213                    	mov     	dl,19								;coluna 0-79
   422 0000031B C606[0000]0F            	mov		byte[cor],branco_intenso
   423                                  	
   424                                  	loop_print_last_command:
   425 00000320 E8740A                  		call		cursor
   426 00000323 8A87[0B00]              		mov     al,	[bx+key_jogada]
   427 00000327 E8840A                  		call		caracter
   428 0000032A 43                      		inc     bx			;proximo caracter
   429 0000032B FEC2                    		inc			dl			;avanca a coluna
   430                                  		
   431 0000032D E2F1                    	loop    loop_print_last_command
   432 0000032F C3                      	ret
   433                                  
   434                                  exit_game:
   435 00000330 E83901                  	call clear_command_field  ;Limpa campo de comando
   436 00000333 CD21                    	int     21h
   437 00000335 B400                      mov  	ah,0   			; set video mode
   438 00000337 A0[0100]                  mov  	al,[modo_anterior]   	; modo anterior
   439 0000033A CD10                      int  	10h
   440 0000033C B8004C                  	mov     ax,4c00h
   441 0000033F CD21                    	int     21h
   442                                  command_invalid:
   443                                  	
   444 00000341 E82801                  	call clear_command_field ; Apaga comando
   445                                  
   446 00000344 BB0000                  	mov 			bx, 0
   447 00000347 B91000                  	mov			  cx, 16 								;Carrega o tamanho da string em CX
   448 0000034A B61C                    	mov     	dh, 28								;linha 0-29
   449 0000034C B215                    	mov     	dl, 21								;coluna 0-79
   450 0000034E C606[0000]04            	mov		byte[cor],vermelho
   451                                  		
   452                                  	loop_command_invalid:
   453 00000353 E8410A                  		call		cursor
   454 00000356 8A87[4400]              		mov     al,	[bx+string_invalid_command]
   455 0000035A E8510A                  		call		caracter
   456 0000035D 43                      		inc     bx			;proximo caracter
   457 0000035E FEC2                    		inc			dl			;avanca a coluna
   458                                  			
   459 00000360 E2F1                    	loop    loop_command_invalid
   460 00000362 E95BFF                  	jmp main_loop
   461                                  
   462                                  jmp_bridge_jogada_x:
   463 00000365 E84D01                  	call jogada_x
   464                                  jmp_bridge_jogada_circulo:
   465 00000368 E82001                  	call jogada_circulo
   466                                  
   467                                  check_is_tied:
   468 0000036B 803E[F200]00            		cmp byte[cell11], 0
   469 00000370 7443                    		je jmp_bridge_return_check_is_tied
   470                                  
   471 00000372 803E[F300]00            		cmp byte[cell12], 0
   472 00000377 743C                    		je jmp_bridge_return_check_is_tied
   473                                  
   474 00000379 803E[F400]00            		cmp byte[cell13], 0
   475 0000037E 7435                    		je jmp_bridge_return_check_is_tied
   476                                  
   477 00000380 803E[F500]00            		cmp byte[cell21], 0
   478 00000385 742E                    		je jmp_bridge_return_check_is_tied
   479                                  
   480 00000387 803E[F600]00            		cmp byte[cell22], 0
   481 0000038C 7427                    		je jmp_bridge_return_check_is_tied
   482                                  
   483 0000038E 803E[F700]00            		cmp byte[cell23], 0
   484 00000393 7420                    		je jmp_bridge_return_check_is_tied
   485                                  
   486 00000395 803E[F800]00            		cmp byte[cell31], 0
   487 0000039A 7419                    		je jmp_bridge_return_check_is_tied
   488                                  
   489 0000039C 803E[F900]00            		cmp byte[cell32], 0
   490 000003A1 7412                    		je jmp_bridge_return_check_is_tied
   491                                  
   492 000003A3 803E[FA00]00            		cmp byte[cell33], 0
   493 000003A8 740B                    		je jmp_bridge_return_check_is_tied
   494                                  
   495 000003AA C606[FD00]01            		mov byte[is_tied], 1
   496 000003AF E8C609                  		call print_tied
   497                                  
   498 000003B2 E90EFF                  		jmp return_check_is_tied
   499                                  jmp_bridge_return_check_is_tied:
   500 000003B5 E90BFF                  	jmp return_check_is_tied
   501                                  novo_jogo:
   502 000003B8 E8B100                  		call clear_command_field ;Limpa o campo de comando
   503                                  
   504 000003BB C606[0000]00            		mov		byte[cor],preto
   505                                  		;LIMPA CIRCULOS
   506 000003C0 E8D903                  		call circle11
   507 000003C3 E8EA03                  		call circle12
   508 000003C6 E8FB03                  		call circle13
   509 000003C9 E80C04                  		call circle21
   510 000003CC E81D04                  		call circle22
   511 000003CF E82E04                  		call circle23
   512 000003D2 E83F04                  		call circle31
   513 000003D5 E85004                  		call circle32
   514 000003D8 E86104                  		call circle33
   515                                  
   516                                  		;LIMPA X'S
   517 000003DB E87204                  		call x11
   518 000003DE E89604                  		call x12
   519 000003E1 E8BA04                  		call x13
   520 000003E4 E8DE04                  		call x21
   521 000003E7 E80205                  		call x22
   522 000003EA E82605                  		call x23
   523 000003ED E84A05                  		call x31
   524 000003F0 E86E05                  		call x32
   525 000003F3 E89205                  		call x33
   526                                  
   527                                  		;LIMPA LINHAS DE VITÓRIA
   528 000003F6 E8A108                  		call SVL1
   529 000003F9 E8B208                  		call SVL2
   530 000003FC E8C308                  		call SVL3
   531 000003FF E8D408                  		call SVC1
   532 00000402 E8E508                  		call SVC2
   533 00000405 E8F608                  		call SVC3
   534 00000408 E80709                  		call SVD1
   535 0000040B E81809                  		call SVD2
   536                                  		
   537                                  		;LIMPA CELULAS 
   538 0000040E C606[F200]00            		mov byte[cell11], 0
   539 00000413 C606[F300]00            		mov byte[cell12], 0
   540 00000418 C606[F400]00            		mov byte[cell13], 0
   541 0000041D C606[F500]00            		mov byte[cell21], 0
   542 00000422 C606[F600]00            		mov byte[cell22], 0
   543 00000427 C606[F700]00            		mov byte[cell23], 0
   544 0000042C C606[F800]00            		mov byte[cell31], 0
   545 00000431 C606[F900]00            		mov byte[cell32], 0
   546 00000436 C606[FA00]00            		mov byte[cell33], 0
   547                                  
   548                                  		;LIMPA REGISTROS DE ÚLTIMA JOGADA 
   549 0000043B C606[FB00]00            		mov byte[last_player], 0
   550 00000440 C606[FC00]00            		mov byte[victorious_player], 0	
   551 00000445 C606[FD00]00            		mov byte[is_tied], 0
   552                                  		
   553 0000044A E9EBFB                  		jmp print_tic_tac_toe;
   554                                  		;;limpa jogas na tela
   555                                  
   556                                  clear_message_field:
   557                                  	;Limpa campo de mensagem
   558 0000044D BB0000                  		mov 			bx, 0
   559 00000450 B92300                  		mov			  cx, 35 								;Carrega o tamanho da string em CX
   560 00000453 B61C                    		mov     	dh, 28								;linha 0-29
   561 00000455 B215                    		mov     	dl, 21								;coluna 0-79
   562 00000457 C606[0000]00            		mov		byte[cor],preto
   563                                  		
   564                                  		loop_print_clear_message_field:
   565 0000045C E83809                  			call		cursor
   566 0000045F 8A87[8700]              			mov     al,	[bx+string_empty_message]
   567 00000463 E84809                  			call		caracter
   568 00000466 43                      			inc     bx			;proximo caracter
   569 00000467 FEC2                    			inc			dl			;avanca a coluna
   570                                  			
   571 00000469 E2F1                    		loop    loop_print_clear_message_field
   572 0000046B C3                      	ret
   573                                  clear_command_field:
   574 0000046C BB0000                  	mov 			bx, 0
   575 0000046F B90300                  	mov			  cx, 3 							;carrega o tamanho da string em CX
   576 00000472 B61A                    	mov     	dh,26								;linha 0-29
   577 00000474 B213                    	mov     	dl,19								;coluna 0-79
   578 00000476 C606[0000]00            	mov		byte[cor],preto
   579                                  	
   580                                  	loop_clear_command_field:
   581 0000047B E81909                  		call		cursor
   582 0000047E 8A87[AA00]              		mov     al,	[bx+string_empty_command]
   583 00000482 E82909                  		call		caracter
   584 00000485 43                      		inc     bx			;proximo caracter
   585 00000486 FEC2                    		inc			dl			;avanca a coluna
   586                                  		
   587 00000488 E2F1                    	loop    loop_clear_command_field
   588 0000048A C3                      	ret
   589                                  jogada_circulo:
   590 0000048B A0[FB00]                		mov al, [last_player]
   591 0000048E 3C43                    		cmp al, 'C'
   592 00000490 7450                    		je jogada_repetida
   593                                  
   594 00000492 C606[0000]0A            		mov		byte[cor],verde_claro	 ; seleciona a cord verde claro para círculo
   595                                  		
   596 00000497 BB0300                  		mov bx, 3
   597 0000049A 8A87[0B00]              		mov al,[bx+key_jogada]
   598 0000049E 2C30                    		sub al, '0'
   599                                  
   600                                  		;compara linha da jogada com 1 
   601 000004A0 3C01                    		cmp al, 1
   602 000004A2 745F                    		je jmp_intermediary_C1
   603                                  		
   604                                  		;compara linha da jogada com 2 
   605 000004A4 3C02                    		cmp al, 2
   606 000004A6 7407                    		je jmp_bridge_c2
   607                                  
   608                                  		; compara linha da jogada com 3 
   609 000004A8 3C03                    		cmp al, 3
   610 000004AA 7406                    		je jmp_bridge_c3
   611                                  
   612 000004AC E992FE                  		jmp command_invalid	
   613                                  		jmp_bridge_c2:
   614 000004AF E8BA00                  			call jmp_intermediary_C2
   615                                  		jmp_bridge_c3:
   616 000004B2 E82001                  			call jmp_intermediary_C3
   617                                  
   618                                  jogada_x:	
   619 000004B5 A0[FB00]                		mov al, [last_player]
   620 000004B8 3C58                    		cmp al, 'X'
   621 000004BA 7426                    		je jogada_repetida
   622                                  		
   623 000004BC C606[0000]0C            		mov	byte[cor],rosa
   624                                  
   625 000004C1 BB0300                  		mov bx, 3
   626 000004C4 8A87[0B00]              		mov al,[bx+key_jogada]
   627 000004C8 2C30                    		sub al, '0'
   628                                  		;compara linha da jogada com 1 
   629 000004CA 3C01                    		cmp al, 1
   630 000004CC 740B                    		je jmp_bridge_x1
   631                                  		
   632                                  		;compara linha da jogada com 2 
   633 000004CE 3C02                    		cmp al, 2
   634 000004D0 740A                    		je jmp_bridge_x2
   635                                  
   636                                  		; compara linha da jogada com 3 
   637 000004D2 3C03                    		cmp al, 3
   638 000004D4 7409                    		je jmp_bridge_x3
   639                                  
   640 000004D6 E968FE                  		jmp command_invalid	
   641                                  
   642                                  		jmp_bridge_x1:
   643 000004D9 E88801                  			call jmp_intermediary_X1
   644                                  		jmp_bridge_x2:
   645 000004DC E8EB01                  			call jmp_intermediary_X2
   646                                  		jmp_bridge_x3:
   647 000004DF E85102                  			call jmp_intermediary_X3
   648                                  jogada_repetida:
   649                                  	;Imprime mensagem de jogada repetida na barra de mensagem
   650 000004E2 BB0000                  	mov 			bx, 0
   651 000004E5 B90F00                  	mov			  cx, 15 								;Carrega o tamanho da string em CX
   652 000004E8 B61C                    	mov     	dh, 28								;linha 0-29
   653 000004EA B215                    	mov     	dl, 21								;coluna 0-79
   654 000004EC C606[0000]04            	mov		byte[cor],vermelho
   655                                  		
   656                                  	loop_print_jogada_repetida:
   657 000004F1 E8A308                  		call		cursor
   658 000004F4 8A87[7800]              		mov     al,	[bx+string_invalid_player]
   659 000004F8 E8B308                  		call		caracter
   660 000004FB 43                      		inc     bx			;proximo caracter
   661 000004FC FEC2                    		inc			dl			;avanca a coluna
   662                                  			
   663 000004FE E2F1                    	loop    loop_print_jogada_repetida
   664 00000500 E9BDFD                  	jmp main_loop
   665                                  jmp_intermediary_C1:
   666 00000503 BB0400                  		mov bx, 4
   667 00000506 8A87[0B00]              		mov al,[bx+key_jogada]
   668 0000050A 2C30                    		sub al, '0'
   669                                  
   670                                  		;compara coluna da jogada com 1 
   671 0000050C 3C01                    		cmp al, 1
   672 0000050E 740B                    		je jmp_intermediary_C11
   673                                  
   674                                  		;compara coluna da jogada com 2
   675 00000510 3C02                    		cmp al, 2
   676 00000512 7424                    		je jmp_intermediary_C12
   677                                  
   678                                  		;compara coluna da jogada com 3
   679 00000514 3C03                    		cmp al, 3
   680 00000516 743A                    		je jmp_intermediary_C13
   681                                  		
   682 00000518 E926FE                  		jmp command_invalid
   683                                  	jmp_intermediary_C11:
   684 0000051B 803E[F200]00            			cmp byte[cell11], 0	
   685 00000520 7513                    			jne jmp_bridge_print_occupied_cell
   686                                  
   687 00000522 C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   688 00000527 C606[F200]43            		  mov byte[cell11], 'C' 					;Seta na celula 11 a jogada C
   689                                  
   690 0000052C E86D02                  			call circle11
   691 0000052F E8A004                  			call check_if_C_won 				;Checa se alguém ganhou
   692 00000532 E98BFD                  			jmp main_loop
   693                                  		jmp_bridge_print_occupied_cell: ;ponte para a função principal
   694 00000535 E80301                  			call print_occupied_cell
   695                                  	jmp_intermediary_C12:	
   696 00000538 803E[F300]00            			cmp byte[cell12], 0	
   697 0000053D 75F6                    			jne jmp_bridge_print_occupied_cell
   698                                  
   699 0000053F C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   700 00000544 C606[F300]43            			mov byte[cell12], 'C' 					;Seta na celula 12 a jogada C
   701                                  
   702 00000549 E86402                  			call circle12
   703 0000054C E88304                  			call check_if_C_won 				;Checa se alguém ganhou
   704                                  
   705 0000054F E96EFD                  			jmp main_loop
   706                                  	jmp_intermediary_C13:
   707 00000552 803E[F400]00            			cmp byte[cell13], 0
   708 00000557 75DC                    			jne jmp_bridge_print_occupied_cell
   709                                  
   710 00000559 C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   711 0000055E C606[F400]43            			mov byte[cell13], 'C' 					;Seta na celula 13 a jogada C
   712                                  
   713 00000563 E85E02                  			call circle13
   714 00000566 E86904                  			call check_if_C_won 				;Checa se alguém ganhou
   715 00000569 E954FD                  			jmp main_loop
   716                                  jmp_intermediary_C2:
   717 0000056C BB0400                  		mov bx, 4
   718 0000056F 8A87[0B00]              		mov al,[bx+key_jogada]
   719 00000573 2C30                    		sub al, '0'
   720                                  
   721                                  		;compara coluna da jogada com 1 
   722 00000575 3C01                    		cmp al, 1
   723 00000577 740B                    		je jmp_intermediary_C21
   724                                  
   725                                  		;compara coluna da jogada com 2
   726 00000579 3C02                    		cmp al, 2
   727 0000057B 7421                    		je jmp_intermediary_C22
   728                                  
   729                                  		;compara coluna da jogada com 3
   730 0000057D 3C03                    		cmp al, 3
   731 0000057F 7437                    		je jmp_intermediary_C23
   732                                  
   733 00000581 E9BDFD                  	  jmp command_invalid
   734                                  	jmp_intermediary_C21:
   735 00000584 803E[F500]00            			cmp byte[cell21], 0	
   736 00000589 75AA                    			jne jmp_bridge_print_occupied_cell
   737                                  
   738 0000058B C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   739 00000590 C606[F500]43            			mov byte[cell21], 'C' 					;Seta na celula 21 a jogada C
   740                                  
   741 00000595 E84002                  			call circle21
   742 00000598 E83704                  			call check_if_C_won 				;Checa se alguém ganhou
   743 0000059B E922FD                  			jmp main_loop
   744                                  	jmp_intermediary_C22:
   745 0000059E 803E[F600]00            			cmp byte[cell22], 0	
   746 000005A3 7590                    			jne jmp_bridge_print_occupied_cell
   747                                  
   748 000005A5 C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   749 000005AA C606[F600]43            			mov byte[cell22], 'C' 					;Seta na celula 22 a jogada C
   750                                  
   751 000005AF E83A02                  			call circle22
   752 000005B2 E81D04                  			call check_if_C_won 				;Checa se alguém ganhou
   753 000005B5 E908FD                  			jmp main_loop
   754                                  	jmp_intermediary_C23:
   755 000005B8 803E[F700]00            			cmp byte[cell23], 0	
   756 000005BD 7513                    			jne jmp_bridge_3_print_occupied_cell
   757                                  
   758 000005BF C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   759 000005C4 C606[F700]43            			mov byte[cell23], 'C' 					;Seta na celula 23 a jogada C
   760                                  
   761 000005C9 E83402                  			call circle23
   762                                  	  ganhou								
   763 000005CC E80304                  			call check_if_C_won 				;Checa se alguém ganhou
   764 000005CF E9EEFC                  			jmp main_loop
   765                                  
   766                                  			jmp_bridge_3_print_occupied_cell:
   767 000005D2 E86600                  				call print_occupied_cell
   768                                  jmp_intermediary_C3:
   769 000005D5 BB0400                  		mov bx, 4
   770 000005D8 8A87[0B00]              		mov al,[bx+key_jogada]
   771 000005DC 2C30                    		sub al, '0'
   772                                  
   773                                  		;compara coluna da jogada com 1 
   774 000005DE 3C01                    		cmp al, 1
   775 000005E0 740B                    		je jmp_intermediary_C31
   776                                  
   777                                  		;compara coluna da jogada com 2
   778 000005E2 3C02                    		cmp al, 2
   779 000005E4 7421                    		je jmp_intermediary_C32
   780                                  
   781                                  		;compara coluna da jogada com 3
   782 000005E6 3C03                    		cmp al, 3
   783 000005E8 7437                    		je jmp_intermediary_C33
   784                                  
   785 000005EA E954FD                  	 jmp command_invalid
   786                                  
   787                                  	jmp_intermediary_C31:
   788 000005ED 803E[F800]00            			cmp byte[cell31], 0	
   789 000005F2 7547                    			jne print_occupied_cell
   790                                  
   791 000005F4 C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   792 000005F9 C606[F800]43            			mov byte[cell31], 'C' 					;Seta na celula 31 a jogada C
   793                                  
   794 000005FE E81302                  			call circle31
   795 00000601 E8CE03                  			call check_if_C_won 				;Checa se alguém ganhou
   796 00000604 E9B9FC                  			jmp main_loop
   797                                  	jmp_intermediary_C32:
   798 00000607 803E[F900]00            			cmp byte[cell32], 0	
   799 0000060C 752D                    			jne print_occupied_cell
   800                                  
   801 0000060E C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   802 00000613 C606[F900]43            			mov byte[cell32], 'C' 					;Seta na celula 32 a jogada C
   803                                  
   804 00000618 E80D02                  			call circle32
   805 0000061B E8B403                  			call check_if_C_won 				;Checa se alguém ganhou
   806 0000061E E99FFC                  			jmp main_loop
   807                                  	jmp_intermediary_C33:
   808 00000621 803E[FA00]00            			cmp byte[cell33], 0	
   809 00000626 7513                    			jne print_occupied_cell
   810                                  
   811 00000628 C606[FB00]43            			mov byte[last_player], 'C' 			;Set como último jogador o 'C'
   812 0000062D C606[FA00]43            			mov byte[cell33], 'C' 					;Seta na celula 33 a jogada C
   813                                  
   814 00000632 E80702                  			call circle33
   815 00000635 E89A03                  			call check_if_C_won 				;Checa se alguém ganhou
   816 00000638 E985FC                  			jmp main_loop
   817                                  print_occupied_cell:
   818 0000063B 50                      	push ax
   819 0000063C 53                      	push bx
   820 0000063D 51                      	push cx
   821 0000063E 52                      	push dx
   822                                  
   823 0000063F BB0000                  		mov				bx, 0
   824 00000642 B90F00                  		mov			  cx, 15 								;Carrega o tamanho da string em CX
   825 00000645 B61C                    		mov     	dh, 28								;linha 0-29
   826 00000647 B215                    		mov     	dl, 21								;coluna 0-79
   827 00000649 C606[0000]04            		mov		byte[cor],vermelho
   828                                  		
   829                                  		loop_print_occupied_cell:
   830 0000064E E84607                  			call		cursor
   831 00000651 8A87[6400]              			mov     al,	[bx+string_occupied_cell]
   832 00000655 E85607                  			call		caracter
   833 00000658 43                      			inc     bx			;proximo caracter
   834 00000659 FEC2                    			inc			dl			;avanca a colunaS
   835                                  			
   836 0000065B E2F1                    		loop    loop_print_occupied_cell
   837                                  	
   838 0000065D 5A                      	pop dx
   839 0000065E 59                      	pop cx
   840 0000065F 5B                      	pop bx
   841 00000660 58                      	pop ax
   842                                  
   843 00000661 E95CFC                  	jmp main_loop
   844                                  jmp_intermediary_X1:
   845 00000664 BB0400                  		mov bx, 4
   846 00000667 8A87[0B00]              		mov al,[bx+key_jogada]
   847 0000066B 2C30                    		sub al, '0'
   848                                  
   849                                  		;compara coluna da jogada com 1 
   850 0000066D 3C01                    		cmp al, 1
   851 0000066F 740B                    		je jmp_intermediary_X11
   852                                  
   853                                  		;compara coluna da jogada com 2
   854 00000671 3C02                    		cmp al, 2
   855 00000673 7421                    		je jmp_intermediary_X12
   856                                  
   857                                  		;compara coluna da jogada com 3
   858 00000675 3C03                    		cmp al, 3
   859 00000677 7437                    		je jmp_intermediary_X13
   860                                  
   861 00000679 E9C5FC                  		jmp command_invalid
   862                                  	jmp_intermediary_X11:
   863 0000067C 803E[F200]00            			cmp byte[cell11], 0	
   864 00000681 75B8                    			jne print_occupied_cell
   865                                  
   866 00000683 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   867 00000688 C606[F200]58            			mov byte[cell11], 'X' ; Seta na celula 11 a jogada 'X'
   868                                  
   869 0000068D E8C001                  			call x11
   870 00000690 E8A304                  			call check_if_X_won
   871 00000693 E92AFC                  			jmp main_loop
   872                                  	jmp_intermediary_X12:
   873 00000696 803E[F300]00            			cmp byte[cell12], 0	
   874 0000069B 759E                    			jne print_occupied_cell
   875                                  
   876 0000069D C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   877 000006A2 C606[F300]58            			mov byte[cell12], 'X' ; Seta na celula 12 a jogada 'X'
   878                                  
   879 000006A7 E8CD01                  			call x12
   880 000006AA E88904                  			call check_if_X_won
   881 000006AD E910FC                  			jmp main_loop
   882                                  	jmp_intermediary_X13:
   883 000006B0 803E[F400]00            			cmp byte[cell13], 0	
   884 000006B5 7584                    			jne print_occupied_cell
   885                                  
   886 000006B7 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   887 000006BC C606[F400]58            			mov byte[cell13], 'X' ; Seta na celula 13 a jogada 'X'
   888                                  
   889 000006C1 E8DA01                  			call x13
   890 000006C4 E86F04                  			call check_if_X_won
   891 000006C7 E9F6FB                  			jmp main_loop
   892                                  jmp_intermediary_X2:
   893 000006CA BB0400                  		mov bx, 4
   894 000006CD 8A87[0B00]              		mov al,[bx+key_jogada]
   895 000006D1 2C30                    		sub al, '0'
   896                                  
   897                                  		;compara coluna da jogada com 1 
   898 000006D3 3C01                    		cmp al, 1
   899 000006D5 740B                    		je jmp_intermediary_X21
   900                                  
   901                                  		;compara coluna da jogada com 2
   902 000006D7 3C02                    		cmp al, 2
   903 000006D9 7424                    		je jmp_intermediary_X22
   904                                  
   905                                  		;compara coluna da jogada com 3
   906 000006DB 3C03                    		cmp al, 3
   907 000006DD 743A                    		je jmp_intermediary_X23
   908                                  
   909 000006DF E95FFC                  		jmp command_invalid
   910                                  	jmp_intermediary_X21:
   911 000006E2 803E[F500]00            			cmp byte[cell21], 0	
   912 000006E7 7513                    			jne jmp_bridge_2_print_occupied_cell
   913                                  
   914 000006E9 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   915 000006EE C606[F500]58            			mov byte[cell21], 'X' ; Seta na celula 21 a jogada 'X'
   916                                  			
   917 000006F3 E8CF01                  			call x21
   918 000006F6 E83D04                  			call check_if_X_won
   919 000006F9 E9C4FB                  			jmp main_loop
   920                                  	jmp_bridge_2_print_occupied_cell:
   921 000006FC E83CFF                  		call print_occupied_cell
   922                                  	jmp_intermediary_X22:
   923 000006FF 803E[F600]00            			cmp byte[cell22], 0	
   924 00000704 75F6                    			jne jmp_bridge_2_print_occupied_cell
   925                                  
   926 00000706 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   927 0000070B C606[F600]58            			mov byte[cell22], 'X' ; Seta na celula 22 a jogada 'X'
   928                                  
   929 00000710 E8D901                  			call x22
   930 00000713 E82004                  			call check_if_X_won
   931 00000716 E9A7FB                  			jmp main_loop
   932                                  	jmp_intermediary_X23:
   933 00000719 803E[F700]00            			cmp byte[cell23], 0	
   934 0000071E 75DC                    			jne jmp_bridge_2_print_occupied_cell
   935                                  
   936 00000720 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   937 00000725 C606[F700]58            			mov byte[cell23], 'X' ; Seta na celula 23 a jogada 'X'
   938                                  
   939 0000072A E8E601                  			call x23
   940 0000072D E80604                  			call check_if_X_won
   941 00000730 E98DFB                  			jmp main_loop
   942                                  
   943                                  jmp_intermediary_X3:
   944 00000733 BB0400                  		mov bx, 4
   945 00000736 8A87[0B00]              		mov al,[bx+key_jogada]
   946 0000073A 2C30                    		sub al, '0'
   947                                  
   948                                  		;compara coluna da jogada com 1 
   949 0000073C 3C01                    		cmp al, 1
   950 0000073E 740B                    		je jmp_intermediary_X31
   951                                  
   952                                  		;compara coluna da jogada com 2
   953 00000740 3C02                    		cmp al, 2
   954 00000742 7421                    		je jmp_intermediary_X32
   955                                  
   956                                  		;compara coluna da jogada com 3
   957 00000744 3C03                    		cmp al, 3
   958 00000746 7437                    		je jmp_intermediary_X33
   959                                  
   960 00000748 E9F6FB                  		jmp command_invalid
   961                                  	jmp_intermediary_X31:
   962 0000074B 803E[F800]00            			cmp byte[cell31], 0	
   963 00000750 75AA                    			jne jmp_bridge_2_print_occupied_cell
   964                                  
   965 00000752 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   966 00000757 C606[F800]58            			mov byte[cell31], 'X' ; Seta na celula 31 a jogada 'X'
   967                                  
   968 0000075C E8DB01                  			call x31
   969 0000075F E8D403                  			call check_if_X_won
   970 00000762 E95BFB                  			jmp main_loop
   971                                  	jmp_intermediary_X32:
   972 00000765 803E[F900]00            			cmp byte[cell32], 0	
   973 0000076A 7590                    			jne jmp_bridge_2_print_occupied_cell
   974                                  
   975 0000076C C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   976 00000771 C606[F900]58            			mov byte[cell32], 'X' ; Seta na celula 32 a jogada 'X'
   977                                  			
   978 00000776 E8E801                  			call x32
   979 00000779 E8BA03                  			call check_if_X_won
   980 0000077C E941FB                  			jmp main_loop
   981                                  	jmp_intermediary_X33:
   982 0000077F 803E[FA00]00            			cmp byte[cell33], 0	
   983 00000784 7513                    			jne jmp_bridge_4_print_occupied_cell
   984                                  
   985 00000786 C606[FB00]58            			mov byte[last_player], 'X' ;Set como último jogador o 'X'
   986 0000078B C606[FA00]58            			mov byte[cell33], 'X' ; Seta na celula 33 a jogada 'X'
   987                                  
   988 00000790 E8F501                  			call x33
   989 00000793 E8A003                  			call check_if_X_won
   990 00000796 E927FB                  			jmp main_loop
   991                                  			jmp_bridge_4_print_occupied_cell:
   992 00000799 E89FFE                  				call print_occupied_cell
   993                                  ;Desenhar circulos 
   994                                    circle11:
   995 0000079C 9C                      		pushf
   996 0000079D 50                      		push 		ax
   997                                  
   998 0000079E B8B600                  		mov		ax,182
   999 000007A1 50                      		push		ax
  1000 000007A2 B89601                  		mov		ax,406
  1001 000007A5 50                      		push		ax
  1002 000007A6 B82300                  		mov		ax,35
  1003 000007A9 50                      		push		ax		
  1004 000007AA E84606                  		call	circle
  1005                                  		
  1006 000007AD 58                      		pop		ax
  1007 000007AE 9D                      		popf
  1008 000007AF C3                      		ret
  1009                                  
  1010                                    circle12:
  1011 000007B0 9C                      		pushf
  1012 000007B1 50                      		push ax
  1013                                  
  1014 000007B2 B83401                  		mov		ax,308
  1015 000007B5 50                      		push		ax
  1016 000007B6 B89601                  		mov		ax,406
  1017 000007B9 50                      		push		ax
  1018 000007BA B82300                  		mov		ax,35
  1019 000007BD 50                      		push		ax
  1020 000007BE E83206                  		call	circle
  1021                                  
  1022 000007C1 58                      		pop ax
  1023 000007C2 9D                      		popf
  1024 000007C3 C3                      		ret 	
  1025                                  
  1026                                    circle13:
  1027 000007C4 9C                      		pushf
  1028 000007C5 50                      		push ax
  1029                                  
  1030 000007C6 B8B201                  		mov		ax,434
  1031 000007C9 50                      		push		ax
  1032 000007CA B89601                  		mov		ax,406
  1033 000007CD 50                      		push		ax
  1034 000007CE B82300                  		mov		ax,35
  1035 000007D1 50                      		push		ax
  1036 000007D2 E81E06                  		call	circle
  1037                                  
  1038 000007D5 58                      		pop ax
  1039 000007D6 9D                      		popf
  1040 000007D7 C3                      		ret 
  1041                                  	circle21:
  1042 000007D8 9C                      		pushf
  1043 000007D9 50                      		push ax
  1044                                  
  1045 000007DA B8B600                  		mov		ax,182
  1046 000007DD 50                      		push		ax
  1047 000007DE B81801                  		mov		ax,280
  1048 000007E1 50                      		push		ax
  1049 000007E2 B82300                  		mov		ax,35
  1050 000007E5 50                      		push		ax
  1051 000007E6 E80A06                  		call	circle
  1052                                  
  1053 000007E9 58                      		pop ax
  1054 000007EA 9D                      		popf
  1055 000007EB C3                      		ret
  1056                                  
  1057                                    circle22:
  1058 000007EC 9C                      		pushf
  1059 000007ED 50                      		push ax
  1060                                  
  1061 000007EE B83401                  		mov		ax,308
  1062 000007F1 50                      		push		ax
  1063 000007F2 B81801                  		mov		ax,280
  1064 000007F5 50                      		push		ax
  1065 000007F6 B82300                  		mov		ax,35
  1066 000007F9 50                      		push		ax
  1067 000007FA E8F605                  		call	circle
  1068                                  
  1069 000007FD 58                      		pop ax
  1070 000007FE 9D                      		popf
  1071 000007FF C3                      		ret
  1072                                  
  1073                                    circle23:
  1074 00000800 9C                      		pushf
  1075 00000801 50                      		push ax
  1076                                  
  1077 00000802 B8B201                  		mov		ax,434
  1078 00000805 50                      		push		ax
  1079 00000806 B81801                  		mov		ax,280
  1080 00000809 50                      		push		ax
  1081 0000080A B82300                  		mov		ax,35
  1082 0000080D 50                      		push		ax
  1083 0000080E E8E205                  		call	circle
  1084                                  		
  1085 00000811 58                      		pop ax
  1086 00000812 9D                      		popf
  1087 00000813 C3                      		ret
  1088                                  	circle31:
  1089 00000814 9C                      		pushf
  1090 00000815 50                      		push ax
  1091                                  
  1092 00000816 B8B600                  		mov		ax,182
  1093 00000819 50                      		push		ax
  1094 0000081A B89900                  		mov		ax,153
  1095 0000081D 50                      		push		ax
  1096 0000081E B82300                  		mov		ax,35
  1097 00000821 50                      		push		ax
  1098 00000822 E8CE05                  		call	circle
  1099                                  		
  1100 00000825 58                      		pop ax
  1101 00000826 9D                      		popf
  1102 00000827 C3                      		ret 
  1103                                  
  1104                                    circle32:
  1105 00000828 9C                      		pushf
  1106 00000829 50                      		push ax
  1107                                  
  1108 0000082A B83401                  		mov		ax,308
  1109 0000082D 50                      		push		ax
  1110 0000082E B89900                  		mov		ax,153
  1111 00000831 50                      		push		ax
  1112 00000832 B82300                  		mov		ax,35
  1113 00000835 50                      		push		ax
  1114 00000836 E8BA05                  		call	circle
  1115                                  
  1116 00000839 58                      		pop ax
  1117 0000083A 9D                      		popf
  1118 0000083B C3                      		ret
  1119                                  
  1120                                    circle33:
  1121 0000083C 9C                      		pushf
  1122 0000083D 50                      		push ax
  1123                                  
  1124 0000083E B8B201                  		mov		ax,434
  1125 00000841 50                      		push		ax
  1126 00000842 B89900                  		mov		ax,153
  1127 00000845 50                      		push		ax
  1128 00000846 B82300                  		mov		ax,35
  1129 00000849 50                      		push		ax
  1130 0000084A E8A605                  		call	circle
  1131                                  		
  1132 0000084D 58                      		pop ax
  1133 0000084E 9D                      		popf
  1134 0000084F C3                      		ret		
  1135                                  
  1136                                  ;Desenhar x's
  1137                                    x11:
  1138 00000850 B89F00                  		mov		ax,159
  1139 00000853 50                      		push		ax
  1140 00000854 B8AF01                  		mov		ax,431
  1141 00000857 50                      		push		ax
  1142 00000858 B8CE00                  		mov		ax,206
  1143 0000085B 50                      		push		ax
  1144 0000085C B87E01                  		mov		ax,382
  1145 0000085F 50                      		push		ax
  1146 00000860 E82B07                  		call		line
  1147                                  		
  1148 00000863 B8CE00                  		mov		ax,206
  1149 00000866 50                      		push		ax
  1150 00000867 B8AF01                  		mov		ax,431
  1151 0000086A 50                      		push		ax
  1152 0000086B B89F00                  		mov		ax,159
  1153 0000086E 50                      		push		ax
  1154 0000086F B87E01                  		mov		ax,382
  1155 00000872 50                      		push		ax
  1156 00000873 E81807                  		call		line
  1157 00000876 C3                      		ret
  1158                                  
  1159                                    x12:
  1160 00000877 B81D01                  		mov		ax,285
  1161 0000087A 50                      		push		ax
  1162 0000087B B8AF01                  		mov		ax,431
  1163 0000087E 50                      		push		ax
  1164 0000087F B84C01                  		mov		ax,332
  1165 00000882 50                      		push		ax
  1166 00000883 B87E01                  		mov		ax,382
  1167 00000886 50                      		push		ax
  1168 00000887 E80407                  		call		line
  1169                                  			
  1170 0000088A B84C01                  		mov		ax,332
  1171 0000088D 50                      		push		ax
  1172 0000088E B8AF01                  		mov		ax,431
  1173 00000891 50                      		push		ax
  1174 00000892 B81D01                  		mov		ax,285
  1175 00000895 50                      		push		ax
  1176 00000896 B87E01                  		mov		ax,382
  1177 00000899 50                      		push		ax
  1178 0000089A E8F106                  		call		line
  1179 0000089D C3                      		ret
  1180                                  
  1181                                    x13:
  1182 0000089E B89B01                  		mov		ax,411
  1183 000008A1 50                      		push		ax
  1184 000008A2 B8AF01                  		mov		ax,431
  1185 000008A5 50                      		push		ax
  1186 000008A6 B8CA01                  		mov		ax,458
  1187 000008A9 50                      		push		ax
  1188 000008AA B87E01                  		mov		ax,382
  1189 000008AD 50                      		push		ax
  1190 000008AE E8DD06                  		call		line
  1191                                  	
  1192 000008B1 B8CA01                  		mov		ax,458
  1193 000008B4 50                      		push		ax
  1194 000008B5 B8AF01                  		mov		ax,431
  1195 000008B8 50                      		push		ax
  1196 000008B9 B89B01                  		mov		ax,411
  1197 000008BC 50                      		push		ax
  1198 000008BD B87E01                  		mov		ax,382
  1199 000008C0 50                      		push		ax
  1200 000008C1 E8CA06                  		call		line
  1201 000008C4 C3                      		ret
  1202                                    
  1203                                  	x21:
  1204 000008C5 B89F00                  		mov		ax,159
  1205 000008C8 50                      		push		ax
  1206 000008C9 B83001                  		mov		ax,304
  1207 000008CC 50                      		push		ax
  1208 000008CD B8CE00                  		mov		ax,206
  1209 000008D0 50                      		push		ax
  1210 000008D1 B8FF00                  		mov		ax,255
  1211 000008D4 50                      		push		ax
  1212 000008D5 E8B606                  		call		line
  1213                                  
  1214 000008D8 B8CE00                  		mov		ax,206
  1215 000008DB 50                      		push		ax
  1216 000008DC B83001                  		mov		ax,304
  1217 000008DF 50                      		push		ax
  1218 000008E0 B89F00                  		mov		ax,159
  1219 000008E3 50                      		push		ax
  1220 000008E4 B8FF00                  		mov		ax,255
  1221 000008E7 50                      		push		ax
  1222 000008E8 E8A306                  		call		line
  1223 000008EB C3                      		ret
  1224                                    
  1225                                  	x22:
  1226 000008EC B81D01                  		mov		ax,285
  1227 000008EF 50                      		push		ax
  1228 000008F0 B83001                  		mov		ax,304
  1229 000008F3 50                      		push		ax
  1230 000008F4 B84C01                  		mov		ax,332
  1231 000008F7 50                      		push		ax
  1232 000008F8 B8FF00                  		mov		ax,255
  1233 000008FB 50                      		push		ax
  1234 000008FC E88F06                  		call		line
  1235                                  
  1236 000008FF B84C01                  		mov		ax,332
  1237 00000902 50                      		push		ax
  1238 00000903 B83001                  		mov		ax,304
  1239 00000906 50                      		push		ax
  1240 00000907 B81D01                  		mov		ax,285
  1241 0000090A 50                      		push		ax
  1242 0000090B B8FF00                  		mov		ax,255
  1243 0000090E 50                      		push		ax
  1244 0000090F E87C06                  		call		line
  1245 00000912 C3                      		ret
  1246                                    
  1247                                  	x23:
  1248 00000913 B89B01                  		mov		ax,411
  1249 00000916 50                      		push		ax
  1250 00000917 B83001                  		mov		ax,304
  1251 0000091A 50                      		push		ax
  1252 0000091B B8CA01                  		mov		ax,458
  1253 0000091E 50                      		push		ax
  1254 0000091F B8FF00                  		mov		ax,255
  1255 00000922 50                      		push		ax
  1256 00000923 E86806                  		call		line
  1257                                  	
  1258 00000926 B8CA01                  		mov		ax,458
  1259 00000929 50                      		push		ax
  1260 0000092A B83001                  		mov		ax,304
  1261 0000092D 50                      		push		ax
  1262 0000092E B89B01                  		mov		ax,411
  1263 00000931 50                      		push		ax
  1264 00000932 B8FF00                  		mov		ax,255
  1265 00000935 50                      		push		ax
  1266 00000936 E85506                  		call		line
  1267 00000939 C3                      		ret
  1268                                    
  1269                                  	x31:	
  1270 0000093A B89F00                  		mov		ax,159
  1271 0000093D 50                      		push		ax
  1272 0000093E B88100                  		mov		ax,129
  1273 00000941 50                      		push		ax
  1274 00000942 B8CE00                  		mov		ax,206
  1275 00000945 50                      		push		ax
  1276 00000946 B8B200                  		mov		ax,178
  1277 00000949 50                      		push		ax
  1278 0000094A E84106                  		call		line
  1279                                  		
  1280 0000094D B8CE00                  		mov		ax,206
  1281 00000950 50                      		push		ax
  1282 00000951 B88100                  		mov		ax,129
  1283 00000954 50                      		push		ax
  1284 00000955 B89F00                  		mov		ax,159
  1285 00000958 50                      		push		ax
  1286 00000959 B8B200                  		mov		ax,178
  1287 0000095C 50                      		push		ax
  1288 0000095D E82E06                  		call		line
  1289 00000960 C3                      		ret
  1290                                    
  1291                                  	x32:
  1292 00000961 B81D01                  		mov		ax,285
  1293 00000964 50                      		push		ax
  1294 00000965 B88100                  		mov		ax,129
  1295 00000968 50                      		push		ax
  1296 00000969 B84C01                  		mov		ax,332
  1297 0000096C 50                      		push		ax
  1298 0000096D B8B200                  		mov		ax,178
  1299 00000970 50                      		push		ax
  1300 00000971 E81A06                  		call		line
  1301                                  	
  1302 00000974 B84C01                  		mov		ax,332
  1303 00000977 50                      		push		ax
  1304 00000978 B88100                  		mov		ax,129
  1305 0000097B 50                      		push		ax
  1306 0000097C B81D01                  		mov		ax,285
  1307 0000097F 50                      		push		ax
  1308 00000980 B8B200                  		mov		ax,178
  1309 00000983 50                      		push		ax
  1310 00000984 E80706                  		call		line
  1311 00000987 C3                      		ret
  1312                                    
  1313                                  	x33:	
  1314 00000988 B89B01                  		mov		ax,411
  1315 0000098B 50                      		push		ax
  1316 0000098C B88100                  		mov		ax,129
  1317 0000098F 50                      		push		ax
  1318 00000990 B8CA01                  		mov		ax,458
  1319 00000993 50                      		push		ax
  1320 00000994 B8B200                  		mov		ax,178
  1321 00000997 50                      		push		ax
  1322 00000998 E8F305                  		call		line
  1323                                  	
  1324 0000099B B8CA01                  		mov		ax,458
  1325 0000099E 50                      		push		ax
  1326 0000099F B88100                  		mov		ax,129
  1327 000009A2 50                      		push		ax
  1328 000009A3 B89B01                  		mov		ax,411
  1329 000009A6 50                      		push		ax
  1330 000009A7 B8B200                  		mov		ax,178
  1331 000009AA 50                      		push		ax
  1332 000009AB E8E005                  		call		line
  1333 000009AE C3                      		ret
  1334                                  
  1335                                  clear_terminal:
  1336 000009AF 53                      	push	bx
  1337 000009B0 50                      	push	ax
  1338                                  
  1339 000009B1 BB0000                  	mov 			bx, 0
  1340 000009B4 B90400                  	mov     	cx, 4			;n�mero de caracteres
  1341 000009B7 B608                    	mov 			dh, 8 ;linha 0-29
  1342 000009B9 B201                    	mov 			dl, 1 ;coluna 0-79
  1343 000009BB C606[0000]0F            	mov		byte[cor],branco_intenso
  1344                                  		
  1345                                  	lclear_terminal:
  1346 000009C0 E8D403                  		call	cursor
  1347 000009C3 8A87[7300]              		mov     al,[bx+string_empty_terminal]
  1348 000009C7 E8E403                  		call	caracter
  1349 000009CA 43                      		inc     bx			;proximo caracter
  1350 000009CB FEC2                    		inc			dl			;avanca a coluna
  1351 000009CD E2F1                    		loop    lclear_terminal
  1352                                  
  1353 000009CF 58                      	pop	ax
  1354 000009D0 5B                      	pop bx
  1355 000009D1 C3                      	ret
  1356                                  		
  1357                                  check_if_C_won:
  1358                                  	; Checa para a linha 1
  1359 000009D2 803E[F200]43            		cmp byte[cell11], 'C' 										;Verifica se cell11 é igual a C
  1360 000009D7 742B                    		je step_11												
  1361                                  		return_11:
  1362                                  
  1363 000009D9 803E[F300]43            		cmp byte[cell12], 'C'											;Verifica se a cell12 é igual a C
  1364 000009DE 7418                    		je jmp_bridge_step_12
  1365                                  		return_12:
  1366                                  
  1367 000009E0 803E[F400]43            		cmp byte[cell13], 'C'											;Verifica se a cell13 é igual a C
  1368 000009E5 7414                    		je jmp_bridge_step_13 
  1369                                  		return_13:
  1370                                  
  1371 000009E7 803E[F500]43            		cmp byte[cell21], 'C'											;Verifica se a cell13 é igual a C
  1372 000009EC 7410                    		je jmp_bridge_step_21 
  1373                                  		return_21:
  1374                                  
  1375 000009EE 803E[F800]43            		cmp byte[cell31], 'C'											;Verifica se a cell13 é igual a C
  1376 000009F3 740C                    		je jmp_bridge_step_31 
  1377                                  		return_31:
  1378                                  
  1379 000009F5 E9C8F8                  		jmp main_loop
  1380                                  		jmp_bridge_step_12:
  1381 000009F8 E87800                  			call step_12
  1382                                  
  1383                                  		jmp_bridge_step_13:
  1384 000009FB E89C00                  			call step_13
  1385                                  
  1386                                  		jmp_bridge_step_21:
  1387 000009FE E8E400                  			call step_21
  1388                                  
  1389                                  		jmp_bridge_step_31:
  1390 00000A01 E80801                  			call step_31
  1391                                  		
  1392                                  		step_11:
  1393 00000A04 803E[F300]43            			cmp byte[cell12], 'C'										;Verifica se cell 12 é igual a C
  1394 00000A09 7411                    			je step_11_12
  1395                                  			return_11_12:
  1396                                  
  1397 00000A0B 803E[F500]43            			cmp byte[cell21], 'C'										;Verifica se cell 21 é igual a C
  1398 00000A10 7427                    			je step_11_21
  1399                                  			return_11_21:
  1400                                  
  1401 00000A12 803E[F600]43            			cmp byte[cell22], 'C'										;Verifica se a cell 22 é igual a C
  1402 00000A17 743D                    			je step_11_22
  1403                                  			return_11_22:
  1404                                  
  1405 00000A19 E9BDFF                  			jmp return_11
  1406                                  
  1407                                  			step_11_12:
  1408 00000A1C 803E[F400]43            				cmp byte[cell13], 'C'									; Verifica se cell 13 também é igual a C
  1409 00000A21 7403                    				je step_11_12_13											; Se for, chama a última etapa dessa sequencia
  1410 00000A23 E9E5FF                  				jmp return_11_12    									; Se não, retorna para o endereço após a função
  1411                                  
  1412                                  				step_11_12_13: 
  1413 00000A26 C606[0000]09            					mov	 byte[cor],azul_claro 
  1414 00000A2B E86C02                  					call SVL1															;Imprime a linha 1
  1415 00000A2E C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1416 00000A33 E80403                  					call print_victory_for_player_C
  1417 00000A36 E987F8                  					jmp main_loop										
  1418                                  
  1419                                  			step_11_21:
  1420 00000A39 803E[F800]43            				cmp byte[cell31], 'C'										; Verifica se a cell 31 também é igual a C
  1421 00000A3E 7403                    				je step_11_21_31   											; Se for, imprime a coluna 1
  1422 00000A40 E9CFFF                  				jmp return_11_21	
  1423                                  
  1424                                  				step_11_21_31:
  1425 00000A43 C606[0000]09            					mov	 byte[cor],azul_claro
  1426 00000A48 E88B02                  					call SVC1															;Imprime a coluna 1
  1427 00000A4B C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1428 00000A50 E8E702                  					call print_victory_for_player_C				;Imprime quem venceu
  1429 00000A53 E96AF8                  					jmp main_loop;
  1430                                  			step_11_22:
  1431 00000A56 803E[FA00]43            				cmp byte[cell33], 'C'										; Verifica se a cell 33 também é igual a C
  1432 00000A5B 7403                    				je step_11_22_33 												; Se for, imprime a primeira diagonal
  1433 00000A5D E9B9FF                  				jmp return_11_22;
  1434                                  
  1435                                  				step_11_22_33:
  1436 00000A60 C606[0000]09            					mov	 byte[cor],azul_claro
  1437 00000A65 E8AA02                  					call SVD1															;Imprime a diagonal 1
  1438 00000A68 C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1439 00000A6D E8CA02                  					call print_victory_for_player_C				;Imprime quem venceu
  1440 00000A70 E94DF8                  					jmp main_loop;
  1441                                  
  1442                                  		step_12:
  1443 00000A73 803E[F600]43            			cmp byte[cell22], 'C'											;Verifica se cell22 é igual a C
  1444 00000A78 7403                    			je step_12_22
  1445                                  			return_12_22:
  1446                                  
  1447 00000A7A E963FF                  			jmp return_12
  1448                                  
  1449                                  			step_12_22:
  1450 00000A7D 803E[F900]43            				cmp byte[cell32], 'C' 		 							;Verifica se a cell32 tammbém é a igual 'C'
  1451 00000A82 7403                    				je step_12_22_32        	 							
  1452                                  
  1453 00000A84 E9F3FF                  				jmp return_12_22;
  1454                                  
  1455                                  				step_12_22_32:
  1456 00000A87 C606[0000]09            					mov	 byte[cor],azul_claro 
  1457 00000A8C E85B02                  					call SVC2															;Imprime a coluna 2
  1458 00000A8F C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1459 00000A94 E8A302                  					call print_victory_for_player_C
  1460 00000A97 E926F8                  					jmp main_loop;						
  1461                                  		step_13:
  1462 00000A9A 803E[F700]43            			cmp byte[cell23], 'C'											;Verifica se cell23 é igual a C
  1463 00000A9F 740A                    			je step_13_23
  1464                                  			return_11_23:
  1465                                  
  1466 00000AA1 803E[F600]43            			cmp byte[cell22], 'C'											;Verifica se a cell22 é igual a C
  1467 00000AA6 7420                    			je step_13_22  
  1468                                  			return_13_22:
  1469                                  
  1470 00000AA8 E93CFF                  			jmp return_13
  1471                                  
  1472                                  			step_13_23:
  1473 00000AAB 803E[FA00]43            				cmp byte[cell33], 'C'     							;Verifica se a cell33 tammbém é a igual 'C'
  1474 00000AB0 7403                    				je  step_13_23_33         							;Se for, imprime a coluna 3
  1475 00000AB2 E9ECFF                  				jmp return_11_23
  1476                                  
  1477                                  				step_13_23_33: 
  1478 00000AB5 C606[0000]09            					mov	 byte[cor],azul_claro 
  1479 00000ABA E84102                  					call SVC3															;Imprime a coluna 3
  1480 00000ABD C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1481 00000AC2 E87502                  					call print_victory_for_player_C
  1482 00000AC5 E9F8F7                  					jmp main_loop
  1483                                  			
  1484                                  			step_13_22:
  1485 00000AC8 803E[F800]43            				cmp byte[cell31], 'C' 									;Verifica se a cell31 tammbém é a igual 'C'
  1486 00000ACD 7403                    				je  step_13_22_31         							;Se for, imprime a diagonal 2
  1487 00000ACF E9D6FF                  				jmp return_13_22
  1488                                  				
  1489                                  				step_13_22_31: 
  1490 00000AD2 C606[0000]09            					mov	 byte[cor],azul_claro 
  1491 00000AD7 E84C02                  					call SVD2															;Imprime a diagonal 2
  1492 00000ADA C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1493 00000ADF E85802                  					call print_victory_for_player_C
  1494 00000AE2 E9DBF7                  					jmp main_loop;	
  1495                                  
  1496                                  		step_21:
  1497 00000AE5 803E[F600]43            			cmp byte[cell22], 'C'										;Verifica se cell 12 é igual a C
  1498 00000AEA 7403                    			je step_21_22
  1499                                  			return_21_22:
  1500                                  
  1501 00000AEC E9FFFE                  			jmp return_21
  1502                                  			step_21_22:
  1503 00000AEF 803E[F700]43            				cmp byte[cell23], 'C'
  1504 00000AF4 7403                    				je step_21_22_23
  1505                                  
  1506 00000AF6 E9F3FF                  				jmp return_21_22
  1507                                  				step_21_22_23:
  1508 00000AF9 C606[0000]09            					mov	 byte[cor],azul_claro 
  1509 00000AFE E8AD01                  					call SVL2															;Imprime a linha 2
  1510 00000B01 C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1511 00000B06 E83102                  					call print_victory_for_player_C
  1512 00000B09 E9B4F7                  					jmp main_loop			
  1513                                  		step_31:
  1514 00000B0C 803E[F900]43            			cmp byte[cell32], 'C'										;Verifica se cell 12 é igual a C
  1515 00000B11 7403                    			je step_31_32
  1516                                  			return_31_32:
  1517                                  
  1518 00000B13 E9DFFE                  			jmp return_31
  1519                                  			step_31_32:
  1520 00000B16 803E[FA00]43            				cmp byte[cell33], 'C'
  1521 00000B1B 7403                    				je step_31_32_33
  1522                                  
  1523 00000B1D E9F3FF                  				jmp return_31_32
  1524                                  				step_31_32_33:
  1525 00000B20 C606[0000]09            					mov	 byte[cor],azul_claro 
  1526 00000B25 E89A01                  					call SVL3															;Imprime a linha 2
  1527 00000B28 C606[FC00]43            					mov byte[victorious_player], 'C'			;Defini como vitorioso o jogador 'C'
  1528 00000B2D E80A02                  					call print_victory_for_player_C
  1529 00000B30 E98DF7                  					jmp main_loop
  1530 00000B33 E98AF7                  	jmp main_loop
  1531                                  check_if_X_won:
  1532                                  	; Checa para a linha 1
  1533 00000B36 803E[F200]58            		cmp byte[cell11], 'X' 										;Verifica se cell11 é igual a C
  1534 00000B3B 742B                    		je step_X_11												
  1535                                  		return_X_11:
  1536                                  
  1537 00000B3D 803E[F300]58            		cmp byte[cell12], 'X'											;Verifica se a cell12 é igual a C
  1538 00000B42 7418                    		je jmp_bridge_step_X_12
  1539                                  		return_X_12:
  1540                                  
  1541 00000B44 803E[F400]58            		cmp byte[cell13], 'X'											;Verifica se a cell13 é igual a C
  1542 00000B49 7414                    		je jmp_bridge_step_X_13 
  1543                                  		return_X_13:
  1544                                  
  1545 00000B4B 803E[F500]58            		cmp byte[cell21], 'X'											;Verifica se a cell13 é igual a C
  1546 00000B50 7410                    		je jmp_bridge_step_X_21 
  1547                                  		return_X_21:
  1548                                  
  1549 00000B52 803E[F800]58            		cmp byte[cell31], 'X'											;Verifica se a cell13 é igual a C
  1550 00000B57 740C                    		je jmp_bridge_step_X_31 
  1551                                  		return_X_31:
  1552                                  
  1553 00000B59 E964F7                  		jmp main_loop
  1554                                  		jmp_bridge_step_X_12:
  1555 00000B5C E87800                  			call step_X_12
  1556                                  
  1557                                  		jmp_bridge_step_X_13:
  1558 00000B5F E89C00                  			call step_X_13
  1559                                  
  1560                                  		jmp_bridge_step_X_21:
  1561 00000B62 E8E400                  			call step_X_21
  1562                                  
  1563                                  		jmp_bridge_step_X_31:
  1564 00000B65 E80801                  			call step_X_31
  1565                                  		
  1566                                  		step_X_11:
  1567 00000B68 803E[F300]58            			cmp byte[cell12], 'X'										;Verifica se cell 12 é igual a C
  1568 00000B6D 7411                    			je step_X_11_12
  1569                                  			return_X_11_12:
  1570                                  
  1571 00000B6F 803E[F500]58            			cmp byte[cell21], 'X'										;Verifica se cell 21 é igual a C
  1572 00000B74 7427                    			je step_X_11_21
  1573                                  			return_X_11_21:
  1574                                  
  1575 00000B76 803E[F600]58            			cmp byte[cell22], 'X'										;Verifica se a cell 22 é igual a C
  1576 00000B7B 743D                    			je step_X_11_22
  1577                                  			return_X_11_22:
  1578                                  
  1579 00000B7D E9BDFF                  			jmp return_X_11
  1580                                  
  1581                                  			step_X_11_12:
  1582 00000B80 803E[F400]58            				cmp byte[cell13], 'X'									; Verifica se cell 13 também é igual a C
  1583 00000B85 7403                    				je step_X_11_12_13											; Se for, chama a última etapa dessa sequencia
  1584 00000B87 E9E5FF                  				jmp return_X_11_12    									; Se não, retorna para o endereço após a função
  1585                                  
  1586                                  				step_X_11_12_13: 
  1587 00000B8A C606[0000]09            					mov	 byte[cor],azul_claro 
  1588 00000B8F E80801                  					call SVL1															;Imprime a linha 1
  1589 00000B92 C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1590 00000B97 E8BF01                  					call print_victory_for_player_X
  1591 00000B9A E923F7                  					jmp main_loop										
  1592                                  
  1593                                  			step_X_11_21:
  1594 00000B9D 803E[F800]58            				cmp byte[cell31], 'X'										; Verifica se a cell 31 também é igual a C
  1595 00000BA2 7403                    				je step_X_11_21_31   											; Se for, imprime a coluna 1
  1596 00000BA4 E9CFFF                  				jmp return_X_11_21	
  1597                                  
  1598                                  				step_X_11_21_31:
  1599 00000BA7 C606[0000]09            					mov	 byte[cor],azul_claro
  1600 00000BAC E82701                  					call SVC1															;Imprime a coluna 1
  1601 00000BAF C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1602 00000BB4 E8A201                  					call print_victory_for_player_X				;Imprime quem venceu
  1603 00000BB7 E906F7                  					jmp main_loop;
  1604                                  			step_X_11_22:
  1605 00000BBA 803E[FA00]58            				cmp byte[cell33], 'X'										; Verifica se a cell 33 também é igual a C
  1606 00000BBF 7403                    				je step_X_11_22_33 												; Se for, imprime a primeira diagonal
  1607 00000BC1 E9B9FF                  				jmp return_X_11_22;
  1608                                  
  1609                                  				step_X_11_22_33:
  1610 00000BC4 C606[0000]09            					mov	 byte[cor],azul_claro
  1611 00000BC9 E84601                  					call SVD1															;Imprime a diagonal 1
  1612 00000BCC C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1613 00000BD1 E88501                  					call print_victory_for_player_X				;Imprime quem venceu
  1614 00000BD4 E9E9F6                  					jmp main_loop;
  1615                                  
  1616                                  		step_X_12:
  1617 00000BD7 803E[F600]58            			cmp byte[cell22], 'X'											;Verifica se cell22 é igual a C
  1618 00000BDC 7403                    			je step_X_12_22
  1619                                  			return_X_12_22:
  1620                                  
  1621 00000BDE E963FF                  			jmp return_X_12
  1622                                  
  1623                                  			step_X_12_22:
  1624 00000BE1 803E[F900]58            				cmp byte[cell32], 'X' 		 							;Verifica se a cell32 tammbém é a igual 'C'
  1625 00000BE6 7403                    				je step_X_12_22_32        	 							
  1626                                  
  1627 00000BE8 E9F3FF                  				jmp return_X_12_22;
  1628                                  
  1629                                  				step_X_12_22_32:
  1630 00000BEB C606[0000]09            					mov	 byte[cor],azul_claro 
  1631 00000BF0 E8F700                  					call SVC2															;Imprime a coluna 2
  1632 00000BF3 C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1633 00000BF8 E85E01                  					call print_victory_for_player_X
  1634 00000BFB E9C2F6                  					jmp main_loop;						
  1635                                  		step_X_13:
  1636 00000BFE 803E[F700]58            			cmp byte[cell23], 'X'											;Verifica se cell23 é igual a C
  1637 00000C03 740A                    			je step_X_13_23
  1638                                  			return_X_11_23:
  1639                                  
  1640 00000C05 803E[F600]58            			cmp byte[cell22], 'X'											;Verifica se a cell22 é igual a C
  1641 00000C0A 7420                    			je step_X_13_22  
  1642                                  			return_X_13_22:
  1643                                  
  1644 00000C0C E93CFF                  			jmp return_X_13
  1645                                  
  1646                                  			step_X_13_23:
  1647 00000C0F 803E[FA00]58            				cmp byte[cell33], 'X'     							;Verifica se a cell33 tammbém é a igual 'C'
  1648 00000C14 7403                    				je  step_X_13_23_33         							;Se for, imprime a coluna 3
  1649 00000C16 E9ECFF                  				jmp return_X_11_23
  1650                                  
  1651                                  				step_X_13_23_33: 
  1652 00000C19 C606[0000]09            					mov	 byte[cor],azul_claro 
  1653 00000C1E E8DD00                  					call SVC3															;Imprime a coluna 3
  1654 00000C21 C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1655 00000C26 E83001                  					call print_victory_for_player_X
  1656 00000C29 E994F6                  					jmp main_loop
  1657                                  			
  1658                                  			step_X_13_22:
  1659 00000C2C 803E[F800]58            				cmp byte[cell31], 'X' 									;Verifica se a cell31 tammbém é a igual 'C'
  1660 00000C31 7403                    				je  step_X_13_22_31         							;Se for, imprime a diagonal 2
  1661 00000C33 E9D6FF                  				jmp return_X_13_22
  1662                                  				
  1663                                  				step_X_13_22_31: 
  1664 00000C36 C606[0000]09            					mov	 byte[cor],azul_claro 
  1665 00000C3B E8E800                  					call SVD2															;Imprime a diagonal 2
  1666 00000C3E C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1667 00000C43 E81301                  					call print_victory_for_player_X
  1668 00000C46 E977F6                  					jmp main_loop;	
  1669                                  
  1670                                  		step_X_21:
  1671 00000C49 803E[F600]58            			cmp byte[cell22], 'X'										;Verifica se cell 12 é igual a C
  1672 00000C4E 7403                    			je step_X_21_22
  1673                                  			return_X_21_22:
  1674                                  
  1675 00000C50 E9FFFE                  			jmp return_X_21
  1676                                  			step_X_21_22:
  1677 00000C53 803E[F700]58            				cmp byte[cell23], 'X'
  1678 00000C58 7403                    				je step_X_21_22_23
  1679                                  
  1680 00000C5A E9F3FF                  				jmp return_X_21_22
  1681                                  				step_X_21_22_23:
  1682 00000C5D C606[0000]09            					mov	 byte[cor],azul_claro 
  1683 00000C62 E84900                  					call SVL2															;Imprime a linha 2
  1684 00000C65 C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1685 00000C6A E8EC00                  					call print_victory_for_player_X
  1686 00000C6D E950F6                  					jmp main_loop			
  1687                                  		step_X_31:
  1688 00000C70 803E[F900]58            			cmp byte[cell32], 'X'										;Verifica se cell 12 é igual a C
  1689 00000C75 7403                    			je step_X_31_32
  1690                                  			return_X_31_32:
  1691                                  
  1692 00000C77 E9DFFE                  			jmp return_X_31
  1693                                  			step_X_31_32:
  1694 00000C7A 803E[FA00]58            				cmp byte[cell33], 'X'
  1695 00000C7F 7403                    				je step_X_31_32_33
  1696                                  
  1697 00000C81 E9F3FF                  				jmp return_X_31_32
  1698                                  				step_X_31_32_33:
  1699 00000C84 C606[0000]09            					mov	 byte[cor],azul_claro 
  1700 00000C89 E83600                  					call SVL3															;Imprime a linha 2
  1701 00000C8C C606[FC00]58            					mov byte[victorious_player], 'X'			;Defini como vitorioso o jogador 'C'
  1702 00000C91 E8C500                  					call print_victory_for_player_X
  1703 00000C94 E929F6                  					jmp main_loop
  1704 00000C97 E926F6                  	jmp main_loop  
  1705                                  	; CHECA PARA X
  1706                                  ;Desenhar linha da seguencia vencedora
  1707                                    ;Sequencia linha 1
  1708                                      SVL1:
  1709 00000C9A B87700                        mov		ax,119
  1710 00000C9D 50                            push		ax
  1711 00000C9E B89601                        mov		ax,406
  1712 00000CA1 50                            push		ax
  1713 00000CA2 B8F201                        mov		ax,498
  1714 00000CA5 50                            push		ax
  1715 00000CA6 B89601                        mov		ax,406
  1716 00000CA9 50                            push		ax
  1717 00000CAA E8E102                        call		line
  1718 00000CAD C3                      			ret 
  1719                                    ;Sequencia linha 2
  1720                                      SVL2:
  1721                                  	
  1722 00000CAE B87700                          mov		ax,119
  1723 00000CB1 50                              push		ax
  1724 00000CB2 B81801                          mov		ax,280
  1725 00000CB5 50                              push		ax
  1726 00000CB6 B8F201                          mov		ax,498
  1727 00000CB9 50                              push		ax
  1728 00000CBA B81801                          mov		ax,280
  1729 00000CBD 50                              push		ax
  1730 00000CBE E8CD02                          call		line
  1731 00000CC1 C3                      				ret
  1732                                    ;Sequencia linha 3
  1733                                      SVL3:
  1734                                  	
  1735 00000CC2 B87700                          mov		ax,119
  1736 00000CC5 50                              push		ax
  1737 00000CC6 B89900                          mov		ax,153
  1738 00000CC9 50                              push		ax
  1739 00000CCA B8F201                          mov		ax,498
  1740 00000CCD 50                              push		ax
  1741 00000CCE B89900                          mov		ax,153
  1742 00000CD1 50                              push		ax
  1743 00000CD2 E8B902                          call		line
  1744 00000CD5 C3                      				ret
  1745                                    ;Sequencia coluna 1
  1746                                  	 SVC1:	
  1747 00000CD6 B8B600                        mov		ax,182
  1748 00000CD9 50                            push		ax
  1749 00000CDA B8D501                        mov		ax,469
  1750 00000CDD 50                            push		ax
  1751 00000CDE B8B600                        mov		ax,182
  1752 00000CE1 50                            push		ax
  1753 00000CE2 B85A00                        mov		ax,90
  1754 00000CE5 50                            push		ax
  1755 00000CE6 E8A502                        call		line
  1756 00000CE9 C3                      			ret
  1757                                  	;Sequencia coluna 2
  1758                                  		SVC2:	
  1759 00000CEA B83401                        mov		ax,308
  1760 00000CED 50                            push		ax
  1761 00000CEE B8D501                        mov		ax,469
  1762 00000CF1 50                            push		ax
  1763 00000CF2 B83401                        mov		ax,308
  1764 00000CF5 50                            push		ax
  1765 00000CF6 B85A00                        mov		ax,90
  1766 00000CF9 50                            push		ax
  1767 00000CFA E89102                        call		line
  1768 00000CFD C3                      			ret
  1769                                    ;Sequencia coluna 3
  1770                                  		SVC3:
  1771                                  	
  1772 00000CFE B8B201                  				mov		ax,434
  1773 00000D01 50                      				push		ax
  1774 00000D02 B8D501                  				mov		ax,469
  1775 00000D05 50                      				push		ax
  1776 00000D06 B8B201                  				mov		ax,434
  1777 00000D09 50                      				push		ax
  1778 00000D0A B85A00                  				mov		ax,90
  1779 00000D0D 50                      				push		ax
  1780 00000D0E E87D02                  				call		line
  1781 00000D11 C3                      				ret
  1782                                    ;Sequencia diagonal 1
  1783                                  		SVD1:	
  1784 00000D12 B87700                  			mov		ax,119
  1785 00000D15 50                      			push		ax
  1786 00000D16 B8D501                  			mov		ax,469
  1787 00000D19 50                      			push		ax
  1788 00000D1A B8F101                  			mov		ax,497
  1789 00000D1D 50                      			push		ax
  1790 00000D1E B85B00                  			mov		ax,91
  1791 00000D21 50                      			push		ax
  1792 00000D22 E86902                  			call		line
  1793 00000D25 C3                      			ret
  1794                                    ;Sequencia diagonal 2
  1795                                  		SVD2:	
  1796 00000D26 B8F101                  			mov		ax,497
  1797 00000D29 50                      			push		ax
  1798 00000D2A B8D501                  			mov		ax,469
  1799 00000D2D 50                      			push		ax
  1800 00000D2E B87700                  			mov		ax,119
  1801 00000D31 50                      			push		ax
  1802 00000D32 B85B00                  			mov		ax,91
  1803 00000D35 50                      			push		ax
  1804 00000D36 E85502                  			call		line
  1805 00000D39 C3                      			ret
  1806                                  	;Imprime jogador que venceu ou empate
  1807                                  		print_victory_for_player_C:
  1808 00000D3A BB0000                  			mov 			bx, 0
  1809 00000D3D B91300                  			mov			  cx, 19 								;Carrega o tamanho da string em CX
  1810 00000D40 B61C                    			mov     	dh, 28								;linha 0-29
  1811 00000D42 B215                    			mov     	dl, 21								;coluna 0-79
  1812 00000D44 C606[0000]02            			mov		byte[cor],verde
  1813                                  			
  1814                                  			loop_print_victory_for_player_C:
  1815 00000D49 E84B00                  				call		cursor
  1816 00000D4C 8A87[AD00]              				mov     al,	[bx+string_player_C_victory]
  1817 00000D50 E85B00                  				call		caracter
  1818 00000D53 43                      				inc     bx			;proximo caracter
  1819 00000D54 FEC2                    				inc			dl			;avanca a coluna
  1820                                  				
  1821 00000D56 E2F1                    			loop    loop_print_victory_for_player_C
  1822 00000D58 C3                      			ret
  1823                                  		print_victory_for_player_X:
  1824 00000D59 BB0000                  			mov 			bx, 0
  1825 00000D5C B91300                  			mov			  cx, 19 								;Carrega o tamanho da string em CX
  1826 00000D5F B61C                    			mov     	dh, 28								;linha 0-29
  1827 00000D61 B215                    			mov     	dl, 21								;coluna 0-79
  1828 00000D63 C606[0000]02            			mov		byte[cor],verde
  1829                                  			
  1830                                  			loop_print_victory_for_player_X:
  1831 00000D68 E82C00                  				call		cursor
  1832 00000D6B 8A87[C000]              				mov     al,	[bx+string_player_X_victory]
  1833 00000D6F E83C00                  				call		caracter
  1834 00000D72 43                      				inc     bx			;proximo caracter
  1835 00000D73 FEC2                    				inc			dl			;avanca a coluna
  1836                                  				
  1837 00000D75 E2F1                    			loop    loop_print_victory_for_player_X
  1838 00000D77 C3                      			ret
  1839                                  		print_tied:
  1840 00000D78 BB0000                  			mov 			bx, 0
  1841 00000D7B B90D00                  			mov			  cx, 13 								;Carrega o tamanho da string em CX
  1842 00000D7E B61C                    			mov     	dh, 28								;linha 0-29
  1843 00000D80 B215                    			mov     	dl, 21								;coluna 0-79
  1844 00000D82 C606[0000]0E            			mov		byte[cor],amarelo
  1845                                  			
  1846                                  			loop_print_tied:
  1847 00000D87 E80D00                  				call		cursor
  1848 00000D8A 8A87[D300]              				mov     al,	[bx+string_tied]
  1849 00000D8E E81D00                  				call		caracter
  1850 00000D91 43                      				inc     bx			;proximo caracter
  1851 00000D92 FEC2                    				inc			dl			;avanca a coluna
  1852                                  				
  1853 00000D94 E2F1                    			loop    loop_print_tied
  1854 00000D96 C3                      			ret
  1855                                  	
  1856                                  
  1857                                  
  1858                                  
  1859                                  ;***************************************************************************
  1860                                  ;
  1861                                  ;   fun��o cursor
  1862                                  ;
  1863                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
  1864                                  cursor:
  1865 00000D97 9C                      		pushf
  1866 00000D98 50                      		push 		ax
  1867 00000D99 53                      		push 		bx
  1868 00000D9A 51                      		push		cx
  1869 00000D9B 52                      		push		dx
  1870 00000D9C 56                      		push		si
  1871 00000D9D 57                      		push		di
  1872 00000D9E 55                      		push		bp
  1873 00000D9F B402                    		mov     	ah,2
  1874 00000DA1 B700                    		mov     	bh,0
  1875 00000DA3 CD10                    		int     	10h
  1876 00000DA5 5D                      		pop		bp
  1877 00000DA6 5F                      		pop		di
  1878 00000DA7 5E                      		pop		si
  1879 00000DA8 5A                      		pop		dx
  1880 00000DA9 59                      		pop		cx
  1881 00000DAA 5B                      		pop		bx
  1882 00000DAB 58                      		pop		ax
  1883 00000DAC 9D                      		popf
  1884 00000DAD C3                      		ret
  1885                                  ;
  1886                                  ;escreve os nomes dos campos de comando e mensagem
  1887                                  
  1888                                  ;escreve numeros das cells do jogo da velha
  1889                                  _____________________________________________________________________________
  1890                                  ;
  1891                                  ;   fun��o caracter escrito na posi��o do cursor
  1892                                  ;
  1893                                  ; al= caracter a ser escrito
  1894                                  ; cor definida na variavel cor
  1895                                  caracter:
  1896 00000DAE 9C                      		pushf
  1897 00000DAF 50                      		push 		ax
  1898 00000DB0 53                      		push 		bx
  1899 00000DB1 51                      		push		cx
  1900 00000DB2 52                      		push		dx
  1901 00000DB3 56                      		push		si
  1902 00000DB4 57                      		push		di
  1903 00000DB5 55                      		push		bp
  1904 00000DB6 B409                        		mov     	ah,9
  1905 00000DB8 B700                        		mov     	bh,0
  1906 00000DBA B90100                      		mov     	cx,1
  1907 00000DBD 8A1E[0000]                 		mov     	bl,[cor]
  1908 00000DC1 CD10                        		int     	10h
  1909 00000DC3 5D                      		pop		bp
  1910 00000DC4 5F                      		pop		di
  1911 00000DC5 5E                      		pop		si
  1912 00000DC6 5A                      		pop		dx
  1913 00000DC7 59                      		pop		cx
  1914 00000DC8 5B                      		pop		bx
  1915 00000DC9 58                      		pop		ax
  1916 00000DCA 9D                      		popf
  1917 00000DCB C3                      		ret
  1918                                  ;_____________________________________________________________________________
  1919                                  ;
  1920                                  ;   fun��o plot_xy
  1921                                  ;
  1922                                  ; push x; push y; call plot_xy;  (x<639, y<479)
  1923                                  ; cor definida na variavel cor
  1924                                  plot_xy:
  1925 00000DCC 55                      		push		bp
  1926 00000DCD 89E5                    		mov		bp,sp
  1927 00000DCF 9C                      		pushf
  1928 00000DD0 50                      		push 		ax
  1929 00000DD1 53                      		push 		bx
  1930 00000DD2 51                      		push		cx
  1931 00000DD3 52                      		push		dx
  1932 00000DD4 56                      		push		si
  1933 00000DD5 57                      		push		di
  1934 00000DD6 B40C                    	    mov     	ah,0ch
  1935 00000DD8 A0[0000]                	    mov     	al,[cor]
  1936 00000DDB B700                    	    mov     	bh,0
  1937 00000DDD BADF01                  	    mov     	dx,479
  1938 00000DE0 2B5604                  		sub		dx,[bp+4]
  1939 00000DE3 8B4E06                  	    mov     	cx,[bp+6]
  1940 00000DE6 CD10                    	    int     	10h
  1941 00000DE8 5F                      		pop		di
  1942 00000DE9 5E                      		pop		si
  1943 00000DEA 5A                      		pop		dx
  1944 00000DEB 59                      		pop		cx
  1945 00000DEC 5B                      		pop		bx
  1946 00000DED 58                      		pop		ax
  1947 00000DEE 9D                      		popf
  1948 00000DEF 5D                      		pop		bp
  1949 00000DF0 C20400                  		ret		4
  1950                                  ;_____________________________________________________________________________
  1951                                  ;    fun��o circle
  1952                                  ;	 push xc; push yc; push r; call circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  1953                                  ; cor definida na variavel cor
  1954                                  circle:
  1955 00000DF3 55                      	push 	bp
  1956 00000DF4 89E5                    	mov	 	bp,sp
  1957 00000DF6 9C                      	pushf                        ;coloca os flags na pilha
  1958 00000DF7 50                      	push 	ax
  1959 00000DF8 53                      	push 	bx
  1960 00000DF9 51                      	push	cx
  1961 00000DFA 52                      	push	dx
  1962 00000DFB 56                      	push	si
  1963 00000DFC 57                      	push	di
  1964                                  	
  1965 00000DFD 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  1966 00000E00 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  1967 00000E03 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  1968                                  	
  1969 00000E06 89DA                    	mov 	dx,bx	
  1970 00000E08 01CA                    	add		dx,cx       ;ponto extremo superior
  1971 00000E0A 50                      	push    ax			
  1972 00000E0B 52                      	push	dx
  1973 00000E0C E8BDFF                  	call plot_xy
  1974                                  	
  1975 00000E0F 89DA                    	mov		dx,bx
  1976 00000E11 29CA                    	sub		dx,cx       ;ponto extremo inferior
  1977 00000E13 50                      	push    ax			
  1978 00000E14 52                      	push	dx
  1979 00000E15 E8B4FF                  	call plot_xy
  1980                                  	
  1981 00000E18 89C2                    	mov 	dx,ax	
  1982 00000E1A 01CA                    	add		dx,cx       ;ponto extremo direita
  1983 00000E1C 52                      	push    dx			
  1984 00000E1D 53                      	push	bx
  1985 00000E1E E8ABFF                  	call plot_xy
  1986                                  	
  1987 00000E21 89C2                    	mov		dx,ax
  1988 00000E23 29CA                    	sub		dx,cx       ;ponto extremo esquerda
  1989 00000E25 52                      	push    dx			
  1990 00000E26 53                      	push	bx
  1991 00000E27 E8A2FF                  	call plot_xy
  1992                                  		
  1993 00000E2A 89CF                    	mov		di,cx
  1994 00000E2C 81EF0100                	sub		di,1	 ;di=r-1
  1995 00000E30 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  1996                                  	
  1997                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  1998                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  1999                                  ;valores positivos para d
  2000                                  
  2001                                  stay:				;loop
  2002 00000E33 89FE                    	mov		si,di
  2003 00000E35 81FE0000                	cmp		si,0
  2004 00000E39 7F0E                    	jg		inf       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  2005 00000E3B 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  2006 00000E3D D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  2007 00000E3F 81C60300                	add		si,3
  2008 00000E43 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  2009 00000E45 42                      	inc		dx		;incrementa dx
  2010 00000E46 E90E00                  	jmp		plotar
  2011                                  inf:	
  2012 00000E49 89D6                    	mov		si,dx
  2013 00000E4B 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  2014 00000E4D D1E6                    	sal		si,1
  2015 00000E4F 81C60500                	add		si,5
  2016 00000E53 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  2017 00000E55 42                      	inc		dx		;incrementa x (dx)
  2018 00000E56 49                      	dec		cx		;decrementa y (cx)
  2019                                  	
  2020                                  plotar:	
  2021 00000E57 89D6                    	mov		si,dx
  2022 00000E59 01C6                    	add		si,ax
  2023 00000E5B 56                      	push    si			;coloca a abcisa x+xc na pilha
  2024 00000E5C 89CE                    	mov		si,cx
  2025 00000E5E 01DE                    	add		si,bx
  2026 00000E60 56                      	push    si			;coloca a ordenada y+yc na pilha
  2027 00000E61 E868FF                  	call plot_xy		;toma conta do segundo octante
  2028 00000E64 89C6                    	mov		si,ax
  2029 00000E66 01D6                    	add		si,dx
  2030 00000E68 56                      	push    si			;coloca a abcisa xc+x na pilha
  2031 00000E69 89DE                    	mov		si,bx
  2032 00000E6B 29CE                    	sub		si,cx
  2033 00000E6D 56                      	push    si			;coloca a ordenada yc-y na pilha
  2034 00000E6E E85BFF                  	call plot_xy		;toma conta do s�timo octante
  2035 00000E71 89C6                    	mov		si,ax
  2036 00000E73 01CE                    	add		si,cx
  2037 00000E75 56                      	push    si			;coloca a abcisa xc+y na pilha
  2038 00000E76 89DE                    	mov		si,bx
  2039 00000E78 01D6                    	add		si,dx
  2040 00000E7A 56                      	push    si			;coloca a ordenada yc+x na pilha
  2041 00000E7B E84EFF                  	call plot_xy		;toma conta do segundo octante
  2042 00000E7E 89C6                    	mov		si,ax
  2043 00000E80 01CE                    	add		si,cx
  2044 00000E82 56                      	push    si			;coloca a abcisa xc+y na pilha
  2045 00000E83 89DE                    	mov		si,bx
  2046 00000E85 29D6                    	sub		si,dx
  2047 00000E87 56                      	push    si			;coloca a ordenada yc-x na pilha
  2048 00000E88 E841FF                  	call plot_xy		;toma conta do oitavo octante
  2049 00000E8B 89C6                    	mov		si,ax
  2050 00000E8D 29D6                    	sub		si,dx
  2051 00000E8F 56                      	push    si			;coloca a abcisa xc-x na pilha
  2052 00000E90 89DE                    	mov		si,bx
  2053 00000E92 01CE                    	add		si,cx
  2054 00000E94 56                      	push    si			;coloca a ordenada yc+y na pilha
  2055 00000E95 E834FF                  	call plot_xy		;toma conta do terceiro octante
  2056 00000E98 89C6                    	mov		si,ax
  2057 00000E9A 29D6                    	sub		si,dx
  2058 00000E9C 56                      	push    si			;coloca a abcisa xc-x na pilha
  2059 00000E9D 89DE                    	mov		si,bx
  2060 00000E9F 29CE                    	sub		si,cx
  2061 00000EA1 56                      	push    si			;coloca a ordenada yc-y na pilha
  2062 00000EA2 E827FF                  	call plot_xy		;toma conta do sexto octante
  2063 00000EA5 89C6                    	mov		si,ax
  2064 00000EA7 29CE                    	sub		si,cx
  2065 00000EA9 56                      	push    si			;coloca a abcisa xc-y na pilha
  2066 00000EAA 89DE                    	mov		si,bx
  2067 00000EAC 29D6                    	sub		si,dx
  2068 00000EAE 56                      	push    si			;coloca a ordenada yc-x na pilha
  2069 00000EAF E81AFF                  	call plot_xy		;toma conta do quinto octante
  2070 00000EB2 89C6                    	mov		si,ax
  2071 00000EB4 29CE                    	sub		si,cx
  2072 00000EB6 56                      	push    si			;coloca a abcisa xc-y na pilha
  2073 00000EB7 89DE                    	mov		si,bx
  2074 00000EB9 01D6                    	add		si,dx
  2075 00000EBB 56                      	push    si			;coloca a ordenada yc-x na pilha
  2076 00000EBC E80DFF                  	call plot_xy		;toma conta do quarto octante
  2077                                  	
  2078 00000EBF 39D1                    	cmp		cx,dx
  2079 00000EC1 7203                    	jb		fim_circle  ;se cx (y) est� abaixo de dx (x), termina     
  2080 00000EC3 E96DFF                  	jmp		stay		;se cx (y) est� acima de dx (x), continua no loop
  2081                                  	
  2082                                  	
  2083                                  fim_circle:
  2084 00000EC6 5F                      	pop		di
  2085 00000EC7 5E                      	pop		si
  2086 00000EC8 5A                      	pop		dx
  2087 00000EC9 59                      	pop		cx
  2088 00000ECA 5B                      	pop		bx
  2089 00000ECB 58                      	pop		ax
  2090 00000ECC 9D                      	popf
  2091 00000ECD 5D                      	pop		bp
  2092 00000ECE C20600                  	ret		6
  2093                                  ;-----------------------------------------------------------------------------
  2094                                  ;    fun��o full_circle
  2095                                  ;	 push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
  2096                                  ; cor definida na variavel cor
  2097                                  
  2098                                  full_circle:
  2099 00000ED1 55                      	push 	bp
  2100 00000ED2 89E5                    	mov	 	bp,sp
  2101 00000ED4 9C                      	pushf                        ;coloca os flags na pilha
  2102 00000ED5 50                      	push 	ax
  2103 00000ED6 53                      	push 	bx
  2104 00000ED7 51                      	push	cx
  2105 00000ED8 52                      	push	dx
  2106 00000ED9 56                      	push	si
  2107 00000EDA 57                      	push	di
  2108                                  
  2109 00000EDB 8B4608                  	mov		ax,[bp+8]    ; resgata xc
  2110 00000EDE 8B5E06                  	mov		bx,[bp+6]    ; resgata yc
  2111 00000EE1 8B4E04                  	mov		cx,[bp+4]    ; resgata r
  2112                                  	
  2113 00000EE4 89DE                    	mov		si,bx
  2114 00000EE6 29CE                    	sub		si,cx
  2115 00000EE8 50                      	push    ax			;coloca xc na pilha			
  2116 00000EE9 56                      	push	si			;coloca yc-r na pilha
  2117 00000EEA 89DE                    	mov		si,bx
  2118 00000EEC 01CE                    	add		si,cx
  2119 00000EEE 50                      	push	ax		;coloca xc na pilha
  2120 00000EEF 56                      	push	si		;coloca yc+r na pilha
  2121 00000EF0 E89B00                  	call line
  2122                                  	
  2123                                  		
  2124 00000EF3 89CF                    	mov		di,cx
  2125 00000EF5 81EF0100                	sub		di,1	 ;di=r-1
  2126 00000EF9 BA0000                  	mov		dx,0  	;dx ser� a vari�vel x. cx � a variavel y
  2127                                  	
  2128                                  ;aqui em cima a l�gica foi invertida, 1-r => r-1
  2129                                  ;e as compara��es passaram a ser jl => jg, assim garante 
  2130                                  ;valores positivos para d
  2131                                  
  2132                                  stay_full:				;loop
  2133 00000EFC 89FE                    	mov		si,di
  2134 00000EFE 81FE0000                	cmp		si,0
  2135 00000F02 7F0E                    	jg		inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
  2136 00000F04 89D6                    	mov		si,dx		;o jl � importante porque trata-se de conta com sinal
  2137 00000F06 D1E6                    	sal		si,1		;multiplica por doi (shift arithmetic left)
  2138 00000F08 81C60300                	add		si,3
  2139 00000F0C 01F7                    	add		di,si     ;nesse ponto d=d+2*dx+3
  2140 00000F0E 42                      	inc		dx		;incrementa dx
  2141 00000F0F E90E00                  	jmp		plotar_full
  2142                                  inf_full:	
  2143 00000F12 89D6                    	mov		si,dx
  2144 00000F14 29CE                    	sub		si,cx  		;faz x - y (dx-cx), e salva em di 
  2145 00000F16 D1E6                    	sal		si,1
  2146 00000F18 81C60500                	add		si,5
  2147 00000F1C 01F7                    	add		di,si		;nesse ponto d=d+2*(dx-cx)+5
  2148 00000F1E 42                      	inc		dx		;incrementa x (dx)
  2149 00000F1F 49                      	dec		cx		;decrementa y (cx)
  2150                                  	
  2151                                  plotar_full:	
  2152 00000F20 89C6                    	mov		si,ax
  2153 00000F22 01CE                    	add		si,cx
  2154 00000F24 56                      	push	si		;coloca a abcisa y+xc na pilha			
  2155 00000F25 89DE                    	mov		si,bx
  2156 00000F27 29D6                    	sub		si,dx
  2157 00000F29 56                      	push    si		;coloca a ordenada yc-x na pilha
  2158 00000F2A 89C6                    	mov		si,ax
  2159 00000F2C 01CE                    	add		si,cx
  2160 00000F2E 56                      	push	si		;coloca a abcisa y+xc na pilha	
  2161 00000F2F 89DE                    	mov		si,bx
  2162 00000F31 01D6                    	add		si,dx
  2163 00000F33 56                      	push    si		;coloca a ordenada yc+x na pilha	
  2164 00000F34 E85700                  	call 	line
  2165                                  	
  2166 00000F37 89C6                    	mov		si,ax
  2167 00000F39 01D6                    	add		si,dx
  2168 00000F3B 56                      	push	si		;coloca a abcisa xc+x na pilha			
  2169 00000F3C 89DE                    	mov		si,bx
  2170 00000F3E 29CE                    	sub		si,cx
  2171 00000F40 56                      	push    si		;coloca a ordenada yc-y na pilha
  2172 00000F41 89C6                    	mov		si,ax
  2173 00000F43 01D6                    	add		si,dx
  2174 00000F45 56                      	push	si		;coloca a abcisa xc+x na pilha	
  2175 00000F46 89DE                    	mov		si,bx
  2176 00000F48 01CE                    	add		si,cx
  2177 00000F4A 56                      	push    si		;coloca a ordenada yc+y na pilha	
  2178 00000F4B E84000                  	call	line
  2179                                  	
  2180 00000F4E 89C6                    	mov		si,ax
  2181 00000F50 29D6                    	sub		si,dx
  2182 00000F52 56                      	push	si		;coloca a abcisa xc-x na pilha			
  2183 00000F53 89DE                    	mov		si,bx
  2184 00000F55 29CE                    	sub		si,cx
  2185 00000F57 56                      	push    si		;coloca a ordenada yc-y na pilha
  2186 00000F58 89C6                    	mov		si,ax
  2187 00000F5A 29D6                    	sub		si,dx
  2188 00000F5C 56                      	push	si		;coloca a abcisa xc-x na pilha	
  2189 00000F5D 89DE                    	mov		si,bx
  2190 00000F5F 01CE                    	add		si,cx
  2191 00000F61 56                      	push    si		;coloca a ordenada yc+y na pilha	
  2192 00000F62 E82900                  	call	line
  2193                                  	
  2194 00000F65 89C6                    	mov		si,ax
  2195 00000F67 29CE                    	sub		si,cx
  2196 00000F69 56                      	push	si		;coloca a abcisa xc-y na pilha			
  2197 00000F6A 89DE                    	mov		si,bx
  2198 00000F6C 29D6                    	sub		si,dx
  2199 00000F6E 56                      	push    si		;coloca a ordenada yc-x na pilha
  2200 00000F6F 89C6                    	mov		si,ax
  2201 00000F71 29CE                    	sub		si,cx
  2202 00000F73 56                      	push	si		;coloca a abcisa xc-y na pilha	
  2203 00000F74 89DE                    	mov		si,bx
  2204 00000F76 01D6                    	add		si,dx
  2205 00000F78 56                      	push    si		;coloca a ordenada yc+x na pilha	
  2206 00000F79 E81200                  	call	line
  2207                                  	
  2208 00000F7C 39D1                    	cmp		cx,dx
  2209 00000F7E 7203                    	jb		fim_full_circle  ;se cx (y) est� abaixo de dx (x), termina     
  2210 00000F80 E979FF                  	jmp		stay_full		;se cx (y) est� acima de dx (x), continua no loop
  2211                                  	
  2212                                  	
  2213                                  fim_full_circle:
  2214 00000F83 5F                      	pop		di
  2215 00000F84 5E                      	pop		si
  2216 00000F85 5A                      	pop		dx
  2217 00000F86 59                      	pop		cx
  2218 00000F87 5B                      	pop		bx
  2219 00000F88 58                      	pop		ax
  2220 00000F89 9D                      	popf
  2221 00000F8A 5D                      	pop		bp
  2222 00000F8B C20600                  	ret		6
  2223                                  ;-----------------------------------------------------------------------------
  2224                                  ;
  2225                                  ;   fun��o line
  2226                                  ;
  2227                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
  2228                                  line:
  2229 00000F8E 55                      		push		bp
  2230 00000F8F 89E5                    		mov		bp,sp
  2231 00000F91 9C                      		pushf                        ;coloca os flags na pilha
  2232 00000F92 50                      		push 		ax
  2233 00000F93 53                      		push 		bx
  2234 00000F94 51                      		push		cx
  2235 00000F95 52                      		push		dx
  2236 00000F96 56                      		push		si
  2237 00000F97 57                      		push		di
  2238 00000F98 8B460A                  		mov		ax,[bp+10]   ; resgata os valores das coordenadas
  2239 00000F9B 8B5E08                  		mov		bx,[bp+8]    ; resgata os valores das coordenadas
  2240 00000F9E 8B4E06                  		mov		cx,[bp+6]    ; resgata os valores das coordenadas
  2241 00000FA1 8B5604                  		mov		dx,[bp+4]    ; resgata os valores das coordenadas
  2242 00000FA4 39C8                    		cmp		ax,cx
  2243 00000FA6 7408                    		je		line2
  2244 00000FA8 721C                    		jb		line1
  2245 00000FAA 91                      		xchg		ax,cx
  2246 00000FAB 87DA                    		xchg		bx,dx
  2247 00000FAD E91600                  		jmp		line1
  2248                                  line2:		; deltax=0
  2249 00000FB0 39D3                    		cmp		bx,dx  ;subtrai dx de bx
  2250 00000FB2 7202                    		jb		line3
  2251 00000FB4 87DA                    		xchg		bx,dx        ;troca os valores de bx e dx entre eles
  2252                                  line3:	; dx > bx
  2253 00000FB6 50                      		push		ax
  2254 00000FB7 53                      		push		bx
  2255 00000FB8 E811FE                  		call 		plot_xy
  2256 00000FBB 39D3                    		cmp		bx,dx
  2257 00000FBD 7503                    		jne		line31
  2258 00000FBF E9C600                  		jmp		fim_line
  2259 00000FC2 43                      line31:		inc		bx
  2260 00000FC3 E9F0FF                  		jmp		line3
  2261                                  ;deltax <>0
  2262                                  line1:
  2263                                  ; comparar m�dulos de deltax e deltay sabendo que cx>ax
  2264                                  	; cx > ax
  2265 00000FC6 51                      		push		cx
  2266 00000FC7 29C1                    		sub		cx,ax
  2267 00000FC9 890E[0600]              		mov		[deltax],cx
  2268 00000FCD 59                      		pop		cx
  2269 00000FCE 52                      		push		dx
  2270 00000FCF 29DA                    		sub		dx,bx
  2271 00000FD1 7702                    		ja		line32
  2272 00000FD3 F7DA                    		neg		dx
  2273                                  line32:		
  2274 00000FD5 8916[0800]              		mov		[deltay],dx
  2275 00000FD9 5A                      		pop		dx
  2276                                  
  2277 00000FDA 50                      		push		ax
  2278 00000FDB A1[0600]                		mov		ax,[deltax]
  2279 00000FDE 3B06[0800]              		cmp		ax,[deltay]
  2280 00000FE2 58                      		pop		ax
  2281 00000FE3 724D                    		jb		line5
  2282                                  
  2283                                  	; cx > ax e deltax>deltay
  2284 00000FE5 51                      		push		cx
  2285 00000FE6 29C1                    		sub		cx,ax
  2286 00000FE8 890E[0600]              		mov		[deltax],cx
  2287 00000FEC 59                      		pop		cx
  2288 00000FED 52                      		push		dx
  2289 00000FEE 29DA                    		sub		dx,bx
  2290 00000FF0 8916[0800]              		mov		[deltay],dx
  2291 00000FF4 5A                      		pop		dx
  2292                                  
  2293 00000FF5 89C6                    		mov		si,ax
  2294                                  line4:
  2295 00000FF7 50                      		push		ax
  2296 00000FF8 52                      		push		dx
  2297 00000FF9 56                      		push		si
  2298 00000FFA 29C6                    		sub		si,ax	;(x-x1)
  2299 00000FFC A1[0800]                		mov		ax,[deltay]
  2300 00000FFF F7EE                    		imul		si
  2301 00001001 8B36[0600]              		mov		si,[deltax]		;arredondar
  2302 00001005 D1EE                    		shr		si,1
  2303                                  ; se numerador (DX)>0 soma se <0 subtrai
  2304 00001007 81FA0000                		cmp		dx,0
  2305 0000100B 7C09                    		jl		ar1
  2306 0000100D 01F0                    		add		ax,si
  2307 0000100F 81D20000                		adc		dx,0
  2308 00001013 E90600                  		jmp		arc1
  2309 00001016 29F0                    ar1:		sub		ax,si
  2310 00001018 81DA0000                		sbb		dx,0
  2311                                  arc1:
  2312 0000101C F73E[0600]              		idiv		word [deltax]
  2313 00001020 01D8                    		add		ax,bx
  2314 00001022 5E                      		pop		si
  2315 00001023 56                      		push		si
  2316 00001024 50                      		push		ax
  2317 00001025 E8A4FD                  		call		plot_xy
  2318 00001028 5A                      		pop		dx
  2319 00001029 58                      		pop		ax
  2320 0000102A 39CE                    		cmp		si,cx
  2321 0000102C 745A                    		je		fim_line
  2322 0000102E 46                      		inc		si
  2323 0000102F E9C5FF                  		jmp		line4
  2324                                  
  2325 00001032 39D3                    line5:		cmp		bx,dx
  2326 00001034 7203                    		jb 		line7
  2327 00001036 91                      		xchg		ax,cx
  2328 00001037 87DA                    		xchg		bx,dx
  2329                                  line7:
  2330 00001039 51                      		push		cx
  2331 0000103A 29C1                    		sub		cx,ax
  2332 0000103C 890E[0600]              		mov		[deltax],cx
  2333 00001040 59                      		pop		cx
  2334 00001041 52                      		push		dx
  2335 00001042 29DA                    		sub		dx,bx
  2336 00001044 8916[0800]              		mov		[deltay],dx
  2337 00001048 5A                      		pop		dx
  2338                                  
  2339                                  
  2340                                  
  2341 00001049 89DE                    		mov		si,bx
  2342                                  line6:
  2343 0000104B 52                      		push		dx
  2344 0000104C 56                      		push		si
  2345 0000104D 50                      		push		ax
  2346 0000104E 29DE                    		sub		si,bx	;(y-y1)
  2347 00001050 A1[0600]                		mov		ax,[deltax]
  2348 00001053 F7EE                    		imul		si
  2349 00001055 8B36[0800]              		mov		si,[deltay]		;arredondar
  2350 00001059 D1EE                    		shr		si,1
  2351                                  ; se numerador (DX)>0 soma se <0 subtrai
  2352 0000105B 81FA0000                		cmp		dx,0
  2353 0000105F 7C09                    		jl		ar2
  2354 00001061 01F0                    		add		ax,si
  2355 00001063 81D20000                		adc		dx,0
  2356 00001067 E90600                  		jmp		arc2
  2357 0000106A 29F0                    ar2:		sub		ax,si
  2358 0000106C 81DA0000                		sbb		dx,0
  2359                                  arc2:
  2360 00001070 F73E[0800]              		idiv		word [deltay]
  2361 00001074 89C7                    		mov		di,ax
  2362 00001076 58                      		pop		ax
  2363 00001077 01C7                    		add		di,ax
  2364 00001079 5E                      		pop		si
  2365 0000107A 57                      		push		di
  2366 0000107B 56                      		push		si
  2367 0000107C E84DFD                  		call		plot_xy
  2368 0000107F 5A                      		pop		dx
  2369 00001080 39D6                    		cmp		si,dx
  2370 00001082 7404                    		je		fim_line
  2371 00001084 46                      		inc		si
  2372 00001085 E9C3FF                  		jmp		line6
  2373                                  
  2374                                  fim_line:
  2375 00001088 5F                      		pop		di
  2376 00001089 5E                      		pop		si
  2377 0000108A 5A                      		pop		dx
  2378 0000108B 59                      		pop		cx
  2379 0000108C 5B                      		pop		bx
  2380 0000108D 58                      		pop		ax
  2381 0000108E 9D                      		popf
  2382 0000108F 5D                      		pop		bp
  2383 00001090 C20800                  		ret		8
  2384                                  
  2385                                  
  2386                                  
  2387                                  
  2388                                  ;*******************************************************************
  2389                                  segment data
  2390                                  
  2391 00000000 0F                      cor		db		branco_intenso
  2392                                  
  2393                                  ;	I R G B COR
  2394                                  ;	0 0 0 0 preto
  2395                                  ;	0 0 0 1 azul
  2396                                  ;	0 0 1 0 verde
  2397                                  ;	0 0 1 1 cyan
  2398                                  ;	0 1 0 0 vermelho
  2399                                  ;	0 1 0 1 magenta
  2400                                  ;	0 1 1 0 marrom
  2401                                  ;	0 1 1 1 branco
  2402                                  ;	1 0 0 0 cinza
  2403                                  ;	1 0 0 1 azul claro
  2404                                  ;	1 0 1 0 verde claro
  2405                                  ;	1 0 1 1 cyan claro
  2406                                  ;	1 1 0 0 rosa
  2407                                  ;	1 1 0 1 magenta claro
  2408                                  ;	1 1 1 0 amarelo
  2409                                  ;	1 1 1 1 branco intenso
  2410                                  
  2411                                  ;Colors
  2412                                  preto						equ		0
  2413                                  azul						equ		1
  2414                                  verde						equ		2
  2415                                  cyan						equ		3
  2416                                  vermelho				equ		4
  2417                                  magenta					equ		5
  2418                                  marrom					equ		6
  2419                                  branco					equ		7
  2420                                  cinza						equ		8
  2421                                  azul_claro			equ		9
  2422                                  verde_claro			equ		10
  2423                                  cyan_claro			equ		11
  2424                                  rosa						equ		12
  2425                                  magenta_claro		equ		13
  2426                                  amarelo					equ		14
  2427                                  branco_intenso	equ		15
  2428                                  
  2429 00000001 00                      modo_anterior	db	0
  2430 00000002 0000                    linha   	dw  		0
  2431 00000004 0000                    coluna  	dw  		0
  2432 00000006 0000                    deltax		dw			0
  2433 00000008 0000                    deltay		dw			0	
  2434                                  
  2435                                  ;keys			
  2436 0000000A 63                      key_new_game			db	  'c'
  2437 0000000B 04                      key_jogada				db		4
  2438 0000000C 73                      key_out_game			db		's'  
  2439                                  
  2440                                  ;Strings
  2441 0000000D 5465726D696E616C        string_terminal					db	'Terminal'
  2442 00000015 4A4F474F2044412056-     string_game    					db  'JOGO DA VELHA'
  2443 0000001E 454C4841           
  2444 00000022 43616D706F20646520-     string_last_move 				db	'Campo de comando'
  2445 0000002B 636F6D616E646F     
  2446 00000032 43616D706F20646520-     string_message   				db  'Campo de mensagens'
  2447 0000003B 6D656E736167656E73 
  2448 00000044 436F6D616E646F2049-     string_invalid_command	db 	'Comando Invalido'
  2449 0000004D 6E76616C69646F     
  2450 00000054 4A6F6761646120496E-     string_invalid_play			db 	'Jogada Inválida'
  2451 0000005D 76C3A16C696461     
  2452 00000064 4A6F6761646120496E-     string_occupied_cell    db  'Jogada Invalida'
  2453 0000006D 76616C696461       
  2454 00000073 2020202020              string_empty_terminal		db  '     '
  2455 00000078 4A6F6761646120496E-     string_invalid_player   db  'Jogada Invalida'
  2456 00000081 76616C696461       
  2457 00000087 202020202020202020-     string_empty_message    db 	'                                   '
  2458 00000090 202020202020202020-
  2459 00000099 202020202020202020-
  2460 000000A2 2020202020202020   
  2461 000000AA 202020                  string_empty_command    db  '   '
  2462 000000AD 4F206A6F6761646F72-     string_player_C_victory db  'O jogador C venceu!'
  2463 000000B6 20432076656E636575-
  2464 000000BF 21                 
  2465 000000C0 4F206A6F6761646F72-     string_player_X_victory db  'O jogador X venceu!'
  2466 000000C9 20582076656E636575-
  2467 000000D2 21                 
  2468 000000D3 486F75766520656D70-     string_tied 						db  'Houve empate!'
  2469 000000DC 61746521           
  2470                                  
  2471 000000E0 3131                    n11 										db  '11'
  2472 000000E2 3132                    n12 										db  '12'
  2473 000000E4 3133                    n13 										db  '13'
  2474 000000E6 3231                    n21 										db  '21'
  2475 000000E8 3232                    n22 										db  '22'
  2476 000000EA 3233                    n23 										db  '23'
  2477 000000EC 3331                    n31 										db  '31'
  2478 000000EE 3332                    n32 										db  '32'
  2479 000000F0 3333                    n33 										db  '33'
  2480                                  
  2481                                  ;Variaveis que definem o preenchimento das cells, 0 vazio e 1 preenchido
  2482 000000F2 00                      cell11 db 0
  2483 000000F3 00                      cell12 db 0
  2484 000000F4 00                      cell13 db 0
  2485 000000F5 00                      cell21 db 0
  2486 000000F6 00                      cell22 db 0
  2487 000000F7 00                      cell23 db 0
  2488 000000F8 00                      cell31 db 0
  2489 000000F9 00                      cell32 db 0
  2490 000000FA 00                      cell33 db 0
  2491                                  
  2492 000000FB 00                      last_player db 0 ;Última jogador a jogar: 'C' ou 'X'
  2493 000000FC 00                      victorious_player db 0 ;Jogador vencedor da rodada: 'C' ou 'X'
  2494 000000FD 00                      is_tied db 0
  2495                                  
  2496                                  ;*************************************************************************
  2497                                  segment stack stack
  2498 00000000 <res 00000200>            resb 		512
  2499                                  				
  2500                                  stacktop:
  2501                                  ;NAO PODE JOGAR NO MESMO LUGAR\;
  2502                                  
